[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Refactoring Provider",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "overview.html",
    "href": "overview.html",
    "title": "Overview",
    "section": "",
    "text": "Core Functionality\nTODO\nRepresentative of the initial aim: quick access to current Healthcare Provider information that is administrative in nature:",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "overview.html#core-functionality",
    "href": "overview.html#core-functionality",
    "title": "Overview",
    "section": "",
    "text": "affiliations()\nclinicians()\ncrosswalk()\nhospitals()\nlaboratories()\nnppes()\nopt_out()\norder_refer()\nproviders()\nreassignments()\npending()\ntaxonomies()",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "overview.html#value-complexity-added",
    "href": "overview.html#value-complexity-added",
    "title": "Overview",
    "section": "Value ≥ Complexity Added?",
    "text": "Value ≥ Complexity Added?\nAdded value is significant, but tooling, maintenance, etc. much more complex than the core functionality.\n\nquality_payment()\nquality_eligibility()\nopen_payments()\nutilization()\nprescribers()",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "overview.html#questioning-out-of-scope",
    "href": "overview.html#questioning-out-of-scope",
    "title": "Overview",
    "section": "Questioning: Out of Scope",
    "text": "Questioning: Out of Scope\nSurplus to requirements, e.g. historical provider data (either kept current or no longer updated), an applicable area of interest large enough to be moved into its own package, or tangential functionality:\n\noutpatient()\nbeneficiaries()",
    "crumbs": [
      "Overview"
    ]
  },
  {
    "objectID": "catalogs.html",
    "href": "catalogs.html",
    "title": "Data Catalogs",
    "section": "",
    "text": "Main CMS\nread_json_arrow(\n    file = \"https://data.cms.gov/data.json\", \n    col_select = c(\"@context\", \"@id\", \"@type\", \"conformsTo\", \"describedBy\"),\n    as_data_frame = FALSE) |&gt; \n  collect() |&gt; \n  purse()\n\n- $@context    c1 https://project-open-data.cio.gov/v1.1/schema/catalog.jsonld\n- $@id         c1 https://data.cms.gov/data.json                              \n- $@type       c1 dcat:Catalog                                                \n- $conformsTo  c1 https://project-open-data.cio.gov/v1.1/schema               \n- $describedBy c1 https://project-open-data.cio.gov/v1.1/schema/catalog.json\ndata_json &lt;- read_json_arrow(\n  file = \"https://data.cms.gov/data.json\",\n  col_select = c(\"dataset\"),\n    as_data_frame = TRUE) |&gt; \n  to_duckdb()\n\ndata_json |&gt; \n  pull(dataset) |&gt; \n  pluck(1) |&gt; \n  tibble() |&gt; \n  mutate(\n    bureauCode = delist(bureauCode),\n    keyword = map_chr(keyword, \\(x) paste0(delist(x), collapse = \", \")),\n    language = delist(language),\n    programCode = delist(programCode),\n    theme = map_chr(theme, \\(x) paste0(delist(x), collapse = \", \")),\n    references = delist(references)) |&gt;\n  unnest_wider(contactPoint, names_sep = \"_\") |&gt;\n  unnest_wider(publisher, names_sep = \"_\") |&gt; \n  purse()\n\n- $@type                 c139 dcat:Dataset                                  ...\n- $accessLevel           c139 public                                        ...\n- $accrualPeriodicity    c139 R/P1Y                                         ...\n- $bureauCode            c139 009:38                                        ...\n- $contactPoint_@type    c139 vcard:Contact                                 ...\n- $contactPoint_fn       c139 Shared Savings Program - CM                   ...\n- $contactPoint_hasEmail c139 mailto:SharedSavingsProgram@cms.hhs.gov       ...\n- $describedBy           c139 https://data.cms.gov/resources/accountable-ca ...\n- $dataQuality           l139 T                                             ...\n- $description           c139 The Accountable Care Organization Participant ...\n- $distribution          L139 list(structure(list(\"@type\" = c(\"dcat:Distrib ...\n- $identifier            c139 https://data.cms.gov/data-api/v1/dataset/9767 ...\n- $keyword               c139 Medicare, Value-Based Care, Coordinated Care, ...\n- $landingPage           c139 https://data.cms.gov/medicare-shared-savings- ...\n- $language              c139 en-US                                         ...\n- $license               c139 https://www.usa.gov/government-works          ...\n- $modified              p139 2024-01-29                                    ...\n- $programCode           c139 009:000                                       ...\n- $publisher_@type       c139 org:Organization                              ...\n- $publisher_name        c139 Centers for Medicare & Medicaid Services      ...\n- $references            c139 https://data.cms.gov/resources/acos-aco-parti ...\n- $temporal              c139 2014-01-01/2024-12-31                         ...\n- $theme                 c139 Medicare                                      ...\n- $title                 c139 Accountable Care Organization Participants    ...\n- $describedByType       c139 NA                                            ...",
    "crumbs": [
      "Data Catalogs"
    ]
  },
  {
    "objectID": "catalogs.html#provider-cms",
    "href": "catalogs.html#provider-cms",
    "title": "Data Catalogs",
    "section": "Provider CMS",
    "text": "Provider CMS\n\nrequest('https://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items') |&gt;\n  req_perform() |&gt;\n  resp_body_json(simplifyVector = TRUE) |&gt; \n  tibble() |&gt; \n  mutate(\n    bureauCode = delist(bureauCode),\n    keyword = map_chr(keyword, \\(x) paste0(delist(x), collapse = \", \")),\n    programCode = delist(programCode),\n    theme = map_chr(theme, \\(x) paste0(delist(x), collapse = \", \"))) |&gt;\n  unnest_wider(contactPoint, names_sep = \"_\") |&gt;\n  unnest_wider(publisher, names_sep = \"_\") |&gt; \n  purse()\n\n- $accessLevel           c234 public                                        ...\n- $landingPage           c234 https://data.cms.gov/provider-data/dataset/23 ...\n- $bureauCode            c234 009:38                                        ...\n- $issued                c234 2020-03-14                                    ...\n- $@type                 c234 dcat:Dataset                                  ...\n- $modified              c234 2024-12-21                                    ...\n- $released              c234 2024-10-23                                    ...\n- $keyword               c234 Quality, Quality Measures                     ...\n- $contactPoint_@type    c234 vcard:Contact                                 ...\n- $contactPoint_fn       c234 Dialysis Facility Helpdesk                    ...\n- $contactPoint_hasEmail c234 mailto:DialysisData@umich.edu                 ...\n- $contactPoint_hasURL   c234 NA                                            ...\n- $publisher_@type       c234 org:Organization                              ...\n- $publisher_name        c234 Centers for Medicare & Medicaid Services (CMS ...\n- $identifier            c234 23ew-n7w9                                     ...\n- $description           c234 A list of all dialysis facilities registered  ...\n- $title                 c234 Dialysis Facility - Listing by Facility       ...\n- $programCode           c234 009:000                                       ...\n- $distribution          L234 list(structure(list(\"@type\" = \"dcat:Distribut ...\n- $theme                 c234 Dialysis facilities                           ...\n- $archiveExclude        l234 NA                                            ...",
    "crumbs": [
      "Data Catalogs"
    ]
  },
  {
    "objectID": "catalogs.html#open-payments",
    "href": "catalogs.html#open-payments",
    "title": "Data Catalogs",
    "section": "Open Payments",
    "text": "Open Payments\n\nrequest(\"https://openpaymentsdata.cms.gov/api/1/metastore/schemas/dataset/items?show-reference-ids\") |&gt;\n  req_perform() |&gt;\n  resp_body_json(simplifyVector = TRUE) |&gt; \n  tibble() |&gt; \n  mutate(\n    bureauCode = delist(bureauCode),\n    keyword = map_chr(keyword, \\(x) paste0(delist(x), collapse = \", \")),\n    programCode = delist(programCode),\n    theme = map_chr(theme, \\(x) paste0(delist(x), collapse = \", \"))) |&gt;\n  unnest_wider(contactPoint, names_sep = \"_\") |&gt;\n  unnest_wider(publisher, names_sep = \"_\") |&gt; \n  unnest_wider(publisher_data, names_sep = \"_\") |&gt; \n  purse()\n\n- $bureauCode            c74 009:38                                         ...\n- $programCode           c74 009:000                                        ...\n- $accessLevel           c74 public                                         ...\n- $keyword               c74 7a69eb60-9b96-52b9-a965-bc355eb14783, 2017     ...\n- $contactPoint_fn       c74 Open Payments                                  ...\n- $contactPoint_hasEmail c74 mailto:openpayments@cms.hhs.gov                ...\n- $dataQuality           l74 T                                              ...\n- $description           c74 Research Payment Data – Detailed Dataset 2017  ...\n- $distribution          L74 list(structure(list(identifier = \"10ec915a-726 ...\n- $identifier            c74 0e3977b9-a5d6-427e-bc02-480481edd6e0           ...\n- $title                 c74 2017 Research Payment Data                     ...\n- $issued                c74 2024-06-28                                     ...\n- $modified              c74 2024-06-28                                     ...\n- $temporal              c74 2017-01-01/2017-12-31                          ...\n- $publisher_identifier  c74 11b41668-9929-5de3-b494-6464ac4f018d           ...\n- $publisher_data_name   c74 openpaymentsdata.cms.gov                       ...\n- $publisher_data_@type  c74 NA                                             ...\n- $license               c74 https://www.usa.gov/government-works           ...\n- $theme                 c74 0dbaba68-b7d1-55b3-b5fd-038557918e00, Research ...\n- $%modified             c74 2024-07-29T20:42:01+0000                       ...\n- $@type                 c74 NA                                             ...\n- $accrualPeriodicity    c74 NA                                             ...",
    "crumbs": [
      "Data Catalogs"
    ]
  },
  {
    "objectID": "faq.html",
    "href": "faq.html",
    "title": "1  API FAQ",
    "section": "",
    "text": "1.1 API Integration\nThe data.CMS.gov/data.json API:\nTo integrate endpoint requests with the data.cms.gov Public API, follow these steps:",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>API FAQ</span>"
    ]
  },
  {
    "objectID": "faq.html#api-integration",
    "href": "faq.html#api-integration",
    "title": "1  API FAQ",
    "section": "",
    "text": "Dataset & Identifier:\n\nSearch for dataset and visit its Overview page\nClick Access API then API Docs for the Dataset\n\nEndpoint structure:\n\ndata.cms.gov/data-api/v1/dataset/{{dataset_id}}/data\n\nSystem uses JSON:API query syntax:\n\nKey-values: ?filter[field_name]=value&filter[field_other]=value\nResponses are paged and support a max page size of 5000 rows\nUse size & offset query parameters to page through the data",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>API FAQ</span>"
    ]
  },
  {
    "objectID": "faq.html#formats",
    "href": "faq.html#formats",
    "title": "1  API FAQ",
    "section": "2.1 Formats",
    "text": "2.1 Formats\n\ndescription \"latest\" is a URL that always point to the latest data\nmediaType \"text/csv\" is a downloadable CSV file\nmediaType \"application/zip\" is a downloadable ZIP file\nformat \"API\" is an API endpoint\nRemaining entries provide references to data at fixed points in time\n\n\ndistribution |&gt; \n  count(description, \n        format, \n        mediaType) |&gt; \n  emphatic::as_emphatic() |&gt; \n  emphatic::hl(ggplot2::scale_colour_viridis_c(), cols = \"n\") |&gt;\n  emphatic::hl_adjust(text_contrast = 0.5, na = \"-\")\n\n    description format                mediaType    n1        latest    API                        -  1122             -    API                        - 16323             -      - application/vnd.ms-excel   214             -      -          application/zip  5345             -      -                 text/csv 1610\n\n\n\nFor instance, the following URL will always point to the Q2 2021 Payroll Based Journal Daily Nurse Staffing data:\n\n# \"https://data.cms.gov/data-api/v1/dataset/d10d792e-ea6e-4145-8512-34efbc1be04b/data\"\n\nstaffing &lt;- distribution |&gt; \n  filter(\n    grepl(\"Payroll Based Journal Daily Nurse Staffing\", title),\n    format == \"API\",\n    grepl(\"^2021-04\", temporal)) |&gt; \n  pull(accessURL) |&gt; \n  request() |&gt; \n  req_perform() |&gt; \n  resp_body_json(simplifyVector = TRUE)\n\nhead(staffing, 1) |&gt; \n  purse()\n\n- $PROVNUM          c1 015010                        \n- $PROVNAME         c1 COOSA VALLEY HEALTHCARE CENTER\n- $CITY             c1 SYLACAUGA                     \n- $STATE            c1 AL                            \n- $COUNTY_NAME      c1 Talladega                     \n- $COUNTY_FIPS      c1 121                           \n- $CY_Qtr           c1 2021Q2                        \n- $WorkDate         c1 20210401                      \n- $MDScensus        c1 70                            \n- $Hrs_RNDON        c1 8                             \n- $Hrs_RNDON_emp    c1 8                             \n- $Hrs_RNDON_ctr    c1 0                             \n- $Hrs_RNadmin      c1 48.25                         \n- $Hrs_RNadmin_emp  c1 48.25                         \n- $Hrs_RNadmin_ctr  c1 0                             \n- $Hrs_RN           c1 32                            \n- $Hrs_RN_emp       c1 32                            \n- $Hrs_RN_ctr       c1 0                             \n- $Hrs_LPNadmin     c1 0                             \n- $Hrs_LPNadmin_emp c1 0                             \n- $Hrs_LPNadmin_ctr c1 0                             \n- $Hrs_LPN          c1 63.25                         \n- $Hrs_LPN_emp      c1 63.25                         \n- $Hrs_LPN_ctr      c1 0                             \n- $Hrs_CNA          c1 189.5                         \n- $Hrs_CNA_emp      c1 189.5                         \n- $Hrs_CNA_ctr      c1 0                             \n- $Hrs_NAtrn        c1 0                             \n- $Hrs_NAtrn_emp    c1 0                             \n- $Hrs_NAtrn_ctr    c1 0                             \n- $Hrs_MedAide      c1 0                             \n- $Hrs_MedAide_emp  c1 0                             \n- $Hrs_MedAide_ctr  c1 0",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>API FAQ</span>"
    ]
  },
  {
    "objectID": "faq.html#temporal-data",
    "href": "faq.html#temporal-data",
    "title": "1  API FAQ",
    "section": "2.2 Temporal Data",
    "text": "2.2 Temporal Data\nDatasets with multiple historical versions available will have a temporal field in the distribution array of the data.json.\n\nFormat: YYYY-mm-dd/YYYY-mm-dd\n\nThe following example returns the 2017 Medicare Inpatient Hospitals - by Provider and Service Data:\n\ndistribution |&gt; \n  filter(\n    grepl(\"Medicare Inpatient Hospitals - by Provider and Service\", title), \n    format == \"API\",\n    temporal == \"2017-01-01/2017-12-31\") |&gt; \n  purse()\n\n- $@type        c1 dcat:Distribution                                        ...\n- $format       c1 API                                                      ...\n- $accessURL    c1 https://data.cms.gov/data-api/v1/dataset/b61ba5eb-021b-4 ...\n- $resourcesAPI c1 https://data.cms.gov/data-api/v1/dataset-resources/b61ba ...\n- $description  c1 NA                                                       ...\n- $title        c1 Medicare Inpatient Hospitals - by Provider and Service : ...\n- $modified     p1 2023-05-10                                               ...\n- $temporal     c1 2017-01-01/2017-12-31                                    ...\n- $downloadURL  c1 NA                                                       ...\n- $mediaType    c1 NA                                                       ...",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>API FAQ</span>"
    ]
  },
  {
    "objectID": "faq.html#different-json-methods",
    "href": "faq.html#different-json-methods",
    "title": "1  API FAQ",
    "section": "2.3 Different JSON Methods",
    "text": "2.3 Different JSON Methods\nThere are two methods of accessing the latest data.\nBoth result in a URL pointing to the most recent version of the dataset. This URL is canonical, i.e., will not change as new versions are added.\n\nFor this reason, it is recommended to always start with the data.json object as opposed to hardcoding any URL.\n\n\n2.3.1 Standard JSON\nUse the distribution with the \"latest\" description:\n&lt;data_json&gt;\n    =&gt; &lt;dataset&gt; \n    =&gt; &lt;distribution&gt; \n    -&gt; $(description == \"latest\")\n    -&gt; $(accessURL)\n\nFor example, this URL for Opt Out Affidavits is \"https://data.cms.gov/data-api/v1/dataset/\" \"9887a515-7552-4693-bf58-735c77af46d7/data\" ^^^^\n\n\ndistribution |&gt; \n  filter(\n    grepl(\"Order and Referring\", title),\n    description == \"latest\") |&gt; \n  purse()\n\n- $@type        c1 dcat:Distribution                                        ...\n- $format       c1 API                                                      ...\n- $accessURL    c1 https://data.cms.gov/data-api/v1/dataset/c99b5865-1119-4 ...\n- $resourcesAPI c1 https://data.cms.gov/data-api/v1/dataset-resources/c99b5 ...\n- $description  c1 latest                                                   ...\n- $title        c1 Order and Referring : 2024-12-23                         ...\n- $modified     p1 2024-12-23                                               ...\n- $temporal     c1 2024-12-15/2024-12-21                                    ...\n- $downloadURL  c1 NA                                                       ...\n- $mediaType    c1 NA                                                       ...\n\n\n\n\n2.3.2 JSON:API\nThe JSON:API form has a slightly different structure that includes metadata about the dataset. Otherwise it is identical to Method 1.\nUse the URL in the identifier field.\n&lt;data_json&gt;\n    =&gt; &lt;dataset&gt; \n    -&gt; $(title == \"Order and Referring\")\n    -&gt; $(identifier)\n\nFor example, this URL for Opt Out Affidavits: \"https://data.cms.gov/data-api/v1/dataset/\" \"9887a515-7552-4693-bf58-735c77af46d7/data-viewer\" ^^^^^^^^^^^\n\n\njson_api &lt;- data_json |&gt; \n  pull(dataset) |&gt; \n  pluck(1) |&gt; \n  tibble() |&gt; \n  filter(\n    grepl(\n      \"Order and Referring\", \n      title))\n\njson_api |&gt; \n  mutate(\n    bureauCode = delist(bureauCode),\n    keyword = map_chr(\n      keyword, \n      \\(x) paste0(\n        delist(x), \n        collapse = \", \")),\n    language = delist(language),\n    programCode = delist(programCode),\n    references = delist(references),\n    theme = delist(theme)) |&gt; \n  unnest_wider(contactPoint, names_sep = \"_\") |&gt;\n  unnest_wider(publisher, names_sep = \"_\") |&gt; \n  purse()\n\n- $@type                 c1 dcat:Dataset                                    ...\n- $accessLevel           c1 public                                          ...\n- $accrualPeriodicity    c1 R/P3.5D                                         ...\n- $bureauCode            c1 009:38                                          ...\n- $contactPoint_@type    c1 vcard:Contact                                   ...\n- $contactPoint_fn       c1 Provider Enrollment Data Requests - CPI         ...\n- $contactPoint_hasEmail c1 mailto:ProviderEnrollmentDataRequests@cms.hhs.g ...\n- $describedBy           c1 https://data.cms.gov/resources/order-and-referr ...\n- $dataQuality           l1 T                                               ...\n- $description           c1 The Order and Referring dataset provides inform ...\n- $distribution          L1 list(structure(list(\"@type\" = c(\"dcat:Distribut ...\n- $identifier            c1 https://data.cms.gov/data-api/v1/dataset/c99b58 ...\n- $keyword               c1 Medicare, Original Medicare, Provider Enrollmen ...\n- $landingPage           c1 https://data.cms.gov/provider-characteristics/m ...\n- $language              c1 en-US                                           ...\n- $license               c1 https://www.usa.gov/government-works            ...\n- $modified              p1 2024-12-23                                      ...\n- $programCode           c1 009:000                                         ...\n- $publisher_@type       c1 org:Organization                                ...\n- $publisher_name        c1 Centers for Medicare & Medicaid Services        ...\n- $references            c1 https://data.cms.gov/resources/order-and-referr ...\n- $temporal              c1 2023-05-21/2024-12-21                           ...\n- $theme                 c1 Medicare                                        ...\n- $title                 c1 Order and Referring                             ...\n- $describedByType       c1 NA                                              ...",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>API FAQ</span>"
    ]
  },
  {
    "objectID": "faq.html#pagination-example",
    "href": "faq.html#pagination-example",
    "title": "1  API FAQ",
    "section": "3.1 Pagination Example",
    "text": "3.1 Pagination Example\nPaginates through the Opt Out Affidavits data:\n\n\n\n\n\n\nFind the Number of Rows\n\n\n\nUse the stats endpoints i.e.,\n\ndata.cms.gov/data-api/v1/dataset/{ID}/data-viewer/stats\ndata.cms.gov/data-api/v1/dataset/{ID}/data/stats\n\n\n\ndata/\nstats?\nfilter[ex][path]=State%20Code&\nfilter[ex][value]=GA\n\ndata?\nsize=5&\nfilter[ex][path]=State%20Code&\nfilter[ex][value]=GA\n\n# accessURL |&gt; \n#   req_perform_iterative(\n#     next_req = iterate_with_offset(start = 1, offset = 5000)) |&gt; \n#   resp_body_json()\n\noffset_sequence &lt;- \\(found, limit = 5000) {\n  \n  if (found &lt;= limit) \n    return(found)\n  \n  seq.int(\n    from = 0, \n    to = if ((found %% 5) == 0) found else (limit + found), \n    by = limit)\n}\n\n# Not working\noffset_sequence(found = 47025)\n\n [1]     0  5000 10000 15000 20000 25000 30000 35000 40000 45000\n\nquery &lt;- glue::glue(\n  'list(\n  \"filter[id-{FID}][path]\" = \"{PATH}\",\n  \"filter[id-{FID}][value]\" = \"{VALUE}\"\n  )', \n  FID = 1, \n  PATH = \"State Code\", \n  VALUE = \"GA\") |&gt; \n  rlang::parse_expr() |&gt; \n  rlang::eval_bare()\n\naccessURL &lt;- distribution |&gt; \n  filter(\n    grepl(\"Opt Out Affidavits : \", title), \n    format == \"API\",\n    description == \"latest\") |&gt; \n  pull(accessURL) |&gt; \n  request() |&gt; \n  req_url_query(size = 5000, !!!query)\n\nresp_found &lt;- accessURL |&gt; \n  req_url_path_append(\"stats\") |&gt; \n  req_perform() |&gt; \n  resp_body_json() |&gt; \n  fuimus::gelm(\"found\")\n\naccessURL |&gt; \n  req_perform() |&gt; \n  resp_body_json(simplifyVector = TRUE) |&gt; \n  tibble() |&gt; \n  purse()\n\n- $First Name                  c1101 Ana                    Joan            ...\n- $Last Name                   c1101 Adelstein              Miller          ...\n- $NPI                         c1101 1881778967             1982776308      ...\n- $Specialty                   c1101 Clinical Psychologist  Clinical Psycho ...\n- $Optout Effective Date       c1101 07/01/2012             07/01/2014      ...\n- $Optout End Date             c1101 07/01/2026             07/01/2026      ...\n- $First Line Street Address   c1101 675 SEMINOLE AVENUE NE 2520 WINDY HILL ...\n- $Second Line Street Address  c1101 SUITE 307              SUITE 106       ...\n- $City Name                   c1101 ATLANTA                MARIETTA        ...\n- $State Code                  c1101 GA                     GA              ...\n- $Zip code                    c1101 30307                  300678633       ...\n- $Eligible to Order and Refer c1101 N                      N               ...\n- $Last updated                c1101 08/15/2024             08/15/2024      ...",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>API FAQ</span>"
    ]
  },
  {
    "objectID": "faq.html#example-reassignment-subfile-csv",
    "href": "faq.html#example-reassignment-subfile-csv",
    "title": "1  API FAQ",
    "section": "5.1 Example: Reassignment SubFile (csv)",
    "text": "5.1 Example: Reassignment SubFile (csv)\nSite: Public Provider Enrollment Reassignment SubFile\n\nresp_resources &lt;- distribution |&gt; \n  filter(\n  grepl(\"Medicare Fee-For-Service\", title),\n  description == \"latest\") |&gt; \n  pull(resourcesAPI) |&gt; \n  request() |&gt; \n  req_perform() |&gt; \n  resp_body_json(simplifyVector = FALSE) |&gt; \n  list_flatten() |&gt; \n  list_flatten()\n\nreassign_url &lt;- tibble(\n  name = gelm(resp_resources, \"name$\") |&gt; delist(),\n  size = gelm(resp_resources, \"fileSize$\") |&gt; delist(),\n  url =  gelm(resp_resources, \"downloadURL$\") |&gt; delist()) |&gt; \n  filter(grepl(\"Reassignment\", name))\n\nreassign_url |&gt; \n  purse()\n\n- $name c1 Reassignment Sub-File 2024 Q3                                    ...\n- $size i1 108956340                                                        ...\n- $url  c1 https://data.cms.gov/sites/default/files/2024-10/9dc1f6a0-4339-4 ...\n\nreassign_csv &lt;- read_csv_arrow(\n  file = reassign_url$url, \n  as_data_frame = TRUE) |&gt; \n  to_duckdb()\n\nreassign_csv\n\n# Source:   table&lt;arrow_003&gt; [?? x 2]\n# Database: DuckDB v1.1.3 [Andrew@Windows 10 x64:R 4.4.2/:memory:]\n   REASGN_BNFT_ENRLMT_ID RCV_BNFT_ENRLMT_ID\n   &lt;chr&gt;                 &lt;chr&gt;             \n 1 I20031103000001       O20031216000213   \n 2 I20031103000001       O20111004000177   \n 3 I20031103000007       O20040308000883   \n 4 I20031103000007       O20051206000046   \n 5 I20031103000014       O20070303000050   \n 6 I20031103000014       O20221026001638   \n 7 I20031103000020       O20190812002967   \n 8 I20031103000033       O20181107003537   \n 9 I20031103000033       O20181204002777   \n10 I20031103000037       O20051216000183   \n# ℹ more rows",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>API FAQ</span>"
    ]
  },
  {
    "objectID": "faq.html#schema",
    "href": "faq.html#schema",
    "title": "1  API FAQ",
    "section": "5.2 Schema",
    "text": "5.2 Schema\n[data.json]\n |--@context\n |--@id\n |--@type\n |--conformsTo\n |--describedBy\n |--[dataset]\n     |--@type\n     |--accessLevel\n     |--accrualPeriodicity\n     |--bureauCode\n     |--[contactPoint]\n          |--@type\n          |--fn\n          |--hasEmail\n     |--describedBy\n     |--dataQuality\n     |--description\n     |--identifier\n     |--[keyword]\n     |--landingPage\n     |--language\n     |--license\n     |--modified\n     |--programCode\n     |--[publisher]\n          |--@type\n          |--name\n     |--references\n     |--temporal\n     |--theme\n     |--title\n     |--describedByType\n     |--[distribution]\n         |--@type\n         |--format\n         |--accessURL\n         |--resourcesAPI\n         |--description\n         |--title\n         |--modified\n         |--temporal\n         |--downloadURL\n         |--mediaType",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>API FAQ</span>"
    ]
  },
  {
    "objectID": "schema.html",
    "href": "schema.html",
    "title": "2  Schema",
    "section": "",
    "text": "3 dataset Fields",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Schema</span>"
    ]
  },
  {
    "objectID": "schema.html#bureaucode",
    "href": "schema.html#bureaucode",
    "title": "2  Schema",
    "section": "3.1 bureauCode",
    "text": "3.1 bureauCode\nFederal agencies, combined agency and bureau code from OMB Circular A-11, Appendix C.\nUse the format of 015:11.\n\n\n# A tibble: 368 × 6\n   agency_name       bureau_name agency_code bureau_code treasury_code cgac_code\n   &lt;chr&gt;             &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;       &lt;chr&gt;         &lt;chr&gt;    \n 1 Legislative Bran… Senate      001         05          00            000      \n 2 Legislative Bran… House of R… 001         10          00            000      \n 3 Legislative Bran… Joint Items 001         11          00            000      \n 4 Legislative Bran… Capitol Po… 001         13          02            002      \n 5 Legislative Bran… Office of … 001         12          09            009      \n 6 Legislative Bran… Congressio… 001         14          08            008      \n 7 Legislative Bran… Architect … 001         15          01            001      \n 8 Legislative Bran… Botanic Ga… 001         18          09            009      \n 9 Legislative Bran… Library of… 001         25          03            003      \n10 Legislative Bran… Government… 001         30          04            004      \n# ℹ 358 more rows",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Schema</span>"
    ]
  },
  {
    "objectID": "schema.html#programcode",
    "href": "schema.html#programcode",
    "title": "2  Schema",
    "section": "3.2 programCode",
    "text": "3.2 programCode\nFederal agencies, list the primary program related to this data asset, from the Federal Program Inventory.\nUse the format of 015:001.\n\n\n# A tibble: 1,554 × 6\n   agency_name      program_name additional_informati…¹ agency_code program_code\n   &lt;chr&gt;            &lt;chr&gt;        &lt;chr&gt;                  &lt;chr&gt;       &lt;chr&gt;       \n 1 Department of A… Rural Busin… &lt;NA&gt;                   005         005-001     \n 2 Department of A… Rural Busin… &lt;NA&gt;                   005         005-002     \n 3 Department of A… Energy Assi… &lt;NA&gt;                   005         005-003     \n 4 Department of A… Distance Le… &lt;NA&gt;                   005         005-004     \n 5 Department of A… Rural Elect… &lt;NA&gt;                   005         005-005     \n 6 Department of A… Rural Water… &lt;NA&gt;                   005         005-006     \n 7 Department of A… Single Fami… &lt;NA&gt;                   005         005-007     \n 8 Department of A… Multi-Famil… &lt;NA&gt;                   005         005-008     \n 9 Department of A… Farm labor … &lt;NA&gt;                   005         005-009     \n10 Department of A… Rental Assi… &lt;NA&gt;                   005         005-010     \n# ℹ 1,544 more rows\n# ℹ abbreviated name: ¹​additional_information_optional\n# ℹ 1 more variable: program_code_pod_format &lt;chr&gt;",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Schema</span>"
    ]
  },
  {
    "objectID": "schema.html#accrualperiodicity",
    "href": "schema.html#accrualperiodicity",
    "title": "2  Schema",
    "section": "3.3 accrualPeriodicity",
    "text": "3.3 accrualPeriodicity\n\n\n                   term         iso_8601\n1             Decennial           R/P10Y\n2           Quadrennial            R/P4Y\n3                Annual            R/P1Y\n4             Bimonthly R/P2M or R/P0.5M\n5            Semiweekly          R/P3.5D\n6                 Daily            R/P1D\n7              Biweekly R/P2W or R/P0.5W\n8            Semiannual            R/P6M\n9              Biennial            R/P2Y\n10            Triennial            R/P3Y\n11   Three times a week         R/P0.33W\n12  Three times a month         R/P0.33M\n13 Continuously updated           R/PT1S\n14              Monthly            R/P1M\n15            Quarterly            R/P3M\n16          Semimonthly          R/P0.5M\n17   Three times a year            R/P4M\n18               Weekly            R/P1W\n19               Hourly           R/PT1H\n\n\n\niso_8601 &lt;- \\(x) {\n  kit::nswitch(\n    x,\n    \"R/P10Y\",   \"Decennial\",\n    \"R/P4Y\",    \"Quadrennial\",\n    \"R/P1Y\",    \"Annual\",\n    \"R/P0.5M\",  \"Bimonthly\",\n    \"R/P2M\",    \"Bimonthly\",\n    \"R/P0.5W\",  \"Biweekly\",\n    \"R/P2W\",    \"Biweekly\",\n    \"R/P3.5D\",  \"Semiweekly\",\n    \"R/P1D\",    \"Daily\",\n    \"R/P6M\",    \"Semiannual\",\n    \"R/P2Y\",    \"Biennial\",\n    \"R/P3Y\",    \"Triennial\",\n    \"R/P0.33W\", \"Three Times a Week\",\n    \"R/P0.33M\", \"Three Times a Month\",\n    \"R/PT1S\",   \"Continuously Updated\",\n    \"R/P1M\",    \"Monthly\",\n    \"R/P3M\",    \"Quarterly\",\n    \"R/P0.5M\",  \"Semimonthly\",\n    \"R/P4M\",    \"Three Times a Year\",\n    \"R/P1W\",    \"Weekly\",\n    \"R/PT1H\",   \"Hourly\")\n}\n\naccrual_key |&gt; \n  dplyr::mutate(\n    iso_test = iso_8601(iso_8601), .before = 2)\n\n                   term             iso_test         iso_8601\n1             Decennial            Decennial           R/P10Y\n2           Quadrennial          Quadrennial            R/P4Y\n3                Annual               Annual            R/P1Y\n4             Bimonthly                 &lt;NA&gt; R/P2M or R/P0.5M\n5            Semiweekly           Semiweekly          R/P3.5D\n6                 Daily                Daily            R/P1D\n7              Biweekly                 &lt;NA&gt; R/P2W or R/P0.5W\n8            Semiannual           Semiannual            R/P6M\n9              Biennial             Biennial            R/P2Y\n10            Triennial            Triennial            R/P3Y\n11   Three times a week   Three Times a Week         R/P0.33W\n12  Three times a month  Three Times a Month         R/P0.33M\n13 Continuously updated Continuously Updated           R/PT1S\n14              Monthly              Monthly            R/P1M\n15            Quarterly            Quarterly            R/P3M\n16          Semimonthly          Semimonthly          R/P0.5M\n17   Three times a year   Three Times a Year            R/P4M\n18               Weekly               Weekly            R/P1W\n19               Hourly               Hourly           R/PT1H",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Schema</span>"
    ]
  },
  {
    "objectID": "ndf.html",
    "href": "ndf.html",
    "title": "3  NDF",
    "section": "",
    "text": "3.1 National Downloadable File\nhttr2::url_parse(\"https://data.cms.gov/provider-data/api/1/datastore/query/\")\n\n&lt;httr2_url&gt; https://data.cms.gov/provider-data/api/1/datastore/query/\n\n\n• scheme: https\n\n\n• hostname: data.cms.gov\n\n\n• path: /provider-data/api/1/datastore/query/\n\n# distro \n\nunclass(\n  httr2::url_parse(\n    \"?limit=1&offset=100&count=true&results=true&schema=true&keys=true&format=json&rowIds=true\"\n    )\n  )\n\n$scheme\nNULL\n\n$hostname\nNULL\n\n$username\nNULL\n\n$password\nNULL\n\n$port\nNULL\n\n$path\nNULL\n\n$query\n$query$limit\n[1] \"1\"\n\n$query$offset\n[1] \"100\"\n\n$query$count\n[1] \"true\"\n\n$query$results\n[1] \"true\"\n\n$query$schema\n[1] \"true\"\n\n$query$keys\n[1] \"true\"\n\n$query$format\n[1] \"json\"\n\n$query$rowIds\n[1] \"true\"\n\n\n$fragment\nNULL\n\nndf_identifier &lt;- \\(x) {\n  kit::nswitch(x,\n    \"affiliations\", \"27ea-46a8\",\n    \"clinicians\", \"mj5m-pzi6\",\n    default = NA_character_,\n    nThread = 4L)\n}\n\nurl_ndf &lt;- httr2::url_parse(\n  \"https://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items/\"\n  )\n\nurl_tmp &lt;- url_ndf |&gt; \n  httr2::url_build() |&gt; \n  httr2::request()\n\nhttr2::req_template(\n  url_tmp, \n  \"/{fname}?show-reference-ids=true\", \n  fname = ndf_identifier(\"affiliations\"))\n\n&lt;httr2_request&gt;\n\n\nGET\nhttps://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items/27ea-46a8?show-reference-ids=true\n\n\nBody: empty",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NDF</span>"
    ]
  },
  {
    "objectID": "ndf.html#function-draft",
    "href": "ndf.html#function-draft",
    "title": "3  NDF",
    "section": "3.2 Function Draft",
    "text": "3.2 Function Draft\n\nmeta_ndf &lt;- \\(fname) {\n  \n  stopifnot(curl::has_internet())\n  \n  x &lt;- request(\n    paste0(\n      \"https://data.cms.gov/\",\n      \"provider-data/api/1/\",\n      \"metastore/schemas/\",\n      \"dataset/items/\",\n      switch(fname, \n             affiliations = \"27ea-46a8\", \n             clinicians   = \"mj5m-pzi6\", \n             stop(\"Invalid argument\")),\n    \"?show-reference-ids=true\")) |&gt;\n       req_perform() |&gt;\n       resp_body_json(\n         check_type     = FALSE,\n         simplifyVector = TRUE)\n  \n  distro &lt;- gelm(gelm(x, \"distribution\"), \"identifier\")\n  \n  y &lt;- request(\n    paste0(\n    \"https://data.cms.gov/\", \n    \"provider-data/api/1/\",\n    \"datastore/query/\", \n    distro, \n    \"?limit=1&offset=100&\",\n    \"count=true&results=true&\", \n    \"schema=true&keys=true&\",\n    \"format=json&rowIds=true\")) |&gt;\n       req_perform() |&gt;\n       resp_body_json(\n         check_type = FALSE,\n         simplifyVector = TRUE)\n  \n  z &lt;- gelm(gelm(gelm(y, \"schema\"), distro), \"fields\")\n  \n  list(\n    title        = gelm(x, \"title\"),\n    description  = gelm(x, \"description\"),\n    identifier   = gelm(gelm(x, \"identifier\"), \"identifier\"),\n    distribution = distro,\n    issued       = gelm(x, \"issued\"), \n    modified     = gelm(x, \"modified\")[[1]], \n    released     = gelm(x, \"released\"),\n    dimensions   = paste0(gelm(gelm(y, \"count\"), is.numeric), \" x \", gelm(gelm(z, \"record_number\"), \"length\")), \n    fields       = names(z),\n    site         = gelm(x, \"landingPage\"),\n    csv          = gelm(gelm(gelm(x, \"distribution\"), \"data\"), \"downloadURL\", m = \"df\"),\n    dictionary   = paste0(\"https://data.cms.gov/provider-data/sites/default/files/data_dictionaries/physician/DOC_Data_Dictionary.pdf\"))\n  \n}\n\n\n3.2.1 Field Comparison\n\nm_aff &lt;- meta_ndf(\"affiliations\")\n\nm_aff\n\n$title\n[1] \"Facility Affiliation Data\"\n\n$description\n[1] \"This is the facility affiliations data publicly reported in the Provider Data Catalog.\"\n\n$identifier\n[1] \"27ea-46a8\"\n\n$distribution\n[1] \"c0bada3c-9379-5a16-99ec-868e930451d6\"\n\n$issued\n[1] \"2023-08-17\"\n\n$modified\n[1] \"2024-12-02\"\n\n$released\n[1] \"2024-12-12\"\n\n$dimensions\n[1] \"1561449 x 10\"\n\n$fields\n [1] \"record_number\"                             \n [2] \"npi\"                                       \n [3] \"ind_pac_id\"                                \n [4] \"provider_last_name\"                        \n [5] \"provider_first_name\"                       \n [6] \"provider_middle_name\"                      \n [7] \"suff\"                                      \n [8] \"facility_type\"                             \n [9] \"facility_affiliations_certification_number\"\n[10] \"facility_type_certification_number\"        \n\n$site\n[1] \"https://data.cms.gov/provider-data/dataset/27ea-46a8\"\n\n$csv\n[1] \"https://data.cms.gov/provider-data/sites/default/files/resources/b7c4080ae144663e43353a9c35cd3f53_1733184311/Facility_Affiliation.csv\"\n\n$dictionary\n[1] \"https://data.cms.gov/provider-data/sites/default/files/data_dictionaries/physician/DOC_Data_Dictionary.pdf\"\n\nm_clin &lt;- meta_ndf(\"clinicians\")\n\nm_clin\n\n$title\n[1] \"National Downloadable File\"\n\n$description\n[1] \"The Doctors and Clinicians national downloadable file is organized such that each line is unique at the clinician/enrollment record/group/address level. Clinicians with multiple Medicare enrollment records and/or single enrollments linking to multiple practice locations are listed on multiple lines.\"\n\n$identifier\n[1] \"mj5m-pzi6\"\n\n$distribution\n[1] \"21902f69-cf10-57df-b859-94bb4c92e05d\"\n\n$issued\n[1] \"2023-08-17\"\n\n$modified\n[1] \"2024-12-02\"\n\n$released\n[1] \"2024-12-12\"\n\n$dimensions\n[1] \"2595328 x 10\"\n\n$fields\n [1] \"record_number\"        \"npi\"                  \"ind_pac_id\"          \n [4] \"ind_enrl_id\"          \"provider_last_name\"   \"provider_first_name\" \n [7] \"provider_middle_name\" \"suff\"                 \"gndr\"                \n[10] \"cred\"                 \"med_sch\"              \"grd_yr\"              \n[13] \"pri_spec\"             \"sec_spec_1\"           \"sec_spec_2\"          \n[16] \"sec_spec_3\"           \"sec_spec_4\"           \"sec_spec_all\"        \n[19] \"telehlth\"             \"facility_name\"        \"org_pac_id\"          \n[22] \"num_org_mem\"          \"adr_ln_1\"             \"adr_ln_2\"            \n[25] \"ln_2_sprs\"            \"citytown\"             \"state\"               \n[28] \"zip_code\"             \"telephone_number\"     \"ind_assgn\"           \n[31] \"grp_assgn\"            \"adrs_id\"             \n\n$site\n[1] \"https://data.cms.gov/provider-data/dataset/mj5m-pzi6\"\n\n$csv\n[1] \"https://data.cms.gov/provider-data/sites/default/files/resources/52c3f098d7e56028a298fd297cb0b38d_1733184310/DAC_NationalDownloadableFile.csv\"\n\n$dictionary\n[1] \"https://data.cms.gov/provider-data/sites/default/files/data_dictionaries/physician/DOC_Data_Dictionary.pdf\"\n\n\naff &lt;- provider::affiliations(\n  npi = 1558595660, \n  na.rm = FALSE, \n  tidy = FALSE)\n\ncat(\n  utils::formatOL(\n    m_aff$fields), \n  sep = \"\\n\")\ncat(\n  utils::formatOL(\n    names(aff)), \n  sep = \"\\n\")\n\n\n\n 1. record_number\n 2. npi\n 3. ind_pac_id\n 4. provider_last_name\n 5. provider_first_name\n 6. provider_middle_name\n 7. suff\n 8. facility_type\n 9. facility_affiliations_certification_number\n10. facility_type_certification_number\n\n\n 1. record_number\n 2. npi\n 3. ind_pac_id\n 4. provider_last_name\n 5. provider_first_name\n 6. provider_middle_name\n 7. suff\n 8. facility_type\n 9. facility_affiliations_certification_number\n10. facility_type_certification_number\n\n\n\ncln &lt;- provider::clinicians(\n  npi = 1558595660, \n  na.rm = FALSE, \n  tidy = FALSE)\n\ncat(\n  utils::formatOL(\n    m_clin$fields), \n  sep = \"\\n\")\ncat(\n  utils::formatOL(\n    names(cln)), \n  sep = \"\\n\")\n\n\n\n 1. record_number\n 2. npi\n 3. ind_pac_id\n 4. ind_enrl_id\n 5. provider_last_name\n 6. provider_first_name\n 7. provider_middle_name\n 8. suff\n 9. gndr\n10. cred\n11. med_sch\n12. grd_yr\n13. pri_spec\n14. sec_spec_1\n15. sec_spec_2\n16. sec_spec_3\n17. sec_spec_4\n18. sec_spec_all\n19. telehlth\n20. facility_name\n21. org_pac_id\n22. num_org_mem\n23. adr_ln_1\n24. adr_ln_2\n25. ln_2_sprs\n26. citytown\n27. state\n28. zip_code\n29. telephone_number\n30. ind_assgn\n31. grp_assgn\n32. adrs_id\n\n\n 1. record_number\n 2. npi\n 3. ind_pac_id\n 4. ind_enrl_id\n 5. provider_last_name\n 6. provider_first_name\n 7. provider_middle_name\n 8. suff\n 9. gndr\n10. cred\n11. med_sch\n12. grd_yr\n13. pri_spec\n14. sec_spec_1\n15. sec_spec_2\n16. sec_spec_3\n17. sec_spec_4\n18. sec_spec_all\n19. telehlth\n20. facility_name\n21. org_pac_id\n22. num_org_mem\n23. adr_ln_1\n24. adr_ln_2\n25. ln_2_sprs\n26. citytown\n27. state\n28. zip_code\n29. telephone_number\n30. ind_assgn\n31. grp_assgn\n32. adrs_id",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>NDF</span>"
    ]
  },
  {
    "objectID": "syntax.html",
    "href": "syntax.html",
    "title": "4  Query Syntax",
    "section": "",
    "text": "4.1 JSON:API\nThe Drupal core JSON:API module implements the JSON:API spec for Drupal entities. It provides a zero-configuration required, opinionated, way to allow RESTful CRUD for a Drupal site’s content.\nIt is closely coupled to Drupal’s Entity and Field APIs, response caching, and authentication and authorization systems. Because it follows the shared JSON:API conventions it can help increase productivity and allow you to take advantage of non-Drupal specific tooling.\nRefer to the Drupal documentation for more information on filtering API requests.",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Query Syntax</span>"
    ]
  },
  {
    "objectID": "syntax.html#building-filters",
    "href": "syntax.html#building-filters",
    "title": "4  Query Syntax",
    "section": "5.1 Building Filters",
    "text": "5.1 Building Filters\nThe fundamental building blocks of JSON:API’s filters are conditions and groups. Conditions assert that something is true and groups let you compose those assertions into logical sets to make bigger condition groups. Those sets can be nested to make super fine queries. You can think of those nested sets like a tree:\nConventional representation:\n\na( b() && c( d() || e() ) )\n\nTree representation:\n\n   a\n  / \\\n b & c\n    / \\\n   d | e\n\nIn both representations:\n\n\"d\" and \"e\" are members of \"c\" in an OR group.\n\"b\" and \"c\" are members of \"a\" in an AND group.\nSo, what’s inside a condition?\nA condition tells you a TRUE or FALSE thing about a resource and some assertion you make about it, like “was this entity created by a particular user?” When the condition is FALSE for a resource, that resource won’t be included in the collection.\nA condition has 3 primary parts: a path, an operator and a value.\n* A `path` identifies a field on a resource\n* An `operator` is a method of comparison\n* A `value` is the thing you compare against\nIn pseudo-code, a condition looks like this:\n($field !== \"space\")\nWhere:\n* `$field` is the field of the resource identified by its `path`\n* the `operator` is `!==`\n* the `value` is the string `\"space\"`\nIn the JSON:API module, we can’t make it look as pretty as that because we need to make it work inside a URL query string. To do that, we represent each condition with key/value pairs.\nIf we were filtering on a user’s first name, a condition might look something like this:\n?filter[a-label][condition][path]=field_first_name\n&filter[a-label][condition][operator]=%3D  ## %3D is encoded \"=\" symbol\n&filter[a-label][condition][value]=Janis\nNotice that we put a label inside the first set of square brackets. We could easily have made it [b-label] or [this_is_my_super_awesome_label]. The point is that every condition or group should have an identifier.\nBut what if we have lots of Janises in the system?\nLet’s add another filter so we only get Janises with a last name that starts with “J”:\n?filter[first-name-filter][condition][path]=field_first_name\n&filter[first-name-filter][condition][operator]=%3D\n&filter[first-name-filter][condition][value]=Janis\n\n&filter[last-name-filter][condition][path]=field_last_name\n&filter[last-name-filter][condition][operator]=STARTS_WITH\n&filter[last-name-filter][condition][value]=J\nThere are many more filter operators than just = and STARTS_WITH. Here’s the complete list that’s taken right from the JSON:API codebase:\njsonapi\\Query\\EntityCondition::$allowedOperators\n\n  '=', \n  '&lt;&gt;',\n  '&gt;', \n  '&gt;=', \n  '&lt;', \n  '&lt;=',\n  'STARTS_WITH', \n  'CONTAINS', \n  'ENDS_WITH',\n  'IN', \n  'NOT IN',\n  'BETWEEN', \n  'NOT BETWEEN',\n  'IS NULL', \n  'IS NOT NULL'\n  \n\nNote: Symbol operators need to be url-encoded",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Query Syntax</span>"
    ]
  },
  {
    "objectID": "syntax.html#condition-groups",
    "href": "syntax.html#condition-groups",
    "title": "4  Query Syntax",
    "section": "5.2 Condition Groups",
    "text": "5.2 Condition Groups\nNow we know how to build conditions, but we don’t yet know how to build groups of conditions. How do we build a tree like we saw above?\nIn order to do that, we need to have a “group”. A group is a set of conditions joined by a “conjunction.” All groups have conjunctions and a conjunction is either AND or OR.\nNow our filter is a bit too specific! Let’s say we want to find all users with a last name that starts with “J” and either have the first name “Janis” or the first name “Joan”.\nTo do that, we add a group:\n?filter[rock-group][group][conjunction]=OR\nThen, we need assign our filters to that new group.\nTo do that, we add a memberOf key. Every condition and group can have a memberOf key.\n\nTip: Groups can have a memberOf key just like conditions, which means you can have groups of groups\n\n\nNote: Every filter without a memberOf key is assumed to be part of a “root” group with a conjunction of AND.\n\nAll together now:\n?filter[rock-group][group][conjunction]=OR\n\n&filter[janis-filter][condition][path]=field_first_name\n&filter[janis-filter][condition][operator]=%3D\n&filter[janis-filter][condition][value]=Janis\n&filter[janis-filter][condition][memberOf]=rock-group\n\n&filter[joan-filter][condition][path]=field_first_name\n&filter[joan-filter][condition][operator]=%3D\n&filter[joan-filter][condition][value]=Joan\n&filter[joan-filter][condition][memberOf]=rock-group\n\n&filter[last-name-filter][condition][path]=field_last_name\n&filter[last-name-filter][condition][operator]=STARTS_WITH\n&filter[last-name-filter][condition][value]=J\nDoes that look familiar?\nIt should, we saw it above as a tree:\n   a         a = root-and-group\n  / \\\n /   \\       b = last-name-filter\nb     c      c = rock-group\n     / \\\n    /   \\    d = janis-filter\n   d     e   e = joan-filter\nYou can nest these groups as deeply as your heart desires.",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Query Syntax</span>"
    ]
  },
  {
    "objectID": "syntax.html#paths",
    "href": "syntax.html#paths",
    "title": "4  Query Syntax",
    "section": "5.3 Paths",
    "text": "5.3 Paths\nConditions have one last feature: ‘paths’\nPaths provide a way to filter based on relationship values.\nUp to this point, we’ve just been filtering by the hypothetical field_first_name and field_last_name on the user resource.\nLet’s imagine that we want to filter by the name of a user’s career, where career types are stored as a separate resource. We could add a filter like this:\n?filter[career][condition][path]=field_career.name\n&filter[career][condition][operator]=%3D\n&filter[career][condition][value]=Rockstar\nPaths use a “dot notation” to traverse relationships.\n\nIf a resource has a relationship, you can add a filter against it by concatenating the relationship field name and the relationship’s field name with a . (dot).\n\nYou can even filter by relationships of relationships (and so on) just by adding more field names and dots.\n\nTip: You can filter on a specific index of a relationship by putting a non-negative integer in the path. So the path some_relationship.1.some_attribute would only filter by the 2nd related resource.\n\n\nTip: You can filter by sub-properties of a field. For example, a path like field_phone.country_code will work even though field_phone isn’t a relationship.\n\n\nTip: When filtering against configuration properties, you can use an asterisk (*) to stand-in for any portion of a path. For example, /jsonapi/field_config/field_config?filter[dependencies.config.*]=comment.type.comment would match all field configs in which [\"attributes\"][\"dependencies\"][\"config\"] (an indexed array) contains the value \"comment.type.comment\".",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Query Syntax</span>"
    ]
  },
  {
    "objectID": "syntax.html#exact-match-search-on-column",
    "href": "syntax.html#exact-match-search-on-column",
    "title": "4  Query Syntax",
    "section": "5.4 Exact Match Search on Column",
    "text": "5.4 Exact Match Search on Column\n- dataset   Medicare Fee-For-Service Public Provider Enrollment\n  column    PROVIDER_TYPE_DESC \n  equals    PRACTITIONER - GENERAL PRACTICE\n\ncall:     /data?\n          filter[PROVIDER_TYPE_DESC]=PRACTITIONER - GENERAL PRACTICE\ncatalog:        data.json\n  format:       API\n  description:  latest\n  title:        Medicare Fee-For-Service Public Provider Enrollment\n  accessURL:    \"\"\n\nurl: \n  scheme: \"https://\"\n  hostname: \"data.cms.gov/\"\n  api: \"data-api/v1/dataset/\"\n  identifier: \"d10d792e-ea6e-4145-8512-34efbc1be04b\"\n  path: \"/data?\"\n  query: \n    - filter: 1\n      path: \"PROVIDER_TYPE_DESC\"\n      operator: \"EQUALS\"\n      value: \"PRACTITIONER - GENERAL PRACTICE\"",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Query Syntax</span>"
    ]
  },
  {
    "objectID": "syntax.html#contains-search-on-one-column",
    "href": "syntax.html#contains-search-on-one-column",
    "title": "4  Query Syntax",
    "section": "5.5 CONTAINS Search on One Column",
    "text": "5.5 CONTAINS Search on One Column\n- dataset  Medicare Fee-For-Service Public Provider Enrollment\n  column   PROVIDER_TYPE_DESC\n  contains SUPPLIER\n\ncall:    /data?\n          filter[example][condition][path]=PROVIDER_TYPE_DESC\n         &filter[example][condition][operator]=CONTAINS\n         &filter[example][condition][value]=SUPPLIER",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Query Syntax</span>"
    ]
  },
  {
    "objectID": "syntax.html#combination-search-on-two-columns",
    "href": "syntax.html#combination-search-on-two-columns",
    "title": "4  Query Syntax",
    "section": "5.6 Combination Search on Two Columns",
    "text": "5.6 Combination Search on Two Columns\n- dataset  Medicare Fee-For-Service Public Provider Enrollment\n  column   PROVIDER_TYPE_DESC\n  contains PRACTITIONER\n  column   STATE_CD\n  equals   MD\n\ncall:    /data?\n          filter[filter-1][condition][path]=PROVIDER_TYPE_DESC\n         &filter[filter-1][condition][operator]=CONTAINS\n         &filter[filter-1][condition][value]=PRACTITIONER\n         &filter[filter-2][condition][path]=STATE_CD\n         &filter[filter-2][condition][operator]==\n         &filter[filter-2][condition][value]=MD",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Query Syntax</span>"
    ]
  },
  {
    "objectID": "syntax.html#equals",
    "href": "syntax.html#equals",
    "title": "4  Query Syntax",
    "section": "5.7 Equals",
    "text": "5.7 Equals\nThis example is an equals filter searching the Accountable Care Organizations 2021 dataset for a single ID.\nhttps://data.cms.gov/data-api/v1/dataset/\n0ece71c6-1112-47b3-8f7a-5385087e7041/data?\nfilter[filter-0-0][condition][path]=aco_id&\nfilter[filter-0-0][condition][operator]=%3D&\nfilter[filter-0-0][condition][value]=A4807\nAn equals filter can be simplified like this.\nhttps://data.cms.gov/data-api/v1/dataset/\n0ece71c6-1112-47b3-8f7a-5385087e7041/data?\nfilter[aco_id]=A4807",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Query Syntax</span>"
    ]
  },
  {
    "objectID": "syntax.html#keyword",
    "href": "syntax.html#keyword",
    "title": "4  Query Syntax",
    "section": "5.8 Keyword",
    "text": "5.8 Keyword\nThe keyword search will look for matching words in every column. This example will check for “Alex” in the Order and Referring dataset. Notice that it finds matches on both the first and last name fields.\nhttps://data.cms.gov/data-api/v1/dataset/\nc99b5865-1119-4436-bb80-c5af2773ea1f/data?\nkeyword=alex",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Query Syntax</span>"
    ]
  },
  {
    "objectID": "syntax.html#multiple-conditions-at-once",
    "href": "syntax.html#multiple-conditions-at-once",
    "title": "4  Query Syntax",
    "section": "5.9 Multiple Conditions at Once",
    "text": "5.9 Multiple Conditions at Once\nThis search returns results from the Medicare Fee-For-Service Public Provider Enrollment dataset where the provider specialty is “PRACTITIONER - OPTOMETRY” and the location is Virginia.\nhttps://data.cms.gov/data-api/v1/dataset/\n2457ea29-fc82-48b0-86ec-3b0755de7515/data?&\nfilter[root-group][group][conjunction]=AND&\nfilter[group-0][group][conjunction]=AND&\nfilter[group-0][group][memberOf]=root-group&\nfilter[filter-0-0][condition][path]=PROVIDER_TYPE_DESC&\nfilter[filter-0-0][condition][operator]=%3D&\nfilter[filter-0-0][condition][value]=PRACTITIONER%20-%20OPTOMETRY&\nfilter[filter-0-0][condition][memberOf]=group-0&\nfilter[filter-0-1][condition][path]=STATE_CD&\nfilter[filter-0-1][condition][operator]=%3D&\nfilter[filter-0-1][condition][value]=VA&\nfilter[filter-0-1][condition][memberOf]=group-0",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Query Syntax</span>"
    ]
  },
  {
    "objectID": "syntax.html#in",
    "href": "syntax.html#in",
    "title": "4  Query Syntax",
    "section": "5.10 IN",
    "text": "5.10 IN\nThis search returns results from the Opioid Treatment Program Providers dataset where the provider is located from MD, MI, or VA with the results sorted by NPI.\nhttps://data.cms.gov/data-api/v1/dataset/\nf1a8c197-b53d-4c24-9770-aea5d5a97dfb/data?\nfilter[condition][path]=STATE&\nfilter[condition][operator]=IN&\nfilter[condition][value][]=MI&\nfilter[condition][value][]=VA&\nfilter[condition][value][]=MD&\nsort=NPI",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Query Syntax</span>"
    ]
  },
  {
    "objectID": "syntax.html#sorting-results",
    "href": "syntax.html#sorting-results",
    "title": "4  Query Syntax",
    "section": "5.11 Sorting Results",
    "text": "5.11 Sorting Results\nYou can use the sort query parameter to specify which column the results should be sorted by. This example show how to sort the Opt Out Affidavits dataset by NPI.\nLowest first: https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?sort=NPI Highest first: https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?sort=-NPI",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Query Syntax</span>"
    ]
  },
  {
    "objectID": "syntax.html#select-subset-of-columns",
    "href": "syntax.html#select-subset-of-columns",
    "title": "4  Query Syntax",
    "section": "5.12 Select Subset of Columns",
    "text": "5.12 Select Subset of Columns\nYou can use the column query parameter to limit the columns that are returned to you by providing a comma separated list of the columns to include.\nThis example will return just the NPI, First Name, and Last Name from the Order and Referring dataset.\nhttps://data.cms.gov/data-api/v1/dataset/c99b5865-1119-4436-bb80-c5af2773ea1f/data?column=NPI,FIRST_NAME,LAST_NAME",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Query Syntax</span>"
    ]
  },
  {
    "objectID": "syntax.html#specify-number-of-results",
    "href": "syntax.html#specify-number-of-results",
    "title": "4  Query Syntax",
    "section": "5.13 Specify Number of Results",
    "text": "5.13 Specify Number of Results\nYou can use the size and offset parameters to accomplish this.",
    "crumbs": [
      "Data Catalogs",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Query Syntax</span>"
    ]
  },
  {
    "objectID": "affiliations.html",
    "href": "affiliations.html",
    "title": "5  Affiliations",
    "section": "",
    "text": "5.1 Examples\naffiliations(parent_ccn = 670055)\n\n# A tibble: 7 × 8\n  npi        pac        first middle last  facility_type facility_ccn parent_ccn\n  &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;fct&gt;         &lt;chr&gt;        &lt;chr&gt;     \n1 1083145494 3072883404 JOSH… J      ASAM… Inpatient re… 67T055       670055    \n2 1144429580 3577659580 LYSA  LEE    CURRY Inpatient re… 67T055       670055    \n3 1558595660 8921241142 JOHN  D      ALFO… Inpatient re… 67T055       670055    \n4 1710112370 9739337122 VIDYA &lt;NA&gt;   AMAR… Inpatient re… 67T055       670055    \n5 1720069859 7012947229 WILL… WARREN JANES Inpatient re… 67T055       670055    \n6 1740577212 0345473773 GEOFF R      WEIK… Inpatient re… 67T055       670055    \n7 1912260464 5092036509 SAAD  MD     MANS… Inpatient re… 67T055       670055    \n\naffiliations(facility_ccn = 331302)\n\n# A tibble: 189 × 8\n   npi        pac        first   middle last   suffix facility_type facility_ccn\n   &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;fct&gt;         &lt;chr&gt;       \n 1 1003029125 6204824378 STACI   L      CARTE… &lt;NA&gt;   Hospital      331302      \n 2 1013141860 8022069558 DEBORAH M      KAMPS… &lt;NA&gt;   Hospital      331302      \n 3 1013910256 5890719371 JOSE    M      ACOST… &lt;NA&gt;   Hospital      331302      \n 4 1023377843 6901115278 LINDSEY B      WILHE… &lt;NA&gt;   Hospital      331302      \n 5 1043257819 0345243655 PAOLO   &lt;NA&gt;   FEDI   &lt;NA&gt;   Hospital      331302      \n 6 1043397656 4183764558 ANTHONY F      TRAMO… &lt;NA&gt;   Hospital      331302      \n 7 1043672140 7214229350 VANESSA &lt;NA&gt;   FIORI… &lt;NA&gt;   Hospital      331302      \n 8 1063409282 4284548819 NIDAL   &lt;NA&gt;   MAKHO… &lt;NA&gt;   Hospital      331302      \n 9 1073099172 0547519381 BROOKE  A      MAGGY  &lt;NA&gt;   Hospital      331302      \n10 1073585055 0749217313 TODD    J      WHITM… &lt;NA&gt;   Hospital      331302      \n# ℹ 179 more rows\n\naffiliations(facility_ccn = \"33Z302\")\n\n# A tibble: 3 × 8\n  npi        pac        first middle last  facility_type facility_ccn parent_ccn\n  &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;fct&gt;         &lt;chr&gt;        &lt;chr&gt;     \n1 1396989059 8921259557 MARY  K      HALL… Nursing home  33Z302       331302    \n2 1538173869 0547299091 IL    JUN    CHON  Nursing home  33Z302       331302    \n3 1801893318 3577568724 ROB   L      DEMU… Nursing home  33Z302       331302",
    "crumbs": [
      "Core",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Affiliations</span>"
    ]
  },
  {
    "objectID": "affiliations.html#examples",
    "href": "affiliations.html#examples",
    "title": "5  Affiliations",
    "section": "",
    "text": "5.1.1 Individual Provider\n\nlst(\n  nppes        = nppes(npi = 1043245657),\n  providers    = providers(nppes$npi),\n  order_refer  = order_refer(nppes$npi, pivot = FALSE),\n  clinicians   = clinicians(nppes$npi),\n  affiliations = affiliations(nppes$npi),\n  hospitals    = map_dfr(affiliations$facility_ccn, ~ \n                 hospitals(facility_ccn = .x)))\n\n$nppes\n# A tibble: 1 × 29\n  npi        entity_type enum_date  last_update status prefix first middle last \n  &lt;chr&gt;      &lt;fct&gt;       &lt;date&gt;     &lt;date&gt;      &lt;fct&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;\n1 1043245657 Individual  2006-07-11 2013-10-08  Active Dr.    MARK  K      FUNG \n# ℹ 20 more variables: gender &lt;fct&gt;, credential &lt;chr&gt;, sole_prop &lt;lgl&gt;,\n#   purpose &lt;fct&gt;, address &lt;chr&gt;, city &lt;chr&gt;, state &lt;ord&gt;, zip &lt;chr&gt;,\n#   country &lt;chr&gt;, phone &lt;chr&gt;, fax &lt;chr&gt;, tx_code &lt;chr&gt;, tx_primary &lt;lgl&gt;,\n#   tx_desc &lt;chr&gt;, tx_license &lt;chr&gt;, tx_state &lt;ord&gt;, id_code &lt;chr&gt;,\n#   id_desc &lt;chr&gt;, id_state &lt;ord&gt;, id_identifier &lt;chr&gt;\n\n$providers\n# A tibble: 1 × 10\n  npi        pac   enid  specialty_code specialty_description state first middle\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;          &lt;chr&gt;                 &lt;ord&gt; &lt;chr&gt; &lt;chr&gt; \n1 1043245657 7810… I200… 14-22          PRACTITIONER - PATHO… VT    MARK  K     \n# ℹ 2 more variables: last &lt;chr&gt;, gender &lt;fct&gt;\n\n$order_refer\n# A tibble: 1 × 8\n  npi        last_name first_name partb dme   hha   pmd   hospice\n  &lt;chr&gt;      &lt;chr&gt;     &lt;chr&gt;      &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt;  \n1 1043245657 FUNG      MARK       TRUE  TRUE  TRUE  TRUE  TRUE   \n\n$clinicians\n# A tibble: 1 × 19\n  npi        pac     enid  first middle last  gender credential school grad_year\n  &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;fct&gt;  &lt;chr&gt;      &lt;chr&gt;      &lt;int&gt;\n1 1043245657 781089… I200… MARK  K      FUNG  Male   MD         UNIVE…      1999\n# ℹ 9 more variables: specialty &lt;chr&gt;, facility_name &lt;chr&gt;, pac_org &lt;chr&gt;,\n#   members_org &lt;int&gt;, address_org &lt;chr&gt;, city_org &lt;chr&gt;, state_org &lt;ord&gt;,\n#   zip_org &lt;chr&gt;, phone_org &lt;chr&gt;\n\n$affiliations\n# A tibble: 2 × 7\n  npi        pac        first middle last  facility_type facility_ccn\n  &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;fct&gt;         &lt;chr&gt;       \n1 1043245657 7810891009 MARK  K      FUNG  Hospital      470003      \n2 1043245657 7810891009 MARK  K      FUNG  Hospital      330250      \n\n$hospitals\n# A tibble: 3 × 21\n  npi_org    pac_org    enid_org        enid_state facility_ccn organization    \n  &lt;chr&gt;      &lt;chr&gt;      &lt;chr&gt;           &lt;ord&gt;      &lt;chr&gt;        &lt;chr&gt;           \n1 1568419976 3779491071 O20021111000009 VT         470003       UNIVERSITY OF V…\n2 1568419976 3779491071 O20021111000009 VT         470003       UNIVERSITY OF V…\n3 1033270699 2769396878 O20120110000201 NY         330250       CHAMPLAIN VALLE…\n# ℹ 15 more variables: doing_business_as &lt;chr&gt;, specialty_code &lt;chr&gt;,\n#   specialty &lt;chr&gt;, incorp_date &lt;date&gt;, incorp_state &lt;ord&gt;, structure &lt;chr&gt;,\n#   address &lt;chr&gt;, city &lt;chr&gt;, state &lt;ord&gt;, zip &lt;chr&gt;, location_type &lt;chr&gt;,\n#   registration &lt;fct&gt;, multi_npi &lt;lgl&gt;, reh_conversion &lt;lgl&gt;, subgroup &lt;fct&gt;\n\n\n\n\n5.1.2 Organizational Provider\n\nlst(\n  hospitals    = hospitals(organization = \"Elizabethtown Community Hospital\"),\n  affiliations = map_dfr(hospitals$facility_ccn, ~ \n                 affiliations(facility_ccn = .x)))\n\n$hospitals\n# A tibble: 2 × 20\n  npi_org   pac_org enid_org enid_state facility_ccn organization specialty_code\n  &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;    &lt;ord&gt;      &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;         \n1 18917851… 357755… O201011… NY         331302       ELIZABETHTO… 00-85         \n2 14070615… 357755… O202208… NY         33Z302       ELIZABETHTO… 00-85         \n# ℹ 13 more variables: specialty &lt;chr&gt;, incorp_date &lt;date&gt;, incorp_state &lt;ord&gt;,\n#   structure &lt;chr&gt;, address &lt;chr&gt;, city &lt;chr&gt;, state &lt;ord&gt;, zip &lt;chr&gt;,\n#   location_type &lt;chr&gt;, registration &lt;fct&gt;, multi_npi &lt;lgl&gt;,\n#   reh_conversion &lt;lgl&gt;, subgroup &lt;fct&gt;\n\n$affiliations\n# A tibble: 192 × 9\n   npi     pac   first middle last  suffix facility_type facility_ccn parent_ccn\n   &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;  &lt;fct&gt;         &lt;chr&gt;        &lt;chr&gt;     \n 1 100302… 6204… STACI L      CART… &lt;NA&gt;   Hospital      331302       &lt;NA&gt;      \n 2 101314… 8022… DEBO… M      KAMP… &lt;NA&gt;   Hospital      331302       &lt;NA&gt;      \n 3 101391… 5890… JOSE  M      ACOS… &lt;NA&gt;   Hospital      331302       &lt;NA&gt;      \n 4 102337… 6901… LIND… B      WILH… &lt;NA&gt;   Hospital      331302       &lt;NA&gt;      \n 5 104325… 0345… PAOLO &lt;NA&gt;   FEDI  &lt;NA&gt;   Hospital      331302       &lt;NA&gt;      \n 6 104339… 4183… ANTH… F      TRAM… &lt;NA&gt;   Hospital      331302       &lt;NA&gt;      \n 7 104367… 7214… VANE… &lt;NA&gt;   FIOR… &lt;NA&gt;   Hospital      331302       &lt;NA&gt;      \n 8 106340… 4284… NIDAL &lt;NA&gt;   MAKH… &lt;NA&gt;   Hospital      331302       &lt;NA&gt;      \n 9 107309… 0547… BROO… A      MAGGY &lt;NA&gt;   Hospital      331302       &lt;NA&gt;      \n10 107358… 0749… TODD  J      WHIT… &lt;NA&gt;   Hospital      331302       &lt;NA&gt;      \n# ℹ 182 more rows",
    "crumbs": [
      "Core",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Affiliations</span>"
    ]
  },
  {
    "objectID": "quality_eligibility.html",
    "href": "quality_eligibility.html",
    "title": "6  Quality Eligibility",
    "section": "",
    "text": "6.1 QPP CMS Endpoint\nrequest(\"https://qpp.cms.gov/api/eligibility/stats/?year=2025\") |&gt;\n  req_headers(Accept = \"application/vnd.qpp.cms.gov.v6+json\") |&gt;\n  req_perform() |&gt;\n  resp_body_json(simplifyVector = TRUE)\n\n$data\n$data$individual\n$data$individual$hccRiskScoreAverage\n[1] 2.5\n\n$data$individual$dualEligibilityAverage\n[1] 0.507\n\n\n$data$group\n$data$group$hccRiskScoreAverage\n[1] 2.49\n\n$data$group$dualEligibilityAverage\n[1] 0.499\n\nrequest(\"https://qpp.cms.gov/api/eligibility/npis/1043477615/?year=2025\") |&gt;\n  req_headers(Accept = \"application/vnd.qpp.cms.gov.v6+json\") |&gt;\n  req_error(body = \\(resp) resp_body_json(resp)$error$message) |&gt;\n  req_perform() |&gt;\n  resp_body_json(simplifyVector = TRUE) |&gt; \n  pluck(1) |&gt; \n  tibble() |&gt; \n  unnest_wider(specialty, names_sep = \"_\") |&gt;\n  unnest_wider(organizations, names_sep = \"_\") |&gt;\n  unnest_wider(organizations_apms, names_sep = \"_\") |&gt;\n  unnest_wider(organizations_virtualGroups, names_sep = \"_\") |&gt;\n  unnest_wider(organizations_individualScenario, names_sep = \"_\") |&gt;\n  unnest_wider(organizations_groupScenario, names_sep = \"_\") |&gt;\n  # organizations_individualScenario_extremeHardshipReasons\n  # organizations_individualScenario_extremeHardshipSources\n  # organizations_individualScenario_lowVolumeStatusReasons\n  # organizations_individualScenario_specialty\n  # organizations_individualScenario_isEligible\n  # organizations_groupScenario_extremeHardshipReasons\n  # organizations_groupScenario_extremeHardshipSources\n  # organizations_groupScenario_lowVolumeStatusReasons\n  # organizations_groupScenario_isEligible\n  glimpse()\n\nRows: 1\nColumns: 73\n$ firstName                                                 &lt;chr&gt; \"SARAH\"\n$ middleName                                                &lt;chr&gt; \"K\"\n$ lastName                                                  &lt;chr&gt; \"HUSSAIN\"\n$ npi                                                       &lt;chr&gt; \"1043477615\"\n$ nationalProviderIdentifierType                            &lt;int&gt; 1\n$ firstApprovedDate                                         &lt;chr&gt; \"2014-01-27\"\n$ yearsInMedicare                                           &lt;int&gt; 10\n$ pecosEnrollmentDate                                       &lt;int&gt; 2014\n$ newlyEnrolled                                             &lt;lgl&gt; FALSE\n$ specialty_specialtyDescription                            &lt;chr&gt; \"Clinical/Ca…\n$ specialty_typeDescription                                 &lt;chr&gt; \"Doctor of M…\n$ specialty_categoryReference                               &lt;chr&gt; \"Physicians\"\n$ isMaqi                                                    &lt;lgl&gt; FALSE\n$ organizations_prvdrOrgName                                &lt;chr&gt; \"THE MILTON …\n$ organizations_hospitalVbpName                             &lt;lgl&gt; NA\n$ organizations_isFacilityBased                             &lt;lgl&gt; FALSE\n$ organizations_addressLineOne                              &lt;chr&gt; \"890 POPLAR …\n$ organizations_addressLineTwo                              &lt;chr&gt; \"STE 210 PEN…\n$ organizations_city                                        &lt;chr&gt; \"CAMP HILL\"\n$ organizations_state                                       &lt;chr&gt; \"PA\"\n$ organizations_zip                                         &lt;chr&gt; \"170112210\"\n$ organizations_apms_1                                      &lt;lgl&gt; NA\n$ organizations_virtualGroups_1                             &lt;lgl&gt; NA\n$ organizations_individualScenario_aciHardship              &lt;lgl&gt; FALSE\n$ organizations_individualScenario_aciReweighting           &lt;lgl&gt; TRUE\n$ organizations_individualScenario_ambulatorySurgicalCenter &lt;lgl&gt; FALSE\n$ organizations_individualScenario_extremeHardship          &lt;lgl&gt; FALSE\n$ organizations_individualScenario_extremeHardshipReasons   &lt;df[,4]&gt; &lt;data.frame[…\n$ organizations_individualScenario_extremeHardshipEventType &lt;lgl&gt; NA\n$ organizations_individualScenario_extremeHardshipSources   &lt;list&lt;list&gt;&gt; [[]]\n$ organizations_individualScenario_hospitalBasedClinician   &lt;lgl&gt; TRUE\n$ organizations_individualScenario_hpsaClinician            &lt;lgl&gt; FALSE\n$ organizations_individualScenario_iaStudy                  &lt;lgl&gt; FALSE\n$ organizations_individualScenario_isOptedIn                &lt;lgl&gt; NA\n$ organizations_individualScenario_isOptInEligible          &lt;lgl&gt; TRUE\n$ organizations_individualScenario_mipsEligibleSwitch       &lt;lgl&gt; TRUE\n$ organizations_individualScenario_nonPatientFacing         &lt;lgl&gt; FALSE\n$ organizations_individualScenario_optInDecisionDate        &lt;lgl&gt; NA\n$ organizations_individualScenario_ruralClinician           &lt;lgl&gt; FALSE\n$ organizations_individualScenario_smallGroupPractitioner   &lt;lgl&gt; FALSE\n$ organizations_individualScenario_lowVolumeSwitch          &lt;lgl&gt; TRUE\n$ organizations_individualScenario_lowVolumeStatusReasons   &lt;list&lt;list&gt;&gt; [[&lt;data.fram…\n$ organizations_individualScenario_hasPaymentAdjustmentCCN  &lt;lgl&gt; FALSE\n$ organizations_individualScenario_hasHospitalVbpCCN        &lt;lgl&gt; FALSE\n$ organizations_individualScenario_aggregationLevel         &lt;int&gt; 1\n$ organizations_individualScenario_hospitalVbpName          &lt;lgl&gt; NA\n$ organizations_individualScenario_hospitalVbpScore         &lt;int&gt; 0\n$ organizations_individualScenario_isFacilityBased          &lt;lgl&gt; FALSE\n$ organizations_individualScenario_specialtyCode            &lt;chr&gt; \"21\"\n$ organizations_individualScenario_specialty                &lt;df[,3]&gt; &lt;data.frame[…\n$ organizations_individualScenario_isEligible               &lt;df[,4]&gt; &lt;data.frame[…\n$ organizations_individualScenario_eligibilityScenario      &lt;int&gt; 475\n$ organizations_groupScenario_aciHardship                   &lt;lgl&gt; FALSE\n$ organizations_groupScenario_aciReweighting                &lt;lgl&gt; TRUE\n$ organizations_groupScenario_ambulatorySurgicalCenter      &lt;lgl&gt; FALSE\n$ organizations_groupScenario_extremeHardship               &lt;lgl&gt; FALSE\n$ organizations_groupScenario_extremeHardshipReasons        &lt;df[,4]&gt; &lt;data.frame[…\n$ organizations_groupScenario_extremeHardshipEventType      &lt;lgl&gt; NA\n$ organizations_groupScenario_extremeHardshipSources        &lt;list&lt;list&gt;&gt; [[]]\n$ organizations_groupScenario_hospitalBasedClinician        &lt;lgl&gt; TRUE\n$ organizations_groupScenario_hpsaClinician                 &lt;lgl&gt; FALSE\n$ organizations_groupScenario_iaStudy                       &lt;lgl&gt; FALSE\n$ organizations_groupScenario_isOptedIn                     &lt;lgl&gt; NA\n$ organizations_groupScenario_isOptInEligible               &lt;lgl&gt; FALSE\n$ organizations_groupScenario_mipsEligibleSwitch            &lt;lgl&gt; TRUE\n$ organizations_groupScenario_nonPatientFacing              &lt;lgl&gt; FALSE\n$ organizations_groupScenario_optInDecisionDate             &lt;lgl&gt; NA\n$ organizations_groupScenario_ruralClinician                &lt;lgl&gt; FALSE\n$ organizations_groupScenario_smallGroupPractitioner        &lt;lgl&gt; FALSE\n$ organizations_groupScenario_lowVolumeSwitch               &lt;lgl&gt; FALSE\n$ organizations_groupScenario_lowVolumeStatusReasons        &lt;list&lt;list&gt;&gt; [[]]\n$ organizations_groupScenario_aggregationLevel              &lt;int&gt; 2\n$ organizations_groupScenario_isEligible                    &lt;df[,1]&gt; &lt;data.frame[…",
    "crumbs": [
      "Core",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Quality Eligibility</span>"
    ]
  },
  {
    "objectID": "quality_eligibility.html#qpp-cms-endpoint",
    "href": "quality_eligibility.html#qpp-cms-endpoint",
    "title": "6  Quality Eligibility",
    "section": "",
    "text": "QPP Eligibility API Documentation\nQPP Eligibility REST API Documentation\n\n\n\n6.1.1 GraphQL API\n\nBasic Clinician GraphQL Example\nQPP Eligibility GraphQL API Documentation",
    "crumbs": [
      "Core",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Quality Eligibility</span>"
    ]
  }
]