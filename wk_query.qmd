---
title: "Query DSL"
editor_options: 
   chunk_output_type: console
---

```{r setup}
#| echo: false
#| message: false
#| warning: false
source("_common.R")
```

::: callout

## JSON:API Allowed Operators

```{r}
#| label: allowed_operators
#| echo: false
tibble(
  ops = c("=", "<>", ">", ">=", "<", "<=", 
          "STARTS_WITH", "CONTAINS", "ENDS_WITH", 
          "IN", "NOT IN", "BETWEEN", "NOT BETWEEN", 
          "IS NULL", "IS NOT NULL")) |> 
  gt() |> 
  tab_header(html("<b>OPERATIONS</b>")) |> 
  opt_table_font(font = google_font(name = "Spline Sans Mono")) |> 
  opt_all_caps() |> 
  opt_table_lines("none") |> 
  cols_align("center") |> 
  tab_options(quarto.disable_processing = TRUE, column_labels.hidden = TRUE)
```

::: 

## `class_args`

```{r}
#| label: class_args
null_numeric <- new_union(NULL, class_numeric)
null_vector  <- new_union(NULL, class_vector)

class_args <- new_class(
  "class_args",
  properties = list(
    id     = null_numeric,
    state  = null_vector,
    name   = null_vector,
    number = null_numeric
  ),
  validator = function(self) { 
    if (not_null(self@state) && 
        any(!self@state %in% state.abb)) 
      paste("`state`", self@state, "not found")
  }
)

try(
  class_args(id     = 1234567890, 
             state  = "ZZ",
             number = "300.12"))

try(
  class_args(state  = "ZZ",
             name   = "Jerry",
             number = 300.12))

class_args(state  = "GA")
```

## `query_equals`

```{r}
#| label: query_slim
query_equals <- function(args) {
  glue::glue(
  "
  [condition][path]={names(args)}
  [condition][operator]==
  [condition][value]={delist(args)}
  "
  )
}

query_equals(
  list(state  = "GA", 
       name   = "Jerry", 
       number = 300.12))

query_add_filter <- function(query) {
  glue::glue()
}
```


```{r}
#| label: query_equals
query_equals <- function(args) {
  glue::glue(
  "
  filter[f{seq_along(args)}][condition][path]={names(args)}
  filter[f{seq_along(args)}][condition][operator]==
  filter[f{seq_along(args)}][condition][value]={delist(args)}
  "
  )
}

query_equals(
  list(state  = "GA", 
       name   = "Jerry", 
       number = 300.12))
```


```{r}
protofunc <- function(id     = NULL, 
                      state  = NULL, 
                      name   = NULL, 
                      number = NULL) {
  arg <- class_args(
    id     = id,
    state  = state,
    name   = name,
    number = number)
  
  query_equals(compact(props(arg)))
  
}

protofunc(state  = "GA", 
          name   = "Jerry", 
          number = 300.12)
```



```{r}
greater_than <- \(arg, value) {
  glue::glue(
  "
  [condition][path]={arg}&
  [condition][operator]=>&
  [condition][value]={value}&
  "
  )
}

greater_than("overall_rating", 3)

greater_or_equal <- \(arg, value) {
  glue::glue(
  "filter[fID-1][condition][path]={arg}&\\
  filter[fID-1][condition][operator]=>=&\\
  filter[fID-1][condition][value]={value}"
  )
}

greater_or_equal("overall_rating", 3)

test_url <- glue::as_glue("https://data.cms.gov/data-api/v1/dataset/d10d792e-ea6e-4145-8512-34efbc1be04b/data?size=10&offset=0&")

test_url <- test_url + greater_or_equal("overall_rating", 3)

curl::curl_parse_url(test_url)
```

## `class_query`

```{r}
#| label: class_query
class_query <- new_class(
  "class_query",
  properties = list(
    path = class_character,
    operator = class_character,
    value = class_vector,
    limit = class_numeric,
    sort = class_character, 
    column = class_vector,
    group = new_property(
      class_list,
      default = list(
        conjunction = "AND",
        memberOf = ""))
  )
)
```

--------------------------------------------------------------------------------

## Building Queries

   1. Select Dataset/Method
   1. Build JSON Query
   1. Retrieve Number of Results
   1. Build Offset Sequence
   1. Build Request

```r
catalog:        main_catalog
  format:       API
  description:  latest
  title:        Medicare Fee-For-Service Public Provider Enrollment
  accessURL:    ""
```

```{.yaml}
scheme:   https://
hostname: data.cms.gov/
path:
          head:       data-api/v1/dataset/
          identifier: 9887a515-7552-4693-bf58-735c77af46d7/
          tail:       data?
          nobs:       data/stats?
query:
          filter:     1
          path:       PROVIDER_TYPE_DESC
          operator:   =
          value:      PRACTITIONER - GENERAL PRACTICE
          call:       filter[PROVIDER_TYPE_DESC]=PRACTITIONER - GENERAL PRACTICE
```
