# Query {#sec-querying}

```{r}
#| label: setup-common-01
#| include: false
source("includes/_common.R")
```

## Building Queries

   1. Select Dataset/Method
   1. Build JSON Query
   1. Retrieve Number of Results
   1. Build Offset Sequence
   1. Build Request

```{.yaml}
catalog: public
  format: API
  description: latest
  title: Medicare Fee-For-Service Public Provider Enrollment
  url:
    scheme: https:
    host: data.cms.gov
    path:
      head: data-api/v1/dataset
      guid: 9887a515-7552-4693-bf58-735c77af46d7
      tail: data-viewer
      nobs: stats
    query:
      filter: 1
      path: PROVIDER_TYPE_DESC
      operator: =
      value: PRACTITIONER - GENERAL PRACTICE
```

## Operators

```{r}
#| label: allowed_operators
#| echo: false
tibble(
  ops = c("=", "<>", ">", ">=", "<", "<=", 
          "STARTS_WITH", "CONTAINS", "ENDS_WITH", 
          "IN", "NOT IN", "BETWEEN", "NOT BETWEEN", 
          "IS NULL", "IS NOT NULL"),
  impl = c("default", 
           "notequal(x)",
           "greaterthan(x)",
           "greater_or_equal(x)",
           "lessthan(x)",
           "less_or_equal(x)",
           "startswith(x)",
           "includes(x)",
           "endswith(x)",
           "in(x)",
           "notin(x)",
           "inside(x)",
           "outside(x)",
           "X",
           "X"
           )
  ) |> 
  gt() |> 
  tab_header(
    html(
      '<i>JSON<b>:</b>API</i> <span style="color:gray;"><b>Allowed Operations</b></span>'
      )
    ) |> 
  opt_table_font(font = google_font(name = "JetBrains Mono")) |> 
  opt_all_caps() |> 
  opt_table_lines("none") |>
  tab_options(quarto.disable_processing = TRUE, 
              column_labels.hidden = TRUE)
```

## S7 Classes

```{r}
#| eval: false
value <- c("132456789", "1324567890", "132456789", "132456789")

kit::pallv(nchar(value), value = 10L)

all(stri_detect_regex(value, "^[0-9]{10}$"))

allv(nchar(as_chr(value)), 10L)
```


```{r}
#| eval: false
prop_npi <- new_property(
  class = NULL | class_character | class_numeric,
  validator = function(value) {
    if (not_null(value)) {
      if (!allv(nchar(as_chr(value)), 10L)) "`npi` must be 10 characters long"
      if (any(stri_detect_regex(value, "^[0-9]{1,10}$"))) "`npi` must be all digits"
      if (any(!check_luhn(value))) "`npi` must pass Luhn algorithm"
      if (any(!stri_startswith(value, "[12]"))) "`npi` must start with 1 or 2"
    }
  }
)

prop_state <- new_property(
  class = null_character,
  validator = function(value) {
    if (not_null(value)) {
      if (!is_character(value)) "`state` must be a character vector"
      if (any(sf_chars(value) != 2L)) "`state` must be 2 characters long"
      if (any(!value %in% state.abb)) {
        paste(
          "Invalid state(s) entered:",
          paste0(
            value[
              which_(value %in% state.abb, invert = TRUE)],
            collapse = ", "))
      }
    }
  }
)
```


### `class_arg`

```{r}
#| label: class_arg
class_arg <- new_class(
  "class_arg",
  properties  = list(
    endpoint  = new_property(class_character,
    validator = function(value) { 
      if (length(value) != 1L) "must be length 1" 
      }),
    field     = new_property(NULL | class_character,
    validator = function(value) {
      if (not_null(value)) {
        if (length(value) != 1L) "must be length 1" 
      }}),
    operator = new_property(
      class_character, 
      default = "=",
      validator = function(value) {
        if (any(!value %in% c("=", ">=", "<=", ">", "<", "<>", 
                              "STARTS_WITH", "ENDS_WITH", 
                              "CONTAINS", "IN", "NOT IN", "BETWEEN", 
                              "NOT BETWEEN")
               )
           ) "@operator invalid" 
      })
  )
)

# choices = new_property(NULL | class_character,
# setter = function(self, value) {
#   self@choices <- value
#   self}),

npi <- new_class(
  name = "npi",
  parent = class_arg,
  properties = list(
    input = new_property(NULL | class_character | class_numeric),
    field = new_property(NULL | class_character,
    getter = function(self) {
      if (not_null(self@endpoint)) {
        kit::nswitch(
          self@endpoint,
          "affiliations", "npi",
          "enrollees", "NPI",
          "open_payments", "covered_recipient_npi")
        }})),
  validator = function(self) {
    if (not_null(self@input)) {
      if (!allv(nchar(as_chr(self@input)), 10L)) "`npi` must be 10 characters long"
      if (any(stri_detect_regex(self@input, "^[0-9]{1,10}$"))) "`npi` must be all digits"
      if (any(!check_luhn(as_chr(self@input)))) "`npi` must pass Luhn algorithm"
      if (any(!stri_detect_regex(self@input, "^[12]"))) "`npi` must start with 1 or 2"
    }
  }
)

npi

npi(
  endpoint = "affiliations", 
  operator = "IN",
  input = c(1043218118, 1023630738))
```


```{r}
#| eval: false
pac <- class_arg(
  label = "pac",
  alias = "PECOS_ASCT_CNTL_ID",
  operators = c("=", "IN", "NOT IN", "STARTS_WITH", "ENDS_WITH"))

enid <- class_arg(
  label = "enid",
  alias = "ENRLMT_ID",
  operators = c("=", "IN", "NOT IN", "STARTS_WITH", "ENDS_WITH"))

state <- class_arg(
  label = "state",
  alias = "STATE_CD",
  operators = c("=", "IN", "NOT IN", "STARTS_WITH", "ENDS_WITH"),
  choices = state.abb)

name <- class_arg(
  label = "first",
  alias = "FIRST_NAME",
  operators = c("=", "IN", "NOT IN", "STARTS_WITH", "ENDS_WITH"))

gender <- class_arg(
  label = "gender",
  alias = "GNDR_SW",
  operators = c("=", "IN", "NOT IN", "STARTS_WITH", "ENDS_WITH"),
  choices = c("M", "F", "9"))

list2(
  "NPI"                = npi,
  "PECOS_ASCT_CNTL_ID" = pac,
  "ENRLMT_ID"          = enid,
  "PROVIDER_TYPE_CD"   = spec_code,
  "PROVIDER_TYPE_DESC" = spec_desc,
  "STATE_CD"           = state,
  "FIRST_NAME"         = first,
  "MDL_NAME"           = middle,
  "LAST_NAME"          = last,
  "ORG_NAME"           = org,
  "GNDR_SW"            = gender)

class_args <- new_class(
  "class_args",
  properties = list(args = class_list))

list(
  npi = arg_npi,
  pac = arg_pac,
  enid = arg_enid,
  state = arg_state,
  first = arg_firstname,
  gender = arg_gender)

args@
  #' enrollees(enid = "I20040309000221")
  #'
  #' enrollees(npi = "1417918293", spec_code = "14-41")
  #'
  #' enrollees(pac = "2860305554", gender = "9")


try(class_args(
  id     = 1234567890,
  state  = "ZZ",
  number = "300.12"))
```

### `class_args`

```{r}
#| label: class_args
null_numeric    <- new_union(NULL, class_numeric)
null_vector     <- new_union(NULL, class_vector)
null_character  <- new_union(NULL, class_character)

class_args <- new_class(
  "class_args",
  properties = list(
    id     = null_numeric,
    state  = null_character,
    name   = null_character,
    number = null_numeric
  ),
  validator = function(self) { 
    if (not_null(self@state) && 
        any(!self@state %in% state.abb)) 
      paste("`state`", self@state, "not found")
  }
)

try(class_args(
  id     = 1234567890, 
  state  = "ZZ",
  number = "300.12"))

try(class_args(
  state  = "ZZ",
  name   = "Jerry",
  number = 300.12))

class_args(state  = c("GA", "MD"))
```

### `class_query`

```{r}
#| label: class_query
class_query <- new_class(
  "class_query",
  properties = list(
    path     = class_character,
    operator = class_character,
    value    = class_vector,
    limit    = class_numeric,
    sort     = class_character, 
    column   = class_vector,
    group    = new_property(
      class_list,
      default = list(
        conjunction = "AND",
        memberOf    = ""))
  )
)
```

## `query` Formatters

```{r}
#| label: query_test
ex <- list(
  state  = c("GA", "MD"), 
  name   = "Jerry", 
  number = 300.12)
```

### `query_comparison`

```{r}
#| label: query_comparison
query_comparison <- function(args, 
                             operator = c("=", ">", ">=", "<", "<=", "<>")) {
  
  operator <- match.arg(operator)
  args     <- args[
    cheapr::which_(
      cheapr::lengths_(
        args, 
        names = TRUE) == 1
      )]
  
  glue::glue(
  "
  filter[{seq_along(args)}][condition][path]={names(args)}
  filter[{seq_along(args)}][condition][operator]={operator}
  filter[{seq_along(args)}][condition][value]={delist(args)}
  "
  )
}

query_comparison(ex)
query_comparison(ex, ">=")
```

### `query_equals_simple`

```{r}
#| label: query_equals_simple
query_equals_simple <- function(args) {
  
  args <- args[
    cheapr::which_(
      cheapr::lengths_(
        args, 
        names = TRUE) == 1
      )]
  
  glue::glue(
  "
  filter[{names(args)}]={delist(args)}
  "
  )
}

query_equals_simple(ex)
```

### `query_in_notin`

```{r}
#| label: query_in_notin
query_in_notin <- function(args, 
                           operator = c("IN", "NOT IN")) {
  
  operator <- match.arg(operator)
  args     <- args[cheapr::which_(cheapr::lengths_(args, names = TRUE) > 1)]
  
  glue::as_glue(
    c(
      glue::glue(
        "filter[f{seq_along(args)}][condition][path]={names(args)}
        filter[f{seq_along(args)}][condition][operator]={operator}"
        ), 
      glue::glue(
        "filter[f{seq_along(args)}]",
        "[condition][value]",
        "[{seq_along(delist(args))}]={delist(args)}"
        )
      )
    )
}

query_in_notin(ex)
query_in_notin(ex, "NOT IN")
```

### Finalizing `query` Components

```{r}
glue::as_glue(c(query_in_notin(ex), query_comparison(ex)))
```

### Testing in a Function

```{r}
protofunc <- function(id     = NULL, 
                      state  = NULL, 
                      name   = NULL, 
                      number = NULL) {
  arg <- class_args(
    id     = id,
    state  = state,
    name   = name,
    number = number)
  
  query_comparison(compact(props(arg)))
  
}

protofunc(state  = c("GA"), 
          name   = "Jerry", 
          number = 300.12)
```

```{r}
# test_url <- glue::as_glue("https://data.cms.gov/data-api/v1/dataset/d10d792e-ea6e-4145-8512-34efbc1be04b/data?size=10&offset=0&")
# 
# test_url <- test_url + greater_or_equal("overall_rating", 3)
```


--------------------------------------------------------------------------------

## New Function

```{r}
fields <- c(
  "year",
  "covered_recipient_npi",                                         
  "covered_recipient_type",                                        
  "covered_recipient_first_name",                                  
  "covered_recipient_last_name",                                   
  "recipient_city",                                                
  "recipient_state",                                               
  "recipient_zip_code",                                            
  "teaching_hospital_name",                                        
  "form_of_payment_or_transfer_of_value",                          
  "nature_of_payment_or_transfer_of_value",                        
  "applicable_manufacturer_or_applicable_gpo_making_payment_name",
  "applicable_manufacturer_or_applicable_gpo_making_payment_id")

process_params <- \(arg_names, field_names) {
  
  nms <- set_names(arg_names, field_names)
  
  parse_expr(
    paste0(
      "list2(", 
      glue_collapse(
        glue('{names(nms)} = {unname(nms)}'), 
        sep = ", "), ")"))
}

has_operator <- \(args) {
  map_lgl(args, function(x) inherits(x, "query_operator"))
}

name_path <- \(args) {
  map(args, \(x) x[[names(x)]][["path"]] <- names(x))
}
```

```{r}
open_pay <- function(year,
                     npi               = NULL,
                     covered_type      = NULL,
                     first             = NULL,
                     last              = NULL,
                     city              = NULL,
                     state             = NULL,
                     zip               = NULL,
                     teaching_hospital = NULL,
                     payment_form      = NULL,
                     payment_nature    = NULL,
                     payer             = NULL,
                     payer_id          = NULL) {
  
  fn_args <- process_params(fn_fmls_names(), fields) |> 
    eval_bare() |> 
    compact()
  
  # if (any(has_operator(fn_args))) 
  # fn_args[has_operator(fn_args)] <- name_path(fn_args[has_operator(fn_args)])
  
  fn_args
}
```

```{r}
open_pay(year = 2021, npi = "1043218118")
open_pay(year = 2021, payment_nature = "Royalty or License")
open_pay(year = 2021, payment_form = "Stock option")
open_pay(year = 2021, payer = "Adaptive Biotechnologies Corporation")
open_pay(year = 2021, teaching_hospital = "Nyu Langone Hospitals")
open_pay(year = 2017:2023, npi = "1043477615")
```

```{r}
starts_with <- \(x) {
  structure(
    c(path      = NA_character_,
      operator  = "STARTS_WITH",
      value     = x),
    class = "query_operator")
}

starts_with("Royalty or License")

x <- open_pay(
  year = 2021, 
  payment_nature = starts_with("Royalty or License"), 
  teaching_hospital = starts_with("NYU"))

x

names(x[has_operator(x)])

x[has_operator(x)][[1]][["path"]] <- names(x[has_operator(x)])[[1]]

x

# map(args, \(x) x[[names(x)]][["path"]] <- names(x))
# 
# x[has_operator(x)] <- providertwo:::map2(
#   x[has_operator(x)], 
#   names(x[has_operator(x)]), 
#   function(x, y) x[["path"]] <- y)
# 
# x
```


## Query Format

```{r}
url_parse(
  base_url = "https://openpaymentsdata.cms.gov/api/1/datastore/", 
  url      = "query/fdc3c773-018a-412c-8a81-d7b8a13a037b/0") |> 
  url_modify_query(
    `conditions[0][property]` = "covered_recipient_last_name",
    `conditions[0][value]`    = "SMITH",
    `conditions[0][operator]` = "=",
    schema                    = "false",
    keys                      = "false",
    results                   = "false",
    offset                    = 0,
    limit                     = 500) |>
  url_build() |> 
  request() |> 
  perform_simple() |>
  _[["count"]]
```

```{r}
url_parse(
  base_url = "https://openpaymentsdata.cms.gov/api/1/datastore/", 
  url      = "query/fdc3c773-018a-412c-8a81-d7b8a13a037b/0") |> 
  url_modify_query(
    `conditions[0][property]` = "covered_recipient_first_name",
    `conditions[0][value]`    = "PATRICK",
    `conditions[0][operator]` = "=",
    `conditions[1][property]` = "covered_recipient_last_name",
    `conditions[1][value]`    = "WARD",
    `conditions[1][operator]` = "=",
    schema                    = "false",
    keys                      = "false",
    results                   = "false",
    offset                    = 0) |>
  url_build() |> 
  request() |> 
  perform_simple() |>
  _[["count"]]
```

### Other Examples

```{r}
exquery <- glue::glue(
  '
  "filter[{i}][path]" = "{PATH}",
  "filter[{i}][operator]" = "{OPERATOR}",
  "filter[{i}][value]" = "{VALUE}"
  ', 
  i = 1:2, 
  PATH = c("STATE_CD", "LAST_NAME"), 
  OPERATOR = "=",
  VALUE = c("GA", "SMITH")
  ) |> 
  glue::glue_collapse(sep = ",\n")

exquery

glue::glue('c({exquery})') |> 
  rlang::parse_expr() |> 
  rlang::eval_bare()
```


```{r}
glue::glue(
  '
  filter[{PATH}][operator]={OPERATOR}
  filter[{PATH}][value]={VALUE}
  ', 
  PATH = c("STATE_CD", "LAST_NAME"), 
  OPERATOR = "IN",
  VALUE = c("GA", "SMITH")
  )
```

```{r}
#| label: format_syntax
format_syntax <- \(name, value) {
  setNames(
    value, 
    paste0(
      name, 
      "[id-", 
      seq_along(value), 
      "][condition][value]"))
}

format_syntax("filter", c("GA", "NY"))


# query_syntax <- c(
#   "filter[STATE_CD]" = "GA",
#   "filter[LAST_NAME]" = "SMITH"
#   )
```

## Pagination

```{r}
base <- request("https://data.cms.gov/data-api/v1/dataset") |> 
  req_url_path_append("9887a515-7552-4693-bf58-735c77af46d7") |> 
  req_url_path_append("data")

base

stats <- base |> 
  req_url_path_append("stats")

stats

stats <- stats |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

stats |> purse()

# Offset shouldn't go to 50000
offset_sequence(stats$found_rows, 5000)

urls <- glue::glue(
  "{base$url}",
  "?size=5000&",
  "offset=",
  "{offset_sequence(stats$found_rows, 5000)}"
)

urls

resp <- urls[1:3] |> 
  map(
    function(x) {
      request(x) |> 
        req_perform() |> 
        resp_body_json(simplifyVector = TRUE) |> 
        tibble()
    }) |> 
  list_rbind(names_to = "reqID") |> 
  janitor::clean_names()

resp |> 
  janitor::get_dupes()

dupes <- resp |> 
  count(npi, sort = TRUE) |> 
  filter(n > 1) |> 
  pull(npi)

resp |> 
  filter(npi %in% dupes) |> 
  arrange(npi)

resp |> 
  filter(npi %in% c("1225232226", "1740295518", "1326103029")) |> 
  relocate(last_updated) |> 
  arrange(npi)
```

## Example 2

Select Dataset

```{r}
distribution <- read_json_arrow(
  file = "https://data.cms.gov/data.json",
  col_select = c("dataset"),
  as_data_frame = TRUE) |> 
  to_duckdb() |> 
  pull(dataset) |> 
  pluck(1) |> 
  select(distribution) |> 
  as_tibble() |> 
  unnest(distribution) |> 
  rename_with(remove_at_symbol) |> 
  filter(format      == "API", 
         description == "latest") |> 
  handle_na()

distribution |> 
  filter(grepl("Enrollment", title)) |> 
  pull(title)

accessURL <- distribution |> 
  filter(grepl("Opt Out Affidavits : ", title)) |> 
  pull(accessURL)

accessURL
```

Format Query

```{r}
query <- glue::glue(
  'c(
    "filter[{i}][path]"  = "{PATH}",
    "filter[{i}][value]" = "{VALUE}"
  )', 
  i = 1, 
  PATH = "State Code", 
  VALUE = "CA")

query

query <- query |> 
  parse_expr() |> 
  eval_bare()

query
```

Retrieve Number of Results

```{r}
queryurl <- accessURL |> 
  request() |> 
  req_url_query(size = 5000, !!!query)

nresults <- queryurl |> 
  req_url_path_append("stats") |> 
  req_perform() |> 
  resp_body_json() |> 
  gelm("found")

nresults
```


```{r}
url_parse(queryurl$url)
```

Generate and Send Requests

```{r}
reqs <- map(
  glue(
    "{url}", 
    "&offset={off}", 
    url = queryurl$url, 
    off = offset_sequence(nresults, 5000)), 
  httr2::request)

res <- req_perform_parallel(reqs) |> 
  resps_successes() |> 
  map(\(x) tibble(resp_body_json(x, simplifyVector = TRUE))) |> 
  bind_rows()

set_clean(res, names(res)) |> 
  map_na_if() |> 
  mtt(
    optout_effective_date = as_date(optout_effective_date, fmt = "%m/%d/%Y"),
    optout_end_date = as_date(optout_end_date, fmt = "%m/%d/%Y"),
    last_updated = as_date(last_updated, fmt = "%m/%d/%Y")
    ) |> 
  cheapr::overview()
```

## Try Again

```{r}
startswith <- \(x) {
  list(
    OPERATOR = "STARTS_WITH", 
    VALUE    = as.character(x)
  )
}

startswith("Royalty or License")

between <- \(x, negate = FALSE) {
  list(
    OPERATOR = ifelse(negate, "NOT BETWEEN", "BETWEEN"), 
    VALUE    = as.character(x)
  )
}

between(c(1, 10))

between(c(1, 10), negate = TRUE)

endswith <- \(x) {
  list(
    OPERATOR = "ENDS_WITH", 
    VALUE    = as.character(x)
  )
}

endswith("NYU")

is_in <- \(x, negate = FALSE) {
  list(
    OPERATOR = ifelse(negate, "NOT IN", "IN"), 
    VALUE    = as.character(x)
  )
}

is_in(c("GA", "NY"))

is_in(c("GA", "NY"), negate = TRUE)
```

