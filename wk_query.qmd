---
title: "Query DSL"
editor_options: 
   chunk_output_type: console
---

```{r}
#| label: setup-common-01
#| include: false
source("includes/_common.R")

# test_url <- glue::as_glue("https://data.cms.gov/data-api/v1/dataset/d10d792e-ea6e-4145-8512-34efbc1be04b/data?size=10&offset=0&")
# 
# test_url <- test_url + greater_or_equal("overall_rating", 3)
```

## Building Queries

   1. Select Dataset/Method
   1. Build JSON Query
   1. Retrieve Number of Results
   1. Build Offset Sequence
   1. Build Request

```{.yaml}
catalog: public
  format: API
  description: latest
  title: Medicare Fee-For-Service Public Provider Enrollment
  url:
    scheme: https:
    host: data.cms.gov
    path:
      head: data-api/v1/dataset
      guid: 9887a515-7552-4693-bf58-735c77af46d7
      tail: data-viewer
      nobs: stats
    query:
      filter: 1
      path: PROVIDER_TYPE_DESC
      operator: =
      value: PRACTITIONER - GENERAL PRACTICE
```

## Operators

```{r}
#| label: allowed_operators
#| echo: false
tibble(
  ops = c("=", "<>", ">", ">=", "<", "<=", 
          "STARTS_WITH", "CONTAINS", "ENDS_WITH", 
          "IN", "NOT IN", "BETWEEN", "NOT BETWEEN", 
          "IS NULL", "IS NOT NULL"),
  impl = c("default", 
           "notequal(x)",
           "greaterthan(x)",
           "greater_or_equal(x)",
           "lessthan(x)",
           "less_or_equal(x)",
           "startswith(x)",
           "includes(x)",
           "endswith(x)",
           "in(x)",
           "notin(x)",
           "inside(x)",
           "outside(x)",
           "X",
           "X"
           )
  ) |> 
  gt() |> 
  tab_header(
    html(
      '<i>JSON<b>:</b>API</i> <span style="color:gray;"><b>Allowed Operations</b></span>'
      )
    ) |> 
  opt_table_font(font = google_font(name = "JetBrains Mono")) |> 
  opt_all_caps() |> 
  opt_table_lines("none") |>
  tab_options(quarto.disable_processing = TRUE, 
              column_labels.hidden = TRUE)
```

## S7

### `class_query`

```{r}
#| label: class_query
class_query <- new_class(
  "class_query",
  properties = list(
    path     = class_character,
    operator = class_character,
    value    = class_vector,
    limit    = class_numeric,
    sort     = class_character, 
    column   = class_vector,
    group    = new_property(
      class_list,
      default = list(
        conjunction = "AND",
        memberOf    = ""))
  )
)
```

### `class_args`

```{r}
#| label: class_args
null_numeric    <- new_union(NULL, class_numeric)
null_vector     <- new_union(NULL, class_vector)
null_character  <- new_union(NULL, class_character)

class_args <- new_class(
  "class_args",
  properties = list(
    id     = null_numeric,
    state  = null_character,
    name   = null_character,
    number = null_numeric
  ),
  validator = function(self) { 
    if (not_null(self@state) && 
        any(!self@state %in% state.abb)) 
      paste("`state`", self@state, "not found")
  }
)

try(class_args(
  id     = 1234567890, 
  state  = "ZZ",
  number = "300.12"))

try(class_args(
  state  = "ZZ",
  name   = "Jerry",
  number = 300.12))

class_args(state  = c("GA", "MD"))
```

## `query` Formatters

```{r}
#| label: query_test
ex <- list(
  state  = c("GA", "MD"), 
  name   = "Jerry", 
  number = 300.12)
```

### `query_comparison`

```{r}
#| label: query_comparison
query_comparison <- function(args, operator = c("=", ">", ">=", "<", "<=", "<>")) {
  
  operator <- match.arg(operator)
  args     <- args[
    cheapr::which_(
      cheapr::lengths_(
        args, 
        names = TRUE) == 1
      )]
  
  glue::glue(
  "
  filter[f{seq_along(args)}][condition][path]={names(args)}
  filter[f{seq_along(args)}][condition][operator]={operator}
  filter[f{seq_along(args)}][condition][value]={delist(args)}
  "
  )
}

query_comparison(ex)
query_comparison(ex, ">=")
```

### `query_equals_simple`

```{r}
#| label: query_equals_simple
query_equals_simple <- function(args) {
  
  args <- args[
    cheapr::which_(
      cheapr::lengths_(
        args, 
        names = TRUE) == 1
      )]
  
  glue::glue(
  "
  filter[{names(args)}]={delist(args)}
  "
  )
}

query_equals_simple(ex)
```

### `query_in_notin`

```{r}
#| label: query_in_notin
query_in_notin <- function(args, operator = c("IN", "NOT IN")) {
  
  operator <- match.arg(operator)
  args     <- args[cheapr::which_(cheapr::lengths_(args, names = TRUE) > 1)]
  
  glue::as_glue(
    c(
      glue::glue(
        "filter[f{seq_along(args)}][condition][path]={names(args)}
        filter[f{seq_along(args)}][condition][operator]={operator}"
        ), 
      glue::glue(
        "filter[f{seq_along(args)}]",
        "[condition][value]",
        "[{seq_along(delist(args))}]={delist(args)}"
        )
      )
    )
}

query_in_notin(ex)
query_in_notin(ex, "NOT IN")
```

### Finalizing `query` Components

```{r}
glue::as_glue(c(query_in_notin(ex), query_comparison(ex)))
```

### Testing in a Function

```{r}
protofunc <- function(id     = NULL, 
                      state  = NULL, 
                      name   = NULL, 
                      number = NULL) {
  arg <- class_args(
    id     = id,
    state  = state,
    name   = name,
    number = number)
  
  query_comparison(compact(props(arg)))
  
}

protofunc(state  = c("GA"), 
          name   = "Jerry", 
          number = 300.12)
```

--------------------------------------------------------------------------------
