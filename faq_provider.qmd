---
title: "Provider API"
editor_options: 
   chunk_output_type: console
---

```{r setup}
#| echo: false
#| message: false
#| warning: false
source("_common.R")

htmltools::tagList(
  btn_link("https://data.cms.gov/provider-data/docs", 
           "Provider API Docs"),
  btn_link("https://data.cms.gov/provider-data/search", 
           "Dataset Search"))

library(gt)
```


The **Provider Data Catalog API** provides access to official CMS data used on the **Medicare Care Compare** website and directories.

   * [Home](https://data.cms.gov/provider-data/)
   * [About](https://data.cms.gov/provider-data/about)

### Catalog

A comprehensive list of all datasets available from the `metastore/schemas` endpoint:

```{r}
#| label: Catalog
provider_data() |>
  reframe(
    id = row_number(),
    title,
    keyword,
    description,
    issued,
    modified,
    released,
    download = distribution_downloadURL,
    website = landingPage
  ) |>
  arrange(id, title) |>
  gt(rowname_col = "id") |>
  opt_all_caps() |>
  opt_table_font(font = google_font(name = "Open Sans")) |>
  fmt_date(columns = c(issued, modified, released)) |>
  fmt_url(
    columns = download,
    show_underline = TRUE,
    label = "CSV File",
    button_fill = "darkgreen"
  ) |>
  fmt_url(
    columns = website,
    show_underline = TRUE,
    label = "Site Home",
    button_fill = "darkgreen"
  ) |>
  tab_style(
    style = css(
      position = "sticky",
      top = "-1em",
      `z-index` = 10
    ),
    locations = cells_column_labels()
  ) |>
  tab_style(
    style = cell_text(weight = "lighter", size = "small"),
    locations = cells_body(columns = c(keyword, description, issued, modified, released))
  ) |>
  tab_style(
    style = cell_text(
      weight = "bold",
      size = "small",
      font = google_font(name = "Fira Code")
    ),
    locations = cells_body(columns = c(title, issued, modified, released, download, website))
  ) |>
  tab_style(style = cell_text(weight = "bold"),
            locations = cells_body(columns = title)) |>
  tab_options(
    column_labels.border.bottom.style = "hidden",
    column_labels.padding.horizontal = px(20),
    column_labels.background.color = "#555555",
    container.height = px(500),
    data_row.padding.horizontal = px(20),
    heading.align = "left",
    heading.border.bottom.color = "#555555",
    heading.title.font.weight = "bold",
    heading.background.color = "#555555",
    quarto.disable_processing = TRUE,
    source_notes.font.size = px(16),
    table.border.top.color = "#555555",
    table.border.top.style = "hidden",
    table.width = pct(50)
  )
```

### Rate Limit

The API is currently limited to a maximum of **`2000`** per request. The following example uses the __ESRD QIP - Clinical Depression Screening and Follow-up - Payment Year 2024__ dataset

   1. Fetch the first 2000 results:

```{r}
ownership0 <- url_parse(
  base_url = "https://data.cms.gov/provider-data/", 
  url      = "api/1/datastore/query/7t8x-u3ir/0") |> 
  url_modify_query(
    offset = 0, 
    limit  = 2000) |> 
  url_build() |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

ownership0$query

ownership0$count

ownership0$results |> 
  tibble() |> 
  glimpse()
```

   2. Fetch the next 2000 results (2001-4000):

```{r}
ownership1 <- url_parse(
  base_url = "https://data.cms.gov/provider-data/api/1/datastore/query/", 
  url      = "7t8x-u3ir/0") |> 
  url_modify_query(
    offset = 2001, 
    limit  = 2000) |> 
  url_build() |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

ownership1$query

ownership1$count

ownership1$results |> 
  tibble() |> 
  glimpse()
```

Continue incrementing the offset by 2,000 for each subsequent batch. When retrieving large datasets, consider pacing your requests to avoid overwhelming your system with data and to allow for graceful error handling. Depending on the volume of data and your application's capabilities, consider implementing a back-off strategy if errors occur.

### Ratings

CMS's **Five-Star Quality Rating System** is designed to help users compare the overall quality of care across different healthcare providers. Access these ratings by referring to the associated column names:

   * __Nursing Home__: `overall_rating`
   * __Hospitals__: `hospital_overall_rating`
   * __Dialysis__: `five_star`
   * __Hospice__: `star_rating`
   * __Home Health__: `quality_of_patient_care_star_rating`

For example, the query for [**Nursing Home**](https://data.cms.gov/provider-data/dataset/4pq5-n9py) facilities with _less than_ a 5-star overall rating is:

```{r}
#| label: nhome0
nhome0 <- url_parse(
  base_url = "https://data.cms.gov/provider-data/api/1/datastore/query/", 
  url      = "4pq5-n9py/0") |> 
  url_modify_query(
    `conditions[0][property]` = "overall_rating",
    `conditions[0][value]`    = 5,
    `conditions[0][operator]` = "<",
    offset                    = 0, 
    limit                     = 2000) |> 
  url_build() |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

nhome0$query

nhome0$count

nhome0$results |> tibble()

nhome0$results |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na() |> 
  count(overall_rating, sort = TRUE)
```


```{r}
#| label: nhome1
nhome1 <- url_parse(
  base_url = "https://data.cms.gov/provider-data/api/1/datastore/query/", 
  url      = "4pq5-n9py/0") |> 
  url_modify_query(
    `conditions[0][property]` = "overall_rating",
    `conditions[0][value]`    = 5,
    `conditions[0][operator]` = "<",
    offset                    = 2001, 
    limit                     = 2000) |> 
  url_build() |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

nhome1$query

nhome1$count

nhome1$results |> tibble()

nhome1$results |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na() |> 
  count(overall_rating, sort = TRUE)
```


### Specific Conditions

Use the __Datastore Query Endpoint__ (`datastore/query/{datasetID}/{index}`). It takes two arguments: the __`datasetID`__, which does not change between data refreshes, and the distribution's __`index`__, which will _always_ be `0`.

For example, to return the first 500 results (the default) of a dataset with an overall rating of 5:

```{r}
#| label: first_500
url_parse(
  base_url = "https://data.cms.gov/provider-data/api/1/datastore/query/", 
  url      = "4pq5-n9py/0") |> 
  url_modify_query(
    `conditions[0][property]` = "overall_rating",
    `conditions[0][value]`    = 5,
    `conditions[0][operator]` = "=",
    offset                    = 0, 
    limit                     = 500)
```

More complex queries can be created in JSON and converted to an HTTP query string using the [JSON Query to String](https://www.convertonline.io/convert/json-to-query-string) tool. 

For example, to return the `cms_certification_number_ccn` and `overall_rating` columns with a rating greater than 3, use the following JSON:

```{.json}
{
    "properties": [
        "cms_certification_number_ccn",
        "overall_rating"
    ],
    "conditions": [
        {
            "property":"overall_rating",
            "value": "3",
            "operator": ">"
        }
    ]
}
```

This converts to a query string of:

```{r}
#| label: ccn_rating
nhomegt3 <- url_parse(
  base_url = "https://data.cms.gov/provider-data/api/1/datastore/query/", 
  url      = "4pq5-n9py/0") |> 
  url_modify_query(
    `properties[]`            = "state",
    `properties[]`            = "overall_rating",
    `conditions[0][property]` = "overall_rating",
    `conditions[0][value]`    = 3,
    `conditions[0][operator]` = ">",
    offset                    = 0, 
    limit                     = 2000) |> 
  url_build() |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

nhomegt3$query

nhomegt3$count

nhomegt3$results |> tibble()

nhomegt3$results |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na() |> 
  count(state, overall_rating, sort = TRUE)
```

### Search

#### `theme`

Return a list of all public datasets for a particular __Topic__ area via the `/api/1/search` endpoint. For example, to get a list of all datasets in the `Home health services` Topic, you could use:

```{r}
#| label: search_theme
#| eval: false
x <- request(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "search?",
    "page-size=100&",
    "theme=Home%20health%20services"
    )
  ) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

x$facets |> 
  tibble() |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na()

x
```

> __Note__: If the `page-size` is not provided, the default result limit is 10.

#### `keyword`

One of the easiest ways to generate your search parameters is to use the Provider Data Catalog [search page](https://data.cms.gov/provider-data/search) and then copy the query string to the end of the search endpoint. For example, if you filter by _"Dialysis facilities"_ tagged with _"Linking Quality to Payment"_ and select 25 results per page, the query string produced is:

```{r}
#| label: search_keyword
#| eval: false
x <- request(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "search?",
    "keyword=Linking%20Quality%20to%20Payment&",
    "page-size=25&",
    "theme=Dialysis%20facilities"
    )
  ) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

x$facets |> 
  tibble() |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na()

x$results
```

#### `fulltext`

Use the same method to return a list of datasets that contain a keyword (like "ratings") in their title and/or description:

```{r}
#| label: search_fulltext
#| eval: false
x <- request(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "search?",
    "fulltext=ratings"
    )
  ) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

x$facets |> 
  tibble() |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na()

x$results
```


## Differences

::: {#nte-differences .callout-note collapse="false"}

#### __Datastore__ vs. __Metastore__

   * __Datastore__
      * Data from the data files (CSVs)
   * __Metastore__
      * Metadata from the `data.json` file 
      * `title`, `last_updated`, `release_date`, `keywords`, etc.

> Think of the __Metastore__ as the library index that helps you find the right book (`dataset`), and the __Datastore__ as the book itself.


#### __Distribution__ vs. __Dataset__

   * __Distribution__
      * Unique identifier of the __Datastore__ 
      * _Changes with every data refresh_
      * Specific to a particular CSV data import
   * __Dataset__
      * Unique identifier of the __Dataset__ 
      * _Does not change between data refreshes_
      * Comes from the `data.json` file
      * Appears as part of the URL in the PDC site

--------------------------------------------------------------------------------

> If you have been using the `datastore/sql` or `datastore/query/{distributionId}` endpoints, consider switching to the __`datastore/query/{datasetID}/{index}`__ endpoint instead. 

The `datasetID` does not change between refreshes, and, currently, all **Provider Data Catalog** datasets only have a single resource, so the `index` will _always_ be `0`.

For example, search the [Long Term Care Hospital dataset](https://data.cms.gov/provider-data/dataset/5zdx-ny2x) with:

```r
"https://data.cms.gov/provider-data/api/1/datastore/query/5zdx-ny2x/0"
```

Distribution IDs change with every dataset update, so it is better to use APIs with the Dataset ID and the index of the distribution. If you still need the current distribution ID, you can access it through the metadata API, under `distribution -> identifier`:

```r
"https://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items/[datasetID]?show-reference-ids"
```

::: 

--------------------------------------------------------------------------------


## Endpoints

   * [Link: API Documentation](https://data.cms.gov/provider-data/docs)

### Metastore

   1. Full collection of available metastore schemas
      - __GET__ (No Parameters)

```{r}
"https://data.cms.gov/provider-data/api/1/metastore/schemas" |> 
  request() |> 
  req_perform() |> 
  resp_body_string() |> 
  jsonify::pretty_json()
```

   2. A specific schema definition, see <https://json-schema.org/>
      - __GET__ `provider-data/api/1/metastore/schemas/{schema_id}`

```{r}
"https://data.cms.gov/provider-data/api/1/metastore/schemas/data-dictionary" |> 
  request() |> 
  req_perform() |> 
  resp_body_string() |> 
  jsonify::pretty_json()
```

   3. Get all items for a specific schema (e.g., "dataset")
      - __GET__ `provider-data/api/1/metastore/schemas/{schema_id}/items`

```{r}
"https://data.cms.gov/provider-data/api/1/metastore/schemas/data-dictionary" |> 
  request() |> 
  req_perform() |> 
  resp_body_string() |> 
  jsonify::pretty_json()
```

### Metastore: dataset

   4. Get a single dataset.
      - __GET__ `provider-data/api/1/metastore/schemas/dataset/items/{identifier}`

```{r}
"https://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items/clinical_depression?show-reference-ids=true" |> 
  request() |> 
  req_perform() |> 
  resp_body_string() |> 
  jsonify::pretty_json()
```

### Datastore: import

   5. Datastore statistics: Returns the numbers of rows and columns, and a list of columns headers from the datastore
      - __GET__ `provider-data/api/1/datastore/imports/{identifier}`

```{r}
"https://data.cms.gov/provider-data/api/1/datastore/imports/e7fce918-0873-519f-80ae-818e386299d1" |> 
  request() |> 
  req_perform() |> 
  resp_body_string() |> 
  jsonify::pretty_json()
```

### Datastore: query

   6. Query one or more datastore resources
      - __POST__ No Parameters

```{r}
request("https://data.cms.gov/provider-data/api/1/datastore/query/f93da3a3-400b-5efe-960d-c1d72b1d4f65") |> 
  req_method("POST") |> 
  req_headers(Accept = "application/json", 
              `Content-Type` = "application/json") |> 
  req_body_json(
    list(limit = 1, 
         `conditions[0][property]` = "record_number",
         `conditions[0][value]`    = 1,
         `conditions[0][operator]` = ">")) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)
```

   7. Simple __GET__ equivalent of a __POST__ query. Note that parameters containing arrays or objects are not yet supported by __SwaggerUI.__ For conditions, sorts, and other complex parameters, write your query in `JSON` and then convert to a nested query string. See [this web tool](https://www.convertonline.io/convert/json-to-query-string) for an example.

```{r}
request("https://data.cms.gov/provider-data/api/1/datastore/query/f93da3a3-400b-5efe-960d-c1d72b1d4f65") |>
  req_url_query(
    limit = 1,
    offset = 10,
    count = "true",
    results = "true",
    schema = "true",
    keys = "true",
    format = "json",
    rowIds = "false",
    `conditions[0][property]` = "record_number",
    `conditions[0][value]`    = 1,
    `conditions[0][operator]` = ">") |> 
  req_perform() |> 
  resp_body_string() |> 
  jsonify::pretty_json()
```


### Datastore: SQL Query

### Search

### Schemas
