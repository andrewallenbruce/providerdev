---
title: "Pagination + Offset"
editor_options: 
   chunk_output_type: console
---

```{r}
#| label: setup-common-01
#| include: false
source("includes/_common.R")
```

## Pagination Example 1

```{r}
base <- request("https://data.cms.gov/data-api/v1/dataset") |> 
  req_url_path_append("9887a515-7552-4693-bf58-735c77af46d7") |> 
  req_url_path_append("data")

base

stats <- base |> 
  req_url_path_append("stats")

stats

stats <- stats |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

stats |> purse()

# Offset shouldn't go to 50000
offset_sequence(stats$found_rows, 5000)

urls <- glue::glue(
  "{base$url}",
  "?size=5000&",
  "offset=",
  "{offset_sequence(stats$found_rows, 5000)}"
)

resp <- urls[1:3] |> 
  map(
    function(x) {
      request(x) |> 
        req_perform() |> 
        resp_body_json(simplifyVector = TRUE) |> 
        tibble()
    }) |> 
  list_rbind(names_to = "reqID") |> 
  janitor::clean_names()

resp |> 
  janitor::get_dupes()

dupes <- resp |> 
  count(npi, sort = TRUE) |> 
  filter(n > 1) |> 
  pull(npi)

resp |> 
  filter(npi %in% dupes) |> 
  arrange(npi)

resp |> 
  filter(npi %in% c("1225232226", "1740295518", "1326103029")) |> 
  relocate(last_updated) |> 
  arrange(npi)
```

## Pagination Example 2

Select Dataset

```{r}
distribution <- read_json_arrow(
  file = "https://data.cms.gov/data.json",
  col_select = c("dataset"),
  as_data_frame = TRUE) |> 
  to_duckdb() |> 
  pull(dataset) |> 
  pluck(1) |> 
  select(distribution) |> 
  as_tibble() |> 
  unnest(distribution) |> 
  rename_with(remove_at_symbol) |> 
  filter(format      == "API", 
         description == "latest") |> 
  handle_na()

distribution |> 
  filter(grepl("Enrollment", title)) |> 
  pull(title)

accessURL <- distribution |> 
  filter(grepl("Opt Out Affidavits : ", title)) |> 
  pull(accessURL)

accessURL
```

Format Query

```{r}
query <- glue::glue(
  'c(
    "filter[{FID}][path]"  = "{PATH}",
    "filter[{FID}][value]" = "{VALUE}"
  )', 
  FID = 1, 
  PATH = "State Code", 
  VALUE = "CA")

query

query <- query |> 
  rlang::parse_expr() |> 
  rlang::eval_bare()

query
```


```{r}
queryurl <- accessURL |> 
  request() |> 
  req_url_query(size = 5000, !!!query)

nresults <- queryurl |> 
  req_url_path_append("stats") |> 
  req_perform() |> 
  resp_body_json() |> 
  gelm("found")

nresults

url_parse(queryurl$url)

# Offset Shouldn't go to 10000
off <- offset_sequence(nresults, 5000)

off <- off[-3]

reqs <- map(
  glue::glue(
    "{url}", 
    "&offset={off}", 
    url = queryurl$url, 
    off = ), 
  httr2::request)

res <- req_perform_parallel(reqs) |> resps_successes()

results <- map(res, \(x) tibble(resp_body_json(x, simplifyVector = TRUE))) |> 
  bind_rows()

results
```

