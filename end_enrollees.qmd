---
title: "`enrollees()`"
editor_options: 
   chunk_output_type: console
---

```{r setup}
#| echo: false
#| message: false
#| warning: false
source("_common.R")

htmltools::tagList(
  btn_link(
    "https://andrewallenbruce.github.io/provider/reference/providers.html",
    "Documentation"),
  btn_link(
    "https://github.com/andrewallenbruce/provider/blob/main/R/providers.R", 
    "Source"))
```

   * Base URL: `https://data.cms.gov/data-api/v1/`
   * Identifier: `2457ea29-fc82-48b0-86ec-3b0755de7515`

## Catalog

```{r}
#| label: public_catalog
public_catalog <- \() {
  
  x <- RcppSimdJson::fload("https://data.cms.gov/data.json")
  
  collapse::qTBL(x[["dataset"]]) |>
    collapse::fmutate(
      bureauCode   = delist(bureauCode),
      language     = delist(language),
      programCode  = delist(programCode),
      references   = delist(references),
      theme        = flatten_column(theme),
      keyword      = flatten_column(keyword)) |>
    collapse::frename(remove_at_symbol)
}

public <- public_catalog()

public
```

## Dataset

```{r}
#| label: provider_dataset
dataset <- \(catalog, search) {
  collapse::fsubset(
    catalog, 
    providertwo::sf_detect(
      title, 
      search
      )
    )
}

ffs <- dataset(public, "Fee-For-Service")

ffs |> purse()
```


## Distribution

```{r}
#| label: provider_distribution
distribution <- \(dataset, search) {
  
  x <- collapse::fsubset(
    dataset[c("title", "distribution")], 
    providertwo::sf_detect(title, search))
  
  collapse::qTBL(x[["distribution"]][[1]])
}

distribution(ffs, "Fee-For-Service")
```


```{r}
#| label: provider_latest
collapse::fsubset(
    distribution(ffs, "Fee-For-Service"), 
    description %==% "latest") |> 
  purse()
```


```{r}
#| label: provider_api
collapse::fsubset(
    distribution(ffs, "Fee-For-Service"), 
    format %==% "API") |> 
  purse()
```


```{r}
#| label: provider_csv
collapse::fsubset(
    distribution(ffs, "Fee-For-Service"), 
    mediaType %==% "text/csv") |> 
  purse()
```

## URLS

```{r}
#| label: urls
#| eval: false
list(
  dataset = provider_dataset, 
  latest = provider_latest,
  api = provider_api,
  csv = provider_csv
  )
```


## No. of Results

```{r}
#| eval: false
request(urls$base) |> 
  req_url_path_append(urls$identifier) |> 
  req_url_path_append("stats") |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)
```

```{r}
#| eval: false
query <- glue::glue(
  '
  "filter[fID{fID}][path]" = "{PATH}",
  "filter[fID{fID}][operator]" = "{OPERATOR}",
  "filter[fID{fID}][value]" = "{VALUE}"
  ', 
  fID = 1:2, 
  PATH = c("STATE_CD", "LAST_NAME"), 
  OPERATOR = "=",
  VALUE = c("GA", "SMITH")
  ) |> 
  glue::glue_collapse(sep = ",\n")

query <- glue::glue('c({query})') |> 
  rlang::parse_expr() |> 
  rlang::eval_bare()

request(urls$base) |> 
  req_url_path_append(urls$identifier) |> 
  req_url_path_append("stats") |> 
  req_url_query(!!!query) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)
```

```{r}
#| eval: false
resp <- request(urls$base) |> 
  req_url_path_append(urls$identifier) |> 
  req_url_query(!!!query, size = 5000) |> 
  req_perform()

resp <- RcppSimdJson::fparse(httr2::resp_body_string(resp))

collapse::qTBL(resp[["data"]]) |>
  setNames(c("NPI", "PECOS_ASCT_CNTL_ID", "ENRLMT_ID", 
             "PROVIDER_TYPE_CD", "PROVIDER_TYPE_DESC", 
             "STATE_CD", "FIRST_NAME", "MDL_NAME", 
             "LAST_NAME", "ORG_NAME", "GNDR_SW"))
```


```{r}
#| eval: false
format_syntax <- \(name, value) {
  setNames(
    value, 
    paste0(
      name, 
      "[id-", 
      seq_along(value), 
      "][condition][value]"))
}

format_syntax("filter", c("GA", "NY"))


# query_syntax <- c(
#   "filter[STATE_CD]" = "GA",
#   "filter[LAST_NAME]" = "SMITH"
#   )
```

--------------------------------------------------------------------------------
