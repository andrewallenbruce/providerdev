# `enrollees` {#sec-enrollees}

```{r}
#| label: setup-common-01
#| include: false
source("includes/_common.R")

# htmltools::tagList(
#   btn_link(
#     "https://andrewallenbruce.github.io/provider/reference/providers.html",
#     "Documentation"),
#   btn_link(
#     "https://github.com/andrewallenbruce/provider/blob/main/R/providers.R", 
#     "Source"))
```

   * Base URL: `https://data.cms.gov/data-api/v1/`
   * Identifier: `2457ea29-fc82-48b0-86ec-3b0755de7515`

```{r}
abort_no_results <- function(x) {
  rlang::abort(
    message = c("!" = glue::glue("{x} results found.")),
    use_cli_format = TRUE,
    class = "abort_no_results"
  )
}
```


```{r}
perform_request <- \(request, query, limit) {
  
  req <- req_url_query(
    request, 
    !!!format_query(query), 
    size = limit)
  
  n <- req_url_path_append(req, "stats") |>
    req_perform() |>
    resp_body_json(simplifyVector = TRUE) |>
    getelem("found_rows")
  
  if (n == 0) {
    abort_no_results(n)
    }
  
  off_len <- length(offset_sequence(n = n, limit = limit))
  
  if (off_len == 1) {
    return(
      fparse(resp_body_string(req_perform(req))) |> 
      _[["data"]] |> 
      qTBL() |> 
      set_names(names(query)) |>
    providertwo:::map_na_if()
    )
  }
  
  if (off_len > 1) {
    return(
      req_perform_iterative(
      req,
      next_req = iterate_with_offset(
        param_name = "offset",
        start  = 0,
        offset = limit,
        resp_complete = providertwo:::is_complete_with_limit(limit))) |> 
      map(\(x) fparse(resp_body_string(x)) |> _[["data"]] |> qTBL()) |>
      rowbind() |>
    set_names(names(query)) |>
    providertwo:::map_na_if()
    )
  }
}
```

```{r}
enrollees2 <- function(npi       = NULL,
                       pac       = NULL,
                       enid      = NULL,
                       spec_code = NULL,
                       spec_desc = NULL,
                       first     = NULL,
                       middle    = NULL,
                       last      = NULL,
                       org       = NULL,
                       state     = NULL,
                       gender    = NULL,
                       limit     = 5000) {

  providertwo:::check_number_whole(limit, min = 0)

  args <- list2(
    "NPI"                = npi,
    "PECOS_ASCT_CNTL_ID" = pac,
    "ENRLMT_ID"          = enid,
    "PROVIDER_TYPE_CD"   = spec_code,
    "PROVIDER_TYPE_DESC" = spec_desc,
    "STATE_CD"           = state,
    "FIRST_NAME"         = first,
    "MDL_NAME"           = middle,
    "LAST_NAME"          = last,
    "ORG_NAME"           = org,
    "GNDR_SW"            = gender)

  api <- public_Dataset("Public Provider Enrollment")
  
  perform_request(
    request = api@identifier@request, 
    query   = args, 
    limit   = limit)
}
```


```{r}
#| error: true
enrollees2(enid = "I2004030900022")
enrollees2(npi = "1417918293", spec_code = "14-41")
enrollees2(pac = "2860305554", gender = "9")
enrollees2(state = "GA", gender = "9")
enrollees2(state = "GA", gender = "F")
```


## Catalog

```{r}
#| label: public_catalog
public_catalog <- \() {
  
  x <- RcppSimdJson::fload("https://data.cms.gov/data.json")
  
  collapse::qTBL(x[["dataset"]]) |>
    collapse::fmutate(
      bureauCode   = delist(bureauCode),
      language     = delist(language),
      programCode  = delist(programCode),
      references   = delist(references),
      theme        = flatten_column(theme),
      keyword      = flatten_column(keyword)) |>
    collapse::frename(remove_at_symbol)
}

public <- public_catalog()

public
```

## Dataset

```{r}
#| label: provider_dataset
dataset <- \(catalog, search) {
  collapse::fsubset(
    catalog, 
    providertwo::sf_detect(
      title, 
      search
      )
    )
}

ffs <- dataset(public, "Fee-For-Service")

ffs |> purse()
```


## Distribution

```{r}
#| label: provider_distribution
distribution <- \(dataset, search) {
  
  x <- collapse::fsubset(
    dataset[c("title", "distribution")], 
    providertwo::sf_detect(title, search))
  
  collapse::qTBL(x[["distribution"]][[1]])
}

distribution(ffs, "Fee-For-Service")
```


```{r}
#| label: provider_latest
collapse::fsubset(
    distribution(ffs, "Fee-For-Service"), 
    description %==% "latest") |> 
  purse()
```


```{r}
#| label: provider_api
collapse::fsubset(
    distribution(ffs, "Fee-For-Service"), 
    format %==% "API") |> 
  purse()
```


```{r}
#| label: provider_csv
collapse::fsubset(
    distribution(ffs, "Fee-For-Service"), 
    mediaType %==% "text/csv") |> 
  purse()
```

## URLS

```{r}
#| label: urls
#| eval: false
list(
  dataset = provider_dataset, 
  latest = provider_latest,
  api = provider_api,
  csv = provider_csv
  )
```


## No. of Results

```{r}
#| eval: false
request(urls$base) |> 
  req_url_path_append(urls$identifier) |> 
  req_url_path_append("stats") |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)
```

```{r}
#| eval: false
query <- glue::glue(
  '
  "filter[fID{fID}][path]" = "{PATH}",
  "filter[fID{fID}][operator]" = "{OPERATOR}",
  "filter[fID{fID}][value]" = "{VALUE}"
  ', 
  fID = 1:2, 
  PATH = c("STATE_CD", "LAST_NAME"), 
  OPERATOR = "=",
  VALUE = c("GA", "SMITH")
  ) |> 
  glue::glue_collapse(sep = ",\n")

query <- glue::glue('c({query})') |> 
  rlang::parse_expr() |> 
  rlang::eval_bare()

request(urls$base) |> 
  req_url_path_append(urls$identifier) |> 
  req_url_path_append("stats") |> 
  req_url_query(!!!query) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)
```

```{r}
#| eval: false
resp <- request(urls$base) |> 
  req_url_path_append(urls$identifier) |> 
  req_url_query(!!!query, size = 5000) |> 
  req_perform()

resp <- RcppSimdJson::fparse(httr2::resp_body_string(resp))

collapse::qTBL(resp[["data"]]) |>
  setNames(c("NPI", "PECOS_ASCT_CNTL_ID", "ENRLMT_ID", 
             "PROVIDER_TYPE_CD", "PROVIDER_TYPE_DESC", 
             "STATE_CD", "FIRST_NAME", "MDL_NAME", 
             "LAST_NAME", "ORG_NAME", "GNDR_SW"))
```


```{r}
#| eval: false
format_syntax <- \(name, value) {
  setNames(
    value, 
    paste0(
      name, 
      "[id-", 
      seq_along(value), 
      "][condition][value]"))
}

format_syntax("filter", c("GA", "NY"))


# query_syntax <- c(
#   "filter[STATE_CD]" = "GA",
#   "filter[LAST_NAME]" = "SMITH"
#   )
```

--------------------------------------------------------------------------------
