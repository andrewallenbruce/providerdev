---
output: html_document
editor_options: 
  chunk_output_type: console
---
# Medicaid {#sec-mcdapi}

```{r}
#| label: setup-common-01
#| include: false
source("includes/_common.R")
```

## Links

   * [Medicaid.gov API](https://data.medicaid.gov/about/api)
   * Limit: `8000L`

## Load Catalog

```{r}
join_title <- \(a, b) join(x = a, y = b, on = "title", verbose = 0)

make_join_col <- \(x, col) {
  na_if(flatten_column(map(x[[ensym(col)]], \(x) get_elem(as.list(x), "data"))), "")
}

dict_title <- \(x) {
  perform_simple(request(x)) |>
    _[["data"]] |>
    _[["title"]]
}
```


```{r}
#| label: mcd_catalog
catalog_mcd <- function() {

  x <- fload("https://data.medicaid.gov/api/1/metastore/schemas/dataset/items?show-reference-ids")
    
  x <- x |>
    as_tbl() |>
    mtt(
      modified    = as_date(modified),
      issued      = as_date(issued),
      periodicity = recode_iso8601(accrualPeriodicity),
      contact     = reduce_contact(x$contactPoint)
    ) |>
    slt(
      title,
      identifier,
      description,
      periodicity,
      issued,
      modified,
      contact,
      theme,
      keyword,
      distribution,
      temporal,
      references
    )
  
  groups <- new_df(title = x$title, group = make_join_col(x, theme)) |>
    sbt(not_na(group) & group != "Uncategorized")
  
  keys <- new_df(title = x$title, keyword = make_join_col(x, keyword))
  
  refs <- new_df(title = x$title,
                 references = na_if(flatten_column(x$references), "NA")) |> 
  sbt(not_na(references) & stri_detect_regex(references, "^https://www.mathematica.org/", negate = TRUE)) |> 
  mtt(references = stri_replace_all_fixed(references, ", https://www.mathematica.org/", ""))
  
  d <- rowbind(x$distribution, fill = TRUE)
  
  tvec <- vctrs::vec_rep_each(x$title, fnobs(get_elem(x$distribution, "data", DF.as.list = TRUE)))
  
  download <- new_tbl(title = tvec, download = delist(get_elem(d$data, "downloadURL"))) |> fcount(title, add = TRUE)
  
  list(
    sets       = reduce(list(slt(x, -theme, -keyword, -references, -distribution), groups, keys, refs, sbt(download, N == 1, -N)), join_title),
    download   = funique(sbt(download, N > 1), cols = "download"),
    dictionary = new_tbl(url = funique(delist(get_elem(d$data, "describedBy")))) |> 
      mtt(identifier = stringi::stri_extract(url,
      regex = "(?:[0-9a-fA-F]){8}-?(?:[0-9a-fA-F]){4}-?(?:[0-9a-fA-F]){4}-?(?:[0-9a-fA-F]){4}-?(?:[0-9a-fA-F]){12}")) |> 
      mtt(title = map_chr(url, \(x) dict_title(x))) |> 
      colorder(title, identifier)
  )
}

x <- catalog_mcd()

x
```

```{r}
mcd_url <- function(uuid) {
  paste0("https://data.medicaid.gov/api/1/datastore/query/", uuid, "/0")
}

mcd_dims <- function(uuid) {

  x <- uuid |>
    mcd_url() |>
    request() |>
    req_url_query(
      schema  = "false",
      keys    = "false",
      results = "true",
      count   = "true",
      format  = "json",
      rowIds  = "false",
      limit   = 1,
      offset  = 0
    ) |>
    perform_simple()

  list_tidy(
    rows   = x$count,
    fields = x$query$properties,
    pages  = offset_length(rows, 8000L))

}

identifier <- sbt(x$sets, title == "State Drug Utilization Data 2020") |> _[["identifier"]]

mcd_dims(identifier)

mcd_url(identifier) |> 
  request() |> 
  req_url_query(
    limit = 10,
    offset = 0,
    count = "true",
    results = "true",
    schema = "false",
    keys = "true",
    format = "json",
    rowIds = "false"
  ) |> 
  perform_simple() |> 
  _[["results"]] |> 
  map_na_if() |> 
  as_tbl() |> 
  purse()
```

```{r}
ex <- x$dictionary$url[[1]] |> 
  request() |> 
  perform_simple() |> 
  _[["data"]]


new_tbl(
  fields = ex$fields$name,
  description = gsub("\r\n", " ", ex$fields$description)) |> 
  map_na_if()
```

```{r}
utils::formatOL(
  x$dictionary$title
) |> 
  writeLines()
```

```{r}
utils::formatOL(
  x$sets$title
) |> 
  writeLines()
```

