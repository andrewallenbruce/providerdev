# Provider {#sec-providerapi}

```{r}
#| label: setup-common-01
#| include: false
source("includes/_common.R")
```

## Links

   * [Provider API Docs](https://data.cms.gov/provider-data/docs)
   * [Dataset Search](https://data.cms.gov/provider-data/search)


The **Provider Data Catalog API** provides access to official CMS data used on the **Medicare Care Compare** website and directories.

   * [Home](https://data.cms.gov/provider-data/)
   * [About](https://data.cms.gov/provider-data/about)

### Doctors and Clinicians Datasets

```{r}
#| label: doctors_and_clinicians
#| echo: false
provider_data() |> 
  filter(sf_detect(theme, "Doctors")) |> 
  reframe(
    id = row_number(),
    title,
    keyword,
    description,
    dates = issued,
    modified,
    released) |>
  arrange(id, title) |>
  gt() |>
  tab_header(title    = md("CMS **Provider Catalog**: Doctors and Clinicians")) |> 
  opt_all_caps() |>
  opt_table_font(font = google_font(name = "Rubik")) |>
  cols_align("center", c(id, title)) |> 
  fmt_date(columns    = c(dates, released)) |>
  tab_style(style     = css(position = "sticky", top = "-1em", `z-index` = 10), 
            locations = cells_column_labels()) |>
  tab_style(style     = cell_text(weight = "lighter", size = "small"),
            locations = cells_body(
              columns = c(keyword, description, dates, modified, released))) |>
  tab_style(style     = cell_text(weight = "bold", size = "small"),
            locations = cells_body(columns = title)) |>
  cols_merge(
    columns  = c(dates, modified, released), 
    pattern  = "<b>ISSUED</b>: {1} <br><br> <b>MODIFIED</b>: {2} <br><br> <b>RELEASED</b>: {3}") |>
  cols_merge(
    columns  = c(description, keyword), 
    pattern  = "<b>DESCRIPTION</b>: {1} <br><br> <b>KEYWORDS</b>: {2}") |>
  tab_options(container.height                  = px(900),
              quarto.disable_processing         = TRUE,
              column_labels.border.bottom.style = "hidden",
              column_labels.padding.horizontal  = px(20),
              column_labels.background.color    = "#555555",
              heading.align                     = "left",
              heading.border.bottom.color       = "#555555",
              heading.title.font.weight         = "bold",
              heading.background.color          = "black",
              table.border.top.color            = "#555555",
              table.border.top.style            = "hidden")
```


### Provider Catalog

A comprehensive list of all datasets available from the `metastore/schemas` endpoint:

```{r}
#| label: Catalog_provider
#| echo: false
# Catalog_provider() |>
provider_data() |> 
  filter(sf_ndetect(theme, "Doctors")) |> 
  reframe(
    id = row_number(),
    title,
    theme,
    keyword,
    description,
    dates = issued,
    modified,
    released) |>
  arrange(id, title) |>
  gt(groupname_col = "theme",
     row_group_as_column = TRUE) |>
  tab_header(title    = md("CMS **Provider Catalog**: Available Datasets")) |> 
  opt_all_caps() |>
  opt_table_font(font = google_font(name = "Rubik")) |>
  cols_align("center", c(id, title)) |> 
  fmt_date(columns    = c(dates, released)) |>
  tab_style(style     = css(position = "sticky", top = "-1em", `z-index` = 10), 
            locations = cells_column_labels()) |>
  tab_style(style     = cell_text(weight = "lighter", size = "small"),
            locations = cells_body(
              columns = c(keyword, theme, description, dates, modified, released))) |>
  tab_style(style     = cell_text(weight = "bold", size = "small"),
            locations = cells_body(columns = title)) |>
  cols_merge(
    columns  = c(dates, modified, released), 
    pattern  = "<b>ISSUED</b>: {1} <br><br> <b>MODIFIED</b>: {2} <br><br> <b>RELEASED</b>: {3}") |>
  cols_merge(
    columns  = c(description, keyword), 
    pattern  = "<b>DESCRIPTION</b>: {1} <br><br> <b>KEYWORDS</b>: {2}") |>
  tab_options(container.height                  = px(900),
              quarto.disable_processing         = TRUE,
              column_labels.border.bottom.style = "hidden",
              column_labels.padding.horizontal  = px(20),
              column_labels.background.color    = "#555555",
              heading.align                     = "left",
              heading.border.bottom.color       = "#555555",
              heading.title.font.weight         = "bold",
              heading.background.color          = "black",
              table.border.top.color            = "#555555",
              table.border.top.style            = "hidden")
```

### Rate Limit

The API is currently limited to a maximum of **`2000`** per request. The following example uses the __Doctors and Clinicians National Downloadable File__ dataset

   1. Fetch the first `2000` results:

```{r}
#| label: ndf_0
ndf_0 <- httr2::url_parse(
  base_url = "https://data.cms.gov/provider-data/", 
  url      = "api/1/datastore/query/mj5m-pzi6/0") |> 
  url_modify_query(
    offset = 0, 
    limit  = 2000) |> 
  httr2::url_build() |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

ndf_0$count

length(offset_sequence(ndf_0$count, 2000))

ndf_0$query$resources$id

ndf_0$query$properties

ndf_0$results |> 
  tibble() |> 
  head() |> 
  purse()
```

   2. Fetch the _next_ `2000` results. Continue incrementing the `offset` by `2000` for each subsequent call:

```{r}
#| label: ndf_1
ndf_1 <- httr2::url_parse(
  base_url = "https://data.cms.gov/provider-data/", 
  url      = "api/1/datastore/query/mj5m-pzi6/0") |> 
  url_modify_query(
    offset = 2001, 
    limit  = 2000) |> 
  httr2::url_build() |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

ndf_1$results |> 
  tibble() |> 
  head() |> 
  purse()
```

When retrieving large datasets, consider pacing your requests to avoid overwhelming your system with data and to allow for graceful error handling. Depending on the volume of data and your application's capabilities, consider implementing a back-off strategy if errors occur.

### Ratings

CMS's **Five-Star Quality Rating System** is designed to help users compare the overall quality of care across different healthcare providers. Access these ratings by referring to the associated column names:

   * __Nursing Home__: `overall_rating`
   * __Hospitals__: `hospital_overall_rating`
   * __Dialysis__: `five_star`
   * __Hospice__: `star_rating`
   * __Home Health__: `quality_of_patient_care_star_rating`

For example, the query for the first 2000 [**Nursing Home**](https://data.cms.gov/provider-data/dataset/4pq5-n9py) facilities with _less than_ a 5-star overall rating is:

```{r}
#| label: nh_0
nh_0 <- httr2::url_parse(
  base_url = "https://data.cms.gov/provider-data/", 
  url      = "api/1/datastore/query/4pq5-n9py/0") |> 
  url_modify_query(
    `conditions[0][property]` = "overall_rating",
    `conditions[0][value]`    = 5,
    `conditions[0][operator]` = "<",
    offset                    = 0, 
    limit                     = 2000) |> 
  httr2::url_build() |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

nh_0$count

length(offset_sequence(nh_0$count, 2000))

nh_0$query$resources$id

nh_0$results |> 
  tibble() |> 
  head() |> 
  purse()

nh_0$results |> 
  count(overall_rating, 
        sort = TRUE)
```

The query for the second 2000 is:

```{r}
#| label: nh_1
nh_1 <- httr2::url_parse(
  base_url = "https://data.cms.gov/provider-data/", 
  url      = "api/1/datastore/query/4pq5-n9py/0") |> 
  url_modify_query(
    `conditions[0][property]` = "overall_rating",
    `conditions[0][value]`    = 5,
    `conditions[0][operator]` = "<",
    offset                    = 2001, 
    limit                     = 2000) |> 
  httr2::url_build() |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

nh_1$results |> 
  tibble() |> 
  head() |> 
  purse()

nh_1$results |> 
  count(overall_rating, 
        sort = TRUE)
```


### Specific Conditions

Use the __Datastore Query Endpoint__ (`datastore/query/{datasetID}/{index}`). It takes two arguments: the __`datasetID`__, which does not change between data refreshes, and the distribution's __`index`__, which will _always_ be `0`.

For example, to return the first 500 results of a dataset with an overall rating of 5:

```{r}
#| label: first_500
first_500 <- httr2::url_parse(
  base_url = "https://data.cms.gov/provider-data/", 
  url      = "api/1/datastore/query/4pq5-n9py/0") |> 
  url_modify_query(
    `conditions[0][property]` = "total_amount_of_fines_in_dollars",
    `conditions[0][value]`    = "23989.00",
    `conditions[0][operator]` = "<>",
    offset                    = 0, 
    limit                     = 500) |> 
  httr2::url_build() |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

first_500$count

first_500$results |> 
  tibble() |> 
  head() |> 
  purse()

first_500$results |> 
  count(total_amount_of_fines_in_dollars, 
        sort = TRUE) |> 
  filter(n > 1)
```

More complex queries can be created in JSON and converted to an HTTP query string using the [JSON Query to String](https://www.convertonline.io/convert/json-to-query-string) tool. 

For example, to return the `cms_certification_number_ccn` and `overall_rating` columns with a rating greater than 3, use the following JSON:

```{.json}
{
    "properties": [
        "cms_certification_number_ccn",
        "overall_rating"
    ],
    "conditions": [
        {
            "property":"overall_rating",
            "value": "3",
            "operator": ">"
        }
    ]
}
```

This converts to a query string of:

```{r}
#| label: ccn_rating
ccnr3 <- httr2::url_parse(
  base_url = "https://data.cms.gov/provider-data/", 
  url      = "api/1/datastore/query/4pq5-n9py/0") |> 
  url_modify_query(
    `properties[]`            = "state",
    `properties[]`            = "overall_rating",
    `conditions[0][property]` = "overall_rating",
    `conditions[0][value]`    = 3,
    `conditions[0][operator]` = ">",
    offset                    = 0, 
    limit                     = 2000) |> 
  httr2::url_build() |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

ccnr3$results |> tibble()

ccnr3$results |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na() |> 
  count(state, overall_rating, sort = TRUE)
```

### Search

#### `theme`

Return a list of all public datasets for a particular __Topic__ area via the `/api/1/search` endpoint. For example, to get a list of all datasets in the `Home health services` Topic, you could use:

```{r}
#| label: search_theme
theme <- httr2::url_parse(
  base_url = "https://data.cms.gov/provider-data/",
  url      = "api/1/search?") |> 
  url_modify_query(
    `page-size` = 100,
    theme       = "Home health services") |> 
  httr2::url_build() |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

theme$total

theme$facets |> 
  filter(total > 1)

names(theme$results)
```

> __Note__: If the `page-size` is not provided, the default result limit is 10.

#### `keyword`

One of the easiest ways to generate your search parameters is to use the Provider Data Catalog [search page](https://data.cms.gov/provider-data/search) and then copy the query string to the end of the search endpoint. For example, if you filter by _"Dialysis facilities"_ tagged with _"Linking Quality to Payment"_ and select 25 results per page, the query string produced is:

```{r}
#| label: search_keyword
#| eval: false
x <- request(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "search?",
    "keyword=Linking%20Quality%20to%20Payment&",
    "page-size=25&",
    "theme=Dialysis%20facilities"
    )
  ) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

x$facets |> 
  tibble() |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na()

x$results
```

#### `fulltext`

Use the same method to return a list of datasets that contain a keyword (like "ratings") in their title and/or description:

```{r}
#| label: search_fulltext
#| eval: false
x <- request(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "search?",
    "fulltext=ratings"
    )
  ) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

x$facets |> 
  tibble() |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na()

x$results
```


## Differences

::: {#nte-differences .callout-note collapse="false"}

#### __Datastore__ vs. __Metastore__

   * __Datastore__
      * Data from the data files (CSVs)
   * __Metastore__
      * Metadata from the `data.json` file 
      * `title`, `last_updated`, `release_date`, `keywords`, etc.

> Think of the __Metastore__ as the library index that helps you find the right book (`dataset`), and the __Datastore__ as the book itself.


#### __Distribution__ vs. __Dataset__

   * __Distribution__
      * Unique identifier of the __Datastore__ 
      * _Changes with every data refresh_
      * Specific to a particular CSV data import
   * __Dataset__
      * Unique identifier of the __Dataset__ 
      * _Does not change between data refreshes_
      * Comes from the `data.json` file
      * Appears as part of the URL in the PDC site

--------------------------------------------------------------------------------

> If you have been using the `datastore/sql` or `datastore/query/{distributionId}` endpoints, consider switching to the __`datastore/query/{datasetID}/{index}`__ endpoint instead. 

The `datasetID` does not change between refreshes, and, currently, all **Provider Data Catalog** datasets only have a single resource, so the `index` will _always_ be `0`.

For example, search the [Long Term Care Hospital dataset](https://data.cms.gov/provider-data/dataset/5zdx-ny2x) with:

```r
"https://data.cms.gov/provider-data/api/1/datastore/query/5zdx-ny2x/0"
```

Distribution IDs change with every dataset update, so it is better to use APIs with the Dataset ID and the index of the distribution. If you still need the current distribution ID, you can access it through the metadata API, under `distribution -> identifier`:

```r
"https://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items/[datasetID]?show-reference-ids"
```

::: 

--------------------------------------------------------------------------------


## Endpoints

   * [Link: API Documentation](https://data.cms.gov/provider-data/docs)

### Metastore

   1. Full collection of available metastore schemas
      - __GET__ (No Parameters)

```{r}
#| label: metastore_schemas
#| eval: false
"https://data.cms.gov/provider-data/api/1/metastore/schemas" |> 
  request() |> 
  req_perform() |> 
  resp_body_string() |> 
  jsonify::pretty_json()
```

   2. A specific schema definition, see <https://json-schema.org/>
      - __GET__ `provider-data/api/1/metastore/schemas/{schema_id}`

```{r}
#| label: metastore_schema
#| eval: false
"https://data.cms.gov/provider-data/api/1/metastore/schemas/data-dictionary" |> 
  request() |> 
  req_perform() |> 
  resp_body_string() |> 
  jsonify::pretty_json()
```

   3. Get all items for a specific schema (e.g., "dataset")
      - __GET__ `provider-data/api/1/metastore/schemas/{schema_id}/items`

```{r}
#| label: metastore_schemaspecific
#| eval: false
"https://data.cms.gov/provider-data/api/1/metastore/schemas/data-dictionary" |> 
  request() |> 
  req_perform() |> 
  resp_body_string() |> 
  jsonify::pretty_json()
```

### Metastore: dataset

   4. Get a single dataset.
      - __GET__ `provider-data/api/1/metastore/schemas/dataset/items/{identifier}`

```{r}
#| label: metastore_dataset
"https://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items/clinical_depression?show-reference-ids=true" |> 
  request() |> 
  req_perform() |> 
  resp_body_string() |> 
  jsonify::pretty_json()
```

### Datastore: import

   5. Datastore statistics: Returns the numbers of rows and columns, and a list of columns headers from the datastore
      - __GET__ `provider-data/api/1/datastore/imports/{identifier}`

```{r}
#| label: datastore_import
ds_import <- "https://data.cms.gov/provider-data/api/1/datastore/imports/e7fce918-0873-519f-80ae-818e386299d1" |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

ds_import$numOfColumns
ds_import$numOfRows
```

### Datastore: query

   6. Query one or more datastore resources
      - __POST__ No Parameters

```{r}
#| label: datastore_post
#| eval: false
ds_post <- request(
  "https://data.cms.gov/provider-data/api/1/datastore/query/f93da3a3-400b-5efe-960d-c1d72b1d4f65") |> 
  req_method("POST") |> 
  req_headers(Accept = "application/json", 
              `Content-Type` = "application/json") |> 
  req_body_json(
    list(
      limit = 1,
      state = "GA")) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

ds_post$count
ds_post$results |> purse()
```

   7. Simple __GET__ equivalent of a __POST__ query. Note that parameters containing arrays or objects are not yet supported by __SwaggerUI.__ For conditions, sorts, and other complex parameters, write your query in `JSON` and then convert to a nested query string. See [this web tool](https://www.convertonline.io/convert/json-to-query-string) for an example.

```{r}
#| label: datastore_post_get
#| eval: false
request("https://data.cms.gov/provider-data/api/1/datastore/query/f93da3a3-400b-5efe-960d-c1d72b1d4f65") |>
  req_url_query(
    limit                     = 1,
    offset                    = 10,
    count                     = "true",
    results                   = "true",
    schema                    = "true",
    keys                      = "true",
    format                    = "json",
    rowIds                    = "false",
    `conditions[0][property]` = "record_number",
    `conditions[0][value]`    = 1,
    `conditions[0][operator]` = ">") |> 
  req_perform() |> 
  resp_body_string() |> 
  jsonify::pretty_json()
```


### Datastore: SQL Query

### Search

### Schemas
