---
output: html_document
editor_options: 
  chunk_output_type: console
---
# Geospatial {#sec-demogeo}

```{r}
#| label: setup-common-01
#| include: false
source("includes/_common.R")

knitr::opts_chunk$set(
  collapse  = FALSE,
  echo      = TRUE, 
  message   = TRUE, 
  warning   = FALSE,
  error     = TRUE,
  comment   = "#>",
  dpi       = 600, 
  out.width = "100%"
)
options(scipen = 999)
```

```{r}
underscore <- \(x) gsub("___owner$", "", x, perl = TRUE)
char_binary <- \(x) val_match(x, "N" ~ 0L, "Y" ~ 1L)
pct_prop <- \(x) {
  cheapr::case(
    x == "0" ~ 0,
    cheapr::is_na(x) ~ NA_real_,
    .default = as.double(x) / 100
  )
}
```

## Load Packages

```{r}
#| message: false
#| warning: false
library(tidygeocoder)
library(tigris)
library(rmapshaper)
library(sf)
options(tigris_use_cache = TRUE)
```

## Rural Health Clinics

```{r}
req <- careGroup("rural_health")@groups |>
  _[["rural_health_clinic_enrollments"]] |>
  _[["endpoints"]] |>
  _[["identifier"]] |>
  request() |> 
  req_url_query(
    "filter[STATE]" = "GA"
  )

nres <- req |> 
  req_url_path_append("stats") |>
  providertwo:::perform_simple() |> 
  _[["data"]] |> 
  _[["found_rows"]]

res <- req |> 
  req_url_query(offset = 0L, size = 5000L) |> 
  req_perform() |> 
  providertwo:::resp_simple_json() |> 
  get_elem("^data$|headers", regex = TRUE)

rhc_enr <- as_tbl(res$data) |> 
  set_names(res$meta) |> 
  providertwo:::map_na_if() |> 
  roworder(`ORGANIZATION NAME`) |>
  janitor::clean_names() |>
  mtt(incorporation_date = providertwo:::as_date(incorporation_date),
      multiple_npi_flag = char_binary(multiple_npi_flag),
      address = cheapr_if_else(
        cheapr::is_na(address_line_2), 
        address_line_1, 
        paste(address_line_1, address_line_2))) |>
  slt(
    npi,
    has_mult_npi = multiple_npi_flag,
    ccn,
    pac = associate_id,
    enid = enrollment_id,
    enid_state = enrollment_state,
    org_name = organization_name,
    dba_name = doing_business_as_name,
    inc_date = incorporation_date,
    inc_state = incorporation_state,
    org_type = organization_type_structure,
    org_type_2 = organization_other_type_text,
    proprietary_nonprofit,
    address,
    city,
    state,
    zip = zip_code)


rhc_enr |> 
  purse()
```

```{r}
req <- careGroup("rural_health")@groups |>
  _[["rural_health_clinic_all_owners"]] |> 
  _[["endpoints"]] |>
  _[["identifier"]] |>
  request() |> 
  req_url_query("filter[STATE - OWNER]" = "GA")

nres <- req |> 
  req_url_path_append("stats") |>
  providertwo:::perform_simple() |> 
  _[["data"]] |> 
  _[["found_rows"]]

res <- req |> 
  req_url_query(offset = 0L, size = 5000L) |> 
  req_perform() |> 
  providertwo:::resp_simple_json() |> 
  get_elem("^data$|headers", regex = TRUE)

rhc_owner <- as_tbl(res$data) |> 
  set_names(res$meta) |> 
  providertwo:::map_na_if() |> 
  janitor::clean_names() |> 
  rnm(
    enid = enrollment_id,
    pac = associate_id_owner, 
    org_name = organization_name) |>
  mtt(
    association_date = providertwo:::as_date(association_date_owner),
    address = cheapr_if_else(cheapr::is_na(address_line_2_owner), address_line_1_owner, paste(address_line_1_owner, address_line_2_owner)),
    percentage_ownership = as.numeric(percentage_ownership),
    role_code = as.integer(role_code_owner)
  ) |>
  slt(
    pac,
    enid,
    org_name,
    pac_owner = associate_id, 
    org_name_owner = organization_name_owner,
    entity = type_owner,
    role_code,
    role_text = role_text_owner,
    association_date_owner,
    first_name_owner,
    middle_name_owner,
    last_name_owner,
    title_owner,
    dba_name = doing_business_as_name_owner,
    address,
    city_owner,
    state_owner,
    zip = zip_code_owner,
    percentage_ownership,
    is_for_acq = created_for_acquisition_owner,
    is_corp = corporation_owner,
    is_llc = llc_owner,
    is_med_prov_supp = medical_provider_supplier_owner,
    is_mgmt_serv_co = management_services_company_owner,
    is_med_staff_co = medical_staffing_company_owner,
    is_holding_co = holding_company_owner,
    is_invest_firm = investment_firm_owner,
    is_fin_inst = financial_institution_owner,
    is_consult_firm = consulting_firm_owner,
    is_for_profit = for_profit_owner,
    is_non_profit = non_profit_owner,
    is_other_type = other_type_owner,
    other_type = other_type_text_owner
  ) |> 
  mtt(
    is_for_acq = char_binary(is_for_acq),
    is_corp = char_binary(is_corp),
    is_llc = char_binary(is_llc),
    is_med_prov_supp = char_binary(is_med_prov_supp),
    is_mgmt_serv_co = char_binary(is_mgmt_serv_co),
    is_med_staff_co = char_binary(is_med_staff_co),
    is_holding_co = char_binary(is_holding_co),
    is_invest_firm = char_binary(is_invest_firm),
    is_fin_inst = char_binary(is_fin_inst),
    is_consult_firm = char_binary(is_consult_firm),
    is_for_profit = char_binary(is_for_profit),
    is_non_profit = char_binary(is_non_profit),
    is_other_type = char_binary(is_other_type)
  )

rhc_owner
```


```{r}
tictoc::tic()
rhc_nppes <- npi_nppes(npi = rhc_enr$npi)
tictoc::toc()

rhc_nppes |> 
  slt(-endpoints, -enumeration_type) |> 
  print(n = 100)

rhc_nppes |> 
  slt(number, addresses) |> 
  unnest(addresses) |> 
  mtt(address = cheapr_if_else(cheapr::is_na(address_2), address_1, paste(address_1, address_2))) |> 
  slt(-address_1, -address_2, -address_type, -country_code, -country_name)

rhc_nppes |> 
  slt(number, basic) |> 
  unnest_wider(basic)

rhc_nppes |> 
  slt(number, taxonomies) |> 
  unnest(taxonomies)

rhc_nppes |> 
  slt(number, identifiers) |> 
  unnest(identifiers) |> 
  print(n = 100)

rhc_nppes |> 
  slt(number, other_names) |> 
  unnest(other_names) |> 
  print(n = 100)

rhc_nppes |> 
  slt(number, practiceLocations) |> 
  unnest_wider(practiceLocations) |> 
  sbt(!is.na(state)) |> 
  print(n = 100)
```

## Geocode with {tidygeocoder}

```{r}
#| eval: false
geo_census <- tidygeocoder::geocode(
  rhc_enr,
  street = address,
  city    = city,
  state   = state,
  postalcode = zip,
  method = "census", 
  full_results = TRUE)

geo_census

geo_arcgis <- tidygeocoder::geocode(
  rhc_enr,
  street = address,
  city    = city,
  state   = state,
  postalcode = zip,
  method = "arcgis", 
  full_results = TRUE)

geo_arcgis
```

## Retrieve Georgia counties shapefile from {tigris}

```{r}
#| eval: false
tig_cnt <- tigris::counties(
  state = "GA",
  year = 2022,
  progress_bar = FALSE)

tig_cnt

summary(tig_cnt)

sf_cnt <- ms_simplify(tig_cnt)

sf_cnt$mid <- st_centroid(sf_cnt$geometry)
```


## Map with {ggplot}

```{r}
ggplot(sf_cnt) +
  geom_sf(
    fill = "skyblue",
    colour = "white",
    alpha = 0.5) +
  geom_sf_text(
    aes(geometry = geometry, 
        label = NAME),
    size = 3.5,
    check_overlap = TRUE) +
  geom_jitter(
    data = geo_census,
    mapping = aes(long, lat),
    fill = "yellow",
    color = "darkred",
    alpha = 0.75,
    size = 4,
    shape = 21,
    stroke = 1) +
  ggthemes::theme_fivethirtyeight()
```

