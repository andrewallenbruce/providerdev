---
output: html_document
editor_options: 
  chunk_output_type: console
---
# Geospatial {#sec-demogeo}

```{r}
#| label: setup
#| include: false
source("includes/_common.R")

knitr::opts_chunk$set(
  collapse  = FALSE,
  echo      = TRUE, 
  message   = TRUE, 
  warning   = FALSE,
  error     = TRUE,
  comment   = "",
  dpi       = 300, 
  out.width = "100%"
)
library(patchwork)
library(tidygeocoder)
library(tigris)
library(rmapshaper)
library(sf)
options(tigris_use_cache = TRUE)
```

## Rural Health Clinics

```{r}
rhc <- care_group("rhc")

res <- rhc@members$rhc_enrollments@identifier |> 
  request() |> 
  req_url_query("filter[STATE]" = "GA") |>
  req_perform() |> 
  providertwo:::resp_simple_json() |> 
  get_elem("^data$|headers", regex = TRUE)

rhc_enr <- as_tbl(res$data) |> 
  set_names(res$meta) |> 
  providertwo:::map_na_if() |> 
  roworder(`ORGANIZATION NAME`) |>
  janitor::clean_names() |>
  mtt(incorporation_date = providertwo:::as_date(incorporation_date),
      multiple_npi_flag = charbin(multiple_npi_flag),
      address = providertwo:::make_address(address_line_1, address_line_2)) |>
  slt(
    npi,
    has_mult_npi = multiple_npi_flag,
    ccn,
    pac = associate_id,
    enid = enrollment_id,
    enid_state = enrollment_state,
    org_name = organization_name,
    dba = doing_business_as_name,
    inc_date = incorporation_date,
    inc_state = incorporation_state,
    org_type = organization_type_structure,
    org_type_2 = organization_other_type_text,
    prop_non = proprietary_nonprofit,
    address,
    city,
    state,
    zip = zip_code)

rhc_enr |> 
  purse()
```

```{r}
res2 <- rhc@members$rhc_owners@identifier |> 
  request() |> 
  req_url_query("filter[STATE - OWNER]" = "GA") |>
  req_perform() |> 
  providertwo:::resp_simple_json() |> 
  get_elem("^data$|headers", regex = TRUE)

rhc_own <- as_tbl(res2$data) |> 
  set_names(res2$meta) |> 
  providertwo:::map_na_if() |> 
  janitor::clean_names() |> 
  mtt(assoc_date = providertwo:::as_date(association_date_owner),
      address = providertwo:::make_address(
        address_line_1_owner, 
        address_line_2_owner),
      pct_own = as.numeric(percentage_ownership),
      role_code = as.integer(role_code_owner)) |>
  slt(
    enid = enrollment_id, 
    pac_own = associate_id_owner, 
    org_name = organization_name,
    org_name_own = organization_name_owner,
    entity_own = type_owner,
    role_code,
    role_text = role_text_owner,
    assoc_date,
    first_own = first_name_owner,
    middle_own = middle_name_owner,
    last_own = last_name_owner,
    title_own = title_owner,
    dba_own = doing_business_as_name_owner,
    addr_own = address,
    city_own = city_owner,
    state_own = state_owner,
    zip_own = zip_code_owner,
    pct_own,
    is_for_acq = created_for_acquisition_owner,
    is_corp = corporation_owner,
    is_llc = llc_owner,
    is_med_prov_supp = medical_provider_supplier_owner,
    is_mgmt_serv_co = management_services_company_owner,
    is_med_staff_co = medical_staffing_company_owner,
    is_holding_co = holding_company_owner,
    is_invest_firm = investment_firm_owner,
    is_fin_inst = financial_institution_owner,
    is_consult_firm = consulting_firm_owner,
    is_for_profit = for_profit_owner,
    is_non_profit = non_profit_owner,
    is_other_type = other_type_owner,
    other_type = other_type_text_owner
  ) |> 
  mtt(
    is_for_acq = charbin(is_for_acq),
    is_corp = charbin(is_corp),
    is_llc = charbin(is_llc),
    is_med_prov_supp = charbin(is_med_prov_supp),
    is_mgmt_serv_co = charbin(is_mgmt_serv_co),
    is_med_staff_co = charbin(is_med_staff_co),
    is_holding_co = charbin(is_holding_co),
    is_invest_firm = charbin(is_invest_firm),
    is_fin_inst = charbin(is_fin_inst),
    is_consult_firm = charbin(is_consult_firm),
    is_for_profit = charbin(is_for_profit),
    is_non_profit = charbin(is_non_profit),
    is_other_type = charbin(is_other_type)
  )

rhc_own
```

## Geocode

```{r}
geo_census <- tidygeocoder::geocode(
  mtt(rhc_enr, 
      zip = substr(zip, 1, 5)),
  street = address,
  city = city,
  state = state,
  postalcode = zip,
  method = "census", 
  full_results = TRUE)

geo_census |> 
  slt(lat:matched_address) |> 
  sbt(cheapr::is_na(lat))

geo_census |> 
  sbt(match_type == "Non_Exact") |> 
  slt(input_address, matched_address) |> 
  print(n = Inf)

geo_census <- sbt(geo_census, !cheapr::is_na(lat))
```

## Georgia Counties Shapefile

```{r}
ga_county <- tigris::counties(state = "GA", year = 2024)
ga_county_simple <- rmapshaper::ms_simplify(ga_county)
ga_county_simple$mid <- sf::st_centroid(ga_county_simple$geometry)
ga_county_simple
```


## Georgia RHCs Map

```{r}
#| fig.width: 5
#| fig.height: 8
ggplot(ga_county_simple) +
  geom_sf(
    fill = "skyblue",
    colour = "white",
    alpha = 0.5) +
  geom_sf_text(
    aes(geometry = geometry, 
        label = NAME),
    size = 2.5,
    check_overlap = TRUE) +
  geom_jitter(
    data = geo_census,
    mapping = aes(long, lat),
    fill = "yellow",
    color = "darkred",
    alpha = 0.75,
    size = 3,
    shape = 21,
    stroke = 1) +
  theme_void()
```

