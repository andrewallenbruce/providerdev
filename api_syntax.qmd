---
title: "Query Syntax"
editor_options: 
   chunk_output_type: console
---

```{r setup}
#| echo: false
#| message: false
#| warning: false
source("_common.R")

htmltools::tagList(
  btn_link("https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module/filtering", "Drupal JSONAPI"))
```

## Query Generation

```{r}
format_syntax <- \(name, value) {
  setNames(value, paste0(name, "[id-", seq_along(value), "][condition][value]"))
}

format_syntax("filter", c("GA", "NY"))

request("https://example.com") |>
  req_url_query(!!!format_syntax("ID", 5:7))
```


## JSON:API

The Drupal core [JSON:API module](https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module) implements the JSON:API spec for Drupal entities. It provides a zero-configuration required, opinionated, way to allow RESTful CRUD for a Drupal site's content.

It is closely coupled to Drupal's Entity and Field APIs, response caching, and authentication and authorization systems. Because it follows the shared JSON:API conventions it can help increase productivity and allow you to take advantage of non-Drupal specific tooling.

[Refer to the Drupal documentation](https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module/filtering) for more information on filtering API requests.

## Filtering

[Collections](https://www.drupal.org/docs/8/modules/json-api/collections-filtering-and-sorting) are listings of resources. When you make an unfiltered request to a collection endpoint like `/jsonapi/node/article`, you'll just get every article that you're allowed to see. Without filters, you can't get only the articles that you want.

The simplest, most common filter is a **key-value filter**:

```r
/data?
   filter[field_1]=value&
   filter[field_2]=value
```

This matches all resources with `field_name` equal to `"value"` and `field_other` equal to `"value"`.

### Building Filters

The fundamental building blocks of JSON:API's filters are **conditions** and **groups**. 

   * __Conditions__ assert that something is `TRUE`
   * __Groups__ compose sets of conditions

Those sets can be nested to make super fine queries. You can think of a nested set as a tree:

_Conventional representation:_

```r
is_A(is_B(x) & is_C(is_D(x) | is_E(x), x), x)
```

_Tree representation:_

```r
   A
  / \
 B & C
    / \
   D | E
```

In both representations:

   * `D` & `E` are members of `C` in an `OR` group
   * `B` & `C` are members of `A` in an `AND` group

A condition has 3 primary parts: a `[path]`, an `[operator]` and a `[value]`.

   1. `[path]`: Column of a dataset
   1. `[operator]`: Logical comparison
   1. `[value]`: Row of a dataset

In JSON:API syntax, it is formatted as a key/value pair to work inside a URL query string. If we were filtering on a user's first name, a condition might look like this:

> __Note__: `%3D` is the URL-encoded `=` symbol. All operators must be URL-encoded.

```r
/data?
   filter[id1][condition][path]=first_name&
   filter[id1][condition][operator]=%3D&
   filter[id1][condition][value]=Janis
```

Notice that we put an `id` inside the first set of square brackets. Every condition or group should have a unique identifier. 

But what if we have lots of Janises in the system? Let's add another filter so we only get Janises with a last name that starts with `"J"`:

```r
/data?
   filter[id1][condition][path]=first_name&
   filter[id1][condition][operator]=%3D&
   filter[id1][condition][value]=Janis&
   filter[id2][condition][path]=last_name&
   filter[id2][condition][operator]=STARTS_WITH&
   filter[id2][condition][value]=J
```

JSON:API Allowed Operators:

```r
= 
<>
> 
>= 
< 
<=
STARTS_WITH 
CONTAINS 
ENDS_WITH
IN 
NOT IN
BETWEEN 
NOT BETWEEN
IS NULL 
IS NOT NULL
```

### Condition Groups

A **group** is a set of conditions joined by a **conjunction**, either `AND` or `OR`. Let's say we want to find all users with a last name that starts with "J" and have either the first name "Janis" or "Joan". To do that, we add a group:

```r
/data?
   filter[grp1][group][conjunction]=OR
```

Then, we need assign filters to that new group. To do that, we add a `memberOf` key. Every condition and group can have a `memberOf` key. 

```r
/data?
   filter[g1][group][conjunction]=OR&
   filter[f1][condition][path]=first_name&
   filter[f1][condition][operator]=%3D&
   filter[f1][condition][value]=Janis&
   filter[f1][condition][memberOf]=g1&
   filter[f2][condition][path]=first_name&
   filter[f2][condition][operator]=%3D&
   filter[f2][condition][value]=Joan&
   filter[f2][condition][memberOf]=g1&
   filter[f3][condition][path]=last_name&
   filter[f3][condition][operator]=STARTS_WITH&
   filter[f3][condition][value]=J
```

> __Note__: Groups can have a `memberOf` key just like conditions, which means you can have groups of groups. Every filter without a `memberOf` key is assumed to be part of a "root" group with a conjunction of `AND`.

Does that look familiar? It should, we saw it above as a tree:

```r
   A         A = root & g1
  / \
 /   \       B = f3
B  &  C      C = g1
     / \
    /   \    D = f1
   D  |  E   E = f2
```

### Paths

Paths provide a way to filter based on relationship values. Up to this point, we've just been filtering by the hypothetical `first_name` and `last_name`. Suppose we want to filter by the name of a user's career, where career types are stored as a separate resource. We could add a filter like this:

```r
/data?
   filter[career][condition][path]=field_career.name&
   filter[career][condition][operator]=%3D&
   filter[career][condition][value]=DOCTOR
```

Paths use a "dot notation" to traverse relationships. If a resource has a relationship, you can add a filter against it by concatenating the relationship field name and the relationship's field name with a `.` (dot). You can even filter by relationships of relationships (and so on) just by adding more field names and dots.

You can filter on a specific index of a relationship by putting a non-negative integer in the path. So the path `some_relationship.1.some_attribute` would only filter by the 2nd related resource.

> Tip: You can filter by sub-properties of a field. For example, a path like `field_phone.country_code` will work even though `field_phone` isn't a relationship.

When filtering against configuration properties, you can use an asterisk (`*`) to stand-in for any portion of a path. 

For example, `/jsonapi/field_config/field_config?filter[dependencies.config.*]=comment.type.comment` would match all field configs in which `["attributes"]["dependencies"]["config"]` (an indexed array) contains the value `"comment.type.comment"`.

### Shortcuts

When the operator is `=`, you don't have to include it:
```r
/data?
   filter[a-label][condition][path]=first_name&
   filter[a-label][condition][operator]=%3D&
   filter[a-label][condition][value]=Janis
```
becomes
```r
/data?
   filter[janis-filter][condition][path]=first_name&
   filter[janis-filter][condition][value]=Janis
```
When the operator is `=` and you don't need to filter by the same field twice, the path can be the identifier:

```r
/data?
   filter[janis-filter][condition][path]=first_name&
   filter[janis-filter][condition][value]=Janis
```
becomes
```r
/data?
   filter[first_name][value]=Janis
```
You can reduce the simplest equality checks down to a key-value form:

```r
?filter[first_name]=Janis
```

### Filters and Access Control

First, a warning: don't make the mistake of confusing filters for access control. Just because you've written a filter to remove something that a user shouldn't be able to see, doesn't mean it's not accessible. **Always perform access checks on the backend.**

With that big caveat, let's talk about using filters to complement access control. To improve performance, you should filter out what your users will not be able to see. The most frequent support request in the JSON:API issue queues can be solved by this one simple trick!

If you know your users cannot see unpublished content, add the following filter:

```r
?filter[status][value]=1
```

Using this method, you'll lower the number of unnecessary requests that you need to make. **That's because JSON:API doesn't return data for resources to which a user doesn't have access.** You can see which resources may have been affected by inspecting the meta.errors section of JSON:API document.

So, do your best to filter out inaccessible resources ahead of time.

--------------------------------------------------------------------------------

## Examples

### Exact Match Search on Column

```r
- dataset   Medicare Fee-For-Service Public Provider Enrollment
  column    PROVIDER_TYPE_DESC 
  equals    PRACTITIONER - GENERAL PRACTICE

call:     /data?
          filter[PROVIDER_TYPE_DESC]=PRACTITIONER - GENERAL PRACTICE
```

```yaml
catalog:        data.json
  format:       API
  description:  latest
  title:        Medicare Fee-For-Service Public Provider Enrollment
  accessURL:    ""

url: 
  scheme: "https://"
  hostname: "data.cms.gov/"
  api: "data-api/v1/dataset/"
  identifier: "d10d792e-ea6e-4145-8512-34efbc1be04b"
  path: "/data?"
  query: 
    - filter: 1
      path: "PROVIDER_TYPE_DESC"
      operator: "EQUALS"
      value: "PRACTITIONER - GENERAL PRACTICE"
```

### CONTAINS Search on One Column

```r
- dataset  Medicare Fee-For-Service Public Provider Enrollment
  column   PROVIDER_TYPE_DESC
  contains SUPPLIER

call:    /data?
          filter[example][condition][path]=PROVIDER_TYPE_DESC
         &filter[example][condition][operator]=CONTAINS
         &filter[example][condition][value]=SUPPLIER
```

### Combination Search on Two Columns

```r
- dataset  Medicare Fee-For-Service Public Provider Enrollment
  column   PROVIDER_TYPE_DESC
  contains PRACTITIONER
  column   STATE_CD
  equals   MD

call:    /data?
          filter[filter-1][condition][path]=PROVIDER_TYPE_DESC
         &filter[filter-1][condition][operator]=CONTAINS
         &filter[filter-1][condition][value]=PRACTITIONER
         &filter[filter-2][condition][path]=STATE_CD
         &filter[filter-2][condition][operator]==
         &filter[filter-2][condition][value]=MD
```

### Equals

This example is an equals filter searching the Accountable Care Organizations 2021 dataset for a single ID.

```r
https://data.cms.gov/data-api/v1/dataset/
0ece71c6-1112-47b3-8f7a-5385087e7041/data?
filter[filter-0-0][condition][path]=aco_id&
filter[filter-0-0][condition][operator]=%3D&
filter[filter-0-0][condition][value]=A4807
```

An equals filter can be simplified like this.

```r
https://data.cms.gov/data-api/v1/dataset/
0ece71c6-1112-47b3-8f7a-5385087e7041/data?
filter[aco_id]=A4807
```
### Keyword

The keyword search will look for matching words in every column. This example will check for "Alex" in the Order and Referring dataset. Notice that it finds matches on both the first and last name fields.

```r
https://data.cms.gov/data-api/v1/dataset/
c99b5865-1119-4436-bb80-c5af2773ea1f/data?
keyword=alex
```

### Multiple Conditions at Once

This search returns results from the Medicare Fee-For-Service Public Provider Enrollment dataset where the provider specialty is "PRACTITIONER - OPTOMETRY" and the location is Virginia.

```r
https://data.cms.gov/data-api/v1/dataset/
2457ea29-fc82-48b0-86ec-3b0755de7515/data?&
filter[root-group][group][conjunction]=AND&
filter[group-0][group][conjunction]=AND&
filter[group-0][group][memberOf]=root-group&
filter[filter-0-0][condition][path]=PROVIDER_TYPE_DESC&
filter[filter-0-0][condition][operator]=%3D&
filter[filter-0-0][condition][value]=PRACTITIONER%20-%20OPTOMETRY&
filter[filter-0-0][condition][memberOf]=group-0&
filter[filter-0-1][condition][path]=STATE_CD&
filter[filter-0-1][condition][operator]=%3D&
filter[filter-0-1][condition][value]=VA&
filter[filter-0-1][condition][memberOf]=group-0
```

### IN

This search returns results from the Opioid Treatment Program Providers dataset where the provider is located from MD, MI, or VA with the results sorted by NPI.

```r
https://data.cms.gov/data-api/v1/dataset/
f1a8c197-b53d-4c24-9770-aea5d5a97dfb/data?
filter[condition][path]=STATE&
filter[condition][operator]=IN&
filter[condition][value][]=MI&
filter[condition][value][]=VA&
filter[condition][value][]=MD&
sort=NPI
```

### Sorting Results

You can use the sort query parameter to specify which column the results should be sorted by. This example shows how to sort the Opt Out Affidavits dataset by NPI.

Lowest first: 

```r
https://data.cms.gov/data-api/v1/dataset/
9887a515-7552-4693-bf58-735c77af46d7/data?
sort=NPI
```

Highest first: 

```r
https://data.cms.gov/data-api/v1/dataset/
9887a515-7552-4693-bf58-735c77af46d7/data?
sort=-NPI
```

### Select Subset of Columns

You can use the column query parameter to limit the columns that are returned to you by providing a comma separated list of the columns to include.

This example will return just the NPI, First Name, and Last Name from the Order and Referring dataset:

```r
https://data.cms.gov/data-api/v1/dataset/
c99b5865-1119-4436-bb80-c5af2773ea1f/data?
column=NPI,FIRST_NAME,LAST_NAME
```

### Specify Number of Results

Use the size and offset parameters to accomplish this.
