---
title: "Provider"
editor_options: 
   chunk_output_type: console
---

```{r setup}
#| echo: false
#| message: false
#| warning: false
source("_common.R")
```

## Provider Data Catalog

   * [Home](https://data.cms.gov/provider-data/)
   * [Datasets](https://data.cms.gov/provider-data/search)
   * [About](https://data.cms.gov/provider-data/about)
   * [API Documentation](https://data.cms.gov/provider-data/docs)

This site provides access to the Centers for Medicare & Medicaid Services official data that are used on the **Medicare Care Compare** website and directories.

## Rate Limit

The **Provider Data Catalog API** currently limits each batch of results to a maximum of **2,000** entries. To retrieve datasets larger than this threshold, you must execute multiple requests, incrementing the offset each time to paginate through results:

   1. Fetch the first 2000 results:

```r
https://data.cms.gov/provider-data/api/1/datastore/query/
   7t8x-u3ir/0?
   offset=0
```

   2. Fetch the next 2000 results (2001-4000):

```r
https://data.cms.gov/provider-data/api/1/datastore/query/
   7t8x-u3ir/0?
   offset=2000
```

Continue this pattern, incrementing the offset by 2,000 for each subsequent batch.

While retrieving large datasets, consider pacing your requests to avoid overwhelming your system with data and to allow for graceful error handling. Depending on the volume of data and your application's capabilities, consider implementing a back-off strategy if errors occur.

## Star Ratings & Overall Care Ratings

CMS's **Five-Star Quality Rating System** is designed to help users compare the overall quality of care across different healthcare providers. Access these ratings by referring to the associated column names:

   * Nursing Homes: `overall_rating`
   * Hospitals: `hospital_overall_rating`
   * Dialysis Facilities: `five_star`
   * Hospice: `star_rating`
   * Home Health: `quality_of_patient_care_star_rating`

For example, the query for the [**Nursing Homes**](https://data.cms.gov/provider-data/dataset/4pq5-n9py) dataset for facilities with a 5-star overall rating:

```r
https://data.cms.gov/provider-data/api/1/
   datastore/query/
   4pq5-n9py/
   0?
   conditions[0][property]=overall_rating&
   conditions[0][value]=5&
   conditions[0][operator]==
```

## Querying for Specific Conditions

The recommended method is to use the datastore query endpoint: `datastore/query/{datasetID}/{index}`

The datastore query endpoint takes two arguments: the `datasetID`, which can be obtained from the URL of the dataset and does not change between data refreshes, and the index of the distribution. Currently on PDC, the index will always be zero.

As an example, if you want to pull the first 500 results for a specific dataset that has a rating column called `overall_rating`, you would first identify the dataset that has the specific column such as this:

```r
https://data.cms.gov/provider-data/dataset/4pq5-n9py
```

and then you would use 

```r
https://data.cms.gov/provider-data/api/1/datastore/query/4pq5-n9py/0
```
The results can be filtered further. For example, to return the first 500 results with an overall rating of 5, you would use the following:

```r
https://data.cms.gov/provider-data/api/1/
   datastore/query/
   4pq5-n9py/
   0?
   conditions[0][property]=overall_rating&
   conditions[0][value]=5&
   conditions[0][operator]==
```

More complex queries can be created in JSON and converted to an HTTP query string by using [JSON Query to String](https://www.convertonline.io/convert/json-to-query-string).

For example, to return just the CMS certification number and overall rating columns that have an overall rating greater than 3, you could use the following JSON:

```r
{
    "properties": [
        "cms_certification_number_ccn",
        "overall_rating"
    ],
    "conditions": [
        {
            "property":"overall_rating",
            "value": "3",
            "operator": ">"
        }
    ]
}
```

Which converts to a query string of:

```r
https://data.cms.gov/provider-data/api/1/
   datastore/query/
   4pq5-n9py/
   0?
   properties[]=cms_certification_number_ccn&
   properties[]=overall_rating&
   conditions[0][property]=overall_rating&
   conditions[0][value]=3&
   conditions[0][operator]=>
```

## Retrieve List of All Dataset IDs

Yes, you can retrieve a comprehensive list of all datasets available on the PDC site by leveraging the metastore schema endpoint:

```r
https://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items
```

For developers looking to work with multiple datasets programmatically, consider utilizing JSON parsing tools or custom scripts to extract and manage these IDs efficiently. For example, using a `curl` command in the terminal followed by a tool like `jq` can streamline the process:

```r
curl https://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items | jq '.[] | {id: .identifier, name: .title}'
```

This command fetches the list of datasets and uses `jq` to parse the JSON response, extracting the identifier and title of each dataset.

## Filter List of Dataset IDs

You can get a list of all public datasets for a Topic area via the /api/1/search endpoint. For example, to get a list of all datasets in the Home health services Topic, you could use:

https://data.cms.gov/provider-data/api/1/search?page-size=100&theme=Home%20health%20services

(Note that “%20” is inserted for the spaces between words in a Topic name.)

If the page size is not provided, the default result limit is 10.

One of the easiest ways to use this feature is to set up your search parameters on the Provider Data Catalog  search page (https://data.cms.gov/provider-data/search) and then copy the query string to the end of the search endpoint.

For example, if you filter by “Dialysis facilities” tagged with “Linking Quality to Payment” and select 25 results per page, the query string produced is: ?keyword=Linking%20Quality%20to%20Payment&page-size=25&theme=Dialysis%20facilities

You can append this query string to the search endpoint to get a list of all datasets that meet that criteria, like this:

https://data.cms.gov/provider-data/api/1/search?keyword=Linking%20Quality%20to%20Payment&page-size=25&theme=Dialysis%20facilities.

You can also use the same method to return a list of datasets that contain a keyword like “ratings” in their title and/or description:

https://data.cms.gov/provider-data/api/1/search?fulltext=ratings

## Difference Between Metastore & Datastore

Datastore: data from the data files (CSVs) and Metastore: metadata properties about the dataset  from the data.json file (e.g. dataset title, last updated date, release date, keywords, etc.)

Think of the Metastore as the library index that helps you find the right book (dataset), and the Datastore as the book itself, containing all the detailed information (data entries) you need.

## Distribution & Dataset IDs

Distribution ID - the unique identifier of the datastore. The distribution ID is specific to a particular CSV data import, so it changes with every data refresh.

Dataset ID -  the unique identifier of the dataset  The Dataset ID comes from the data.json file and appears as part of the URL in the PDC site and it does not change between refreshes.

The Distribution ID changes with every data refresh.

If you have been using the datastore/sql or datastore/query/{distributionId} endpoints to pull data, you might consider switching to use the datastore/query/{datasetID}/{index} endpoint instead. The datasetID does not change between refreshes, and currently all datasets in the Provider Data Catalog have only a single resource, so the index will always be zero.

As an example, to pull the data for the long term care hospital dataset at https://data.cms.gov/provider-data/dataset/5zdx-ny2x you could use

https://data.cms.gov/provider-data/api/1/datastore/query/5zdx-ny2x/0

Since Distribution IDs change with every dataset update, if you are creating an automated script, it is better to use APIs with the Dataset ID and the index of the distribution. (Please see “Do the Distribution IDs change?” for more information.)

If you still need the current distribution ID, you can find it by viewing the dataset metadata API.  /api/1/metastore/schemas/dataset/items/[datasetID]?show-reference-ids under distribution -> identifier

## Data

```{r}
#| label: provider_data
provider_data() |> 
  purse()

provider_data() |>
  pull(title) |>
  cat(sep = "\n")
```

## National Downloadable File

```{r}
#| label: url_building
#| echo: false
#| eval: false
httr2::url_parse("https://data.cms.gov/provider-data/api/1/datastore/query/")
    
# distro 

unclass(
  httr2::url_parse(
    "?limit=1&offset=100&count=true&results=true&schema=true&keys=true&format=json&rowIds=true"
    )
  )

ndf_identifier <- \(x) {
  kit::nswitch(x,
    "affiliations", "27ea-46a8",
    "clinicians", "mj5m-pzi6",
    default = NA_character_,
    nThread = 4L)
}

url_ndf <- httr2::url_parse(
  "https://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items/"
  )

url_tmp <- url_ndf |> 
  httr2::url_build() |> 
  httr2::request()

httr2::req_template(
  url_tmp, 
  "/{fname}?show-reference-ids=true", 
  fname = ndf_identifier("affiliations"))

url_ndf |> 
  httr2::url_build() |> 
  httr2::request() |> 
  httr2::req_url_path_append(
    ndf_identifier(fname)) |> 
  httr2::req_url_path_append("?show-reference-ids=true") |>
  httr2::req_perform() |>
  httr2::resp_body_json(check_type = FALSE, simplifyVector = TRUE)
```

```{r}
#| label: meta_ndf
meta_ndf <- \(fname) {
  
  stopifnot(curl::has_internet())
  
  x <- request(
    paste0(
      "https://data.cms.gov/",
      "provider-data/api/1/",
      "metastore/schemas/",
      "dataset/items/",
      switch(fname, 
             affiliations = "27ea-46a8", 
             clinicians   = "mj5m-pzi6", 
             stop("Invalid argument")),
    "?show-reference-ids=true")) |>
       req_perform() |>
       resp_body_json(
         check_type     = FALSE,
         simplifyVector = TRUE)
  
  distro <- gelm(gelm(x, "distribution"), "identifier")
  
  y <- request(
    paste0(
    "https://data.cms.gov/", 
    "provider-data/api/1/",
    "datastore/query/", 
    distro, 
    "?limit=1&offset=100&",
    "count=true&results=true&", 
    "schema=true&keys=true&",
    "format=json&rowIds=true")) |>
       req_perform() |>
       resp_body_json(
         check_type = FALSE,
         simplifyVector = TRUE)
  
  z <- gelm(gelm(gelm(y, "schema"), distro), "fields")
  
  list(
    title        = gelm(x, "title"),
    description  = gelm(x, "description"),
    identifier   = gelm(gelm(x, "identifier"), "identifier"),
    distribution = distro,
    issued       = gelm(x, "issued"), 
    modified     = gelm(x, "modified")[[1]], 
    released     = gelm(x, "released"),
    dimensions   = paste0(gelm(gelm(y, "count"), is.numeric), " x ", gelm(gelm(z, "record_number"), "length")), 
    fields       = names(z),
    site         = gelm(x, "landingPage"),
    csv          = gelm(gelm(gelm(x, "distribution"), "data"), "downloadURL", m = "df"),
    dictionary   = paste0("https://data.cms.gov/provider-data/sites/default/files/data_dictionaries/physician/DOC_Data_Dictionary.pdf"))
  
}
```

### Examples

```{r}
#| label: meta_affiliations
meta_ndf("affiliations") |> purse()
```


```{r}
#| label: meta_clinicians
meta_ndf("clinicians") |> purse()
```
