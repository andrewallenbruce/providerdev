---
title: "Provider Catalog"
editor_options: 
   chunk_output_type: console
---

```{r setup}
#| echo: false
#| message: false
#| warning: false
source("_common.R")
```

   * [Home](https://data.cms.gov/provider-data/)
   * [Datasets](https://data.cms.gov/provider-data/search)
   * [About](https://data.cms.gov/provider-data/about)
   * [API Documentation](https://data.cms.gov/provider-data/docs)

## PDC FAQ

This site provides access to the Centers for Medicare & Medicaid Services official data that are used on the **Medicare Care Compare** website and directories.

### Rate Limit

The **Provider Data Catalog API** currently limits each batch of results to a maximum of **2,000** entries. To retrieve datasets larger than this threshold, you must execute multiple requests, incrementing the offset each time to paginate through results:

   1. Fetch the first 2000 results:

```{r}
weburl::url_parse(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "datastore/query/7t8x-u3ir/0?",
    "offset=0"
    )
  ) |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na() |>
  purse()
```

   2. Fetch the next 2000 results (2001-4000):

```{r}
weburl::url_parse(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "datastore/query/7t8x-u3ir/0?",
    "offset=2000"
    )
  ) |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na() |> 
  purse()
```

Continue incrementing the offset by 2,000 for each subsequent batch. When retrieving large datasets, consider pacing your requests to avoid overwhelming your system with data and to allow for graceful error handling. Depending on the volume of data and your application's capabilities, consider implementing a back-off strategy if errors occur.

### Stars/Ratings

CMS's **Five-Star Quality Rating System** is designed to help users compare the overall quality of care across different healthcare providers. Access these ratings by referring to the associated column names:

   * Nursing Homes: `overall_rating`
   * Hospitals: `hospital_overall_rating`
   * Dialysis Facilities: `five_star`
   * Hospice: `star_rating`
   * Home Health: `quality_of_patient_care_star_rating`

For example, the query for the [**Nursing Homes**](https://data.cms.gov/provider-data/dataset/4pq5-n9py) dataset for facilities with less than a 5-star overall rating:

```{r}
#| label: nursing_homes
weburl::url_parse(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "datastore/query/4pq5-n9py/0?",
    "conditions[0][property]=overall_rating&",
    "conditions[0][value]=5&",
    "conditions[0][operator]=<"
    )
  ) |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na() |> 
  purse()

x <- request(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "datastore/query/4pq5-n9py/0?",
    "conditions[0][property]=overall_rating&",
    "conditions[0][value]=5&",
    "conditions[0][operator]=<"
    )
  ) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

x$results |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na() |> 
  count(overall_rating, sort = TRUE)
```

### Specific Conditions

Recommended method: Use the __Datastore Query Endpoint__ (`datastore/query/{datasetID}/{index}`); takes two arguments: the `datasetID`, which can be obtained from the URL of the dataset and does not change between data refreshes, and the index of the distribution. Currently on the PDC, the index will _always_ be `0`.

To return the first 500 results of a dataset with a column named `overall_rating`, first identify the dataset with that column:

```{r}
#| label: first_500
weburl::url_parse(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "datastore/query/4pq5-n9py/0"
    )
  ) |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na() |> 
  purse()

x <- request(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "datastore/query/4pq5-n9py/0"
    )
  ) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

x$results |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na() |> 
  count(overall_rating, sort = TRUE)
```

To return the first 500 results with an overall rating of 5:

```{r}
#| label: rating_five
weburl::url_parse(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "datastore/query/4pq5-n9py/0?",
    "conditions[0][property]=overall_rating&",
    "conditions[0][value]=5&",
    "conditions[0][operator]=="
    )
  ) |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na() |> 
  purse()

x <- request(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "datastore/query/4pq5-n9py/0?",
    "conditions[0][property]=overall_rating&",
    "conditions[0][value]=5&",
    "conditions[0][operator]=="
    )
  ) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

x$results |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na() |> 
  count(state, sort = TRUE)
```

More complex queries can be created in JSON and converted to an HTTP query string using the [JSON Query to String](https://www.convertonline.io/convert/json-to-query-string) tool. For example, to return the `cms_certification_number_ccn` and `overall_rating` columns with a rating greater than 3, use the following JSON:

```r
{
    "properties": [
        "cms_certification_number_ccn",
        "overall_rating"
    ],
    "conditions": [
        {
            "property":"overall_rating",
            "value": "3",
            "operator": ">"
        }
    ]
}
```
This converts to a query string of:

```{r}
#| label: ccn_rating
weburl::url_parse(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "datastore/query/4pq5-n9py/0?",
    "properties[]=cms_certification_number_ccn&",   
    "properties[]=overall_rating&",
    "conditions[0][property]=overall_rating&",   
    "conditions[0][value]=3&",
    "conditions[0][operator]=>"
    )
  ) |>
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na() |> 
  purse()

x <- request(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "datastore/query/4pq5-n9py/0?",
    "properties[]=state&",   
    "properties[]=overall_rating&",
    "conditions[0][property]=overall_rating&",   
    "conditions[0][value]=3&",
    "conditions[0][operator]=>"
    )
  ) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

x$results |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na() |> 
  count(overall_rating, sort = TRUE)
```

### All Dataset IDs

Retrieve a comprehensive list of all datasets available by leveraging the `metastore/schemas` endpoint:

```{r}
#| label: data_ids
x <- request(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "metastore/schemas/dataset/items"
    )
  ) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

x |> 
  tibble() |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na()
```

### Search `theme`

Return a list of all public datasets for a particular __Topic__ area via the `/api/1/search` endpoint. For example, to get a list of all datasets in the `Home health services` Topic, you could use:

```{r}
#| label: search_theme
x <- request(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "search?",
    "page-size=100&",
    "theme=Home%20health%20services"
    )
  ) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

x$facets |> 
  tibble() |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na()

x$results |> 
  glimpse()
```

> __Note__: If the `page-size` is not provided, the default result limit is 10.

### Search `keyword`

One of the easiest ways to generate your search parameters is to use the Provider Data Catalog [search page](https://data.cms.gov/provider-data/search) and then copy the query string to the end of the search endpoint. For example, if you filter by _"Dialysis facilities"_ tagged with _"Linking Quality to Payment"_ and select 25 results per page, the query string produced is:

```{r}
#| label: search_keyword
x <- request(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "search?",
    "keyword=Linking%20Quality%20to%20Payment&",
    "page-size=25&",
    "theme=Dialysis%20facilities"
    )
  ) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

x$facets |> 
  tibble() |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na()

x$results |> 
  glimpse()
```

### Search `fulltext`

Use the same method to return a list of datasets that contain a keyword (like "ratings") in their title and/or description:

```{r}
#| label: search_fulltext
x <- request(
  paste0(
    "https://data.cms.gov/",
    "provider-data/api/1/",
    "search?",
    "fulltext=ratings"
    )
  ) |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

x$facets |> 
  tibble() |> 
  mutate(across(where(is.character),  ~ na_if(.x, ""))) |> 
  remove_all_na()

x$results |> 
  glimpse()
```


::: callout

## Metastore/Datastore

   * __Datastore__: Data from the data files (CSVs)
   * __Metastore__: Metadata from the data.json file (`title`, `last_updated`, `release_date`, `keywords`, etc.)

Think of the __Metastore__ as the library index that helps you find the right book (dataset), and the __Datastore__ as the book itself.

::: 


::: callout

## IDs: Dataset/Distribution

   * __Distribution__: Unique identifier of the _Datastore_ 
      * Specific to a particular CSV data import
      * Changes with every data refresh
   * __Dataset__: Unique identifier of the _Dataset_ 
      * Comes from the data.json file
      * Appears as part of the URL in the PDC site
      * Does not change between data refreshes

If you have been using the `datastore/sql` or `datastore/query/{distributionId}` endpoints, consider switching to the `datastore/query/{datasetID}/{index}` endpoint instead. The `datasetID` does not change between refreshes, and, currently, all **Provider Data Catalog** datasets only have a single resource, so the index will always be zero.

For example, search the [Long Term Care Hospital dataset](https://data.cms.gov/provider-data/dataset/5zdx-ny2x) with:

```{r}
"https://data.cms.gov/provider-data/api/1/datastore/query/5zdx-ny2x/0"
```

Distribution IDs change with every dataset update, so it is better to use APIs with the Dataset ID and the index of the distribution. If you still need the current distribution ID, you can access it through the metadata API, under `distribution -> identifier`:

```{r}
"https://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items/[datasetID]?show-reference-ids"
```

::: 

--------------------------------------------------------------------------------

## Dataset Object

```{r}
#| label: provider_data
provider_data() |> 
  purse()

provider_data() |>
  pull(title) |>
  cat(sep = "\n")
```

### National Downloadable File

```{r}
#| label: url_building
#| eval: false
httr2::url_parse("https://data.cms.gov/provider-data/api/1/datastore/query/")
    
# distro 

unclass(
  httr2::url_parse(
    "?limit=1&offset=100&count=true&results=true&schema=true&keys=true&format=json&rowIds=true"
    )
  )

ndf_identifier <- \(x) {
  kit::nswitch(x,
    "affiliations", "27ea-46a8",
    "clinicians", "mj5m-pzi6",
    default = NA_character_,
    nThread = 4L)
}

url_ndf <- httr2::url_parse(
  "https://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items/"
  )

url_tmp <- url_ndf |> 
  httr2::url_build() |> 
  httr2::request()

httr2::req_template(
  url_tmp, 
  "/{fname}?show-reference-ids=true", 
  fname = ndf_identifier("affiliations"))

url_ndf |> 
  httr2::url_build() |> 
  httr2::request() |> 
  httr2::req_url_path_append(
    ndf_identifier(fname)) |> 
  httr2::req_url_path_append("?show-reference-ids=true") |>
  httr2::req_perform() |>
  httr2::resp_body_json(check_type = FALSE, simplifyVector = TRUE)
```

```{r}
#| label: meta_ndf
meta_ndf <- \(fname) {
  
  stopifnot(curl::has_internet())
  
  x <- request(
    paste0(
      "https://data.cms.gov/",
      "provider-data/api/1/",
      "metastore/schemas/",
      "dataset/items/",
      switch(fname, 
             affiliations = "27ea-46a8", 
             clinicians   = "mj5m-pzi6", 
             stop("Invalid argument")),
    "?show-reference-ids=true")) |>
       req_perform() |>
       resp_body_json(
         check_type     = FALSE,
         simplifyVector = TRUE)
  
  distro <- gelm(gelm(x, "distribution"), "identifier")
  
  y <- request(
    paste0(
    "https://data.cms.gov/", 
    "provider-data/api/1/",
    "datastore/query/", 
    distro, 
    "?limit=1&offset=100&",
    "count=true&results=true&", 
    "schema=true&keys=true&",
    "format=json&rowIds=true")) |>
       req_perform() |>
       resp_body_json(
         check_type = FALSE,
         simplifyVector = TRUE)
  
  z <- gelm(gelm(gelm(y, "schema"), distro), "fields")
  
  list(
    title        = gelm(x, "title"),
    description  = gelm(x, "description"),
    identifier   = gelm(gelm(x, "identifier"), "identifier"),
    distribution = distro,
    issued       = gelm(x, "issued"), 
    modified     = gelm(x, "modified")[[1]], 
    released     = gelm(x, "released"),
    dimensions   = paste0(gelm(gelm(y, "count"), is.numeric), " x ", gelm(gelm(z, "record_number"), "length")), 
    fields       = names(z),
    site         = gelm(x, "landingPage"),
    csv          = gelm(gelm(gelm(x, "distribution"), "data"), "downloadURL", m = "df"),
    dictionary   = paste0("https://data.cms.gov/provider-data/sites/default/files/data_dictionaries/physician/DOC_Data_Dictionary.pdf"))
  
}
```

### Examples

```{r}
#| label: meta_affiliations
meta_ndf("affiliations") |> purse()
```


```{r}
#| label: meta_clinicians
meta_ndf("clinicians") |> purse()
```
