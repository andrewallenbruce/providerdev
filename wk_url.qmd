---
title: "URL Object"
editor_options: 
   chunk_output_type: console
---

```{r setup}
#| echo: false
#| message: false
#| warning: false
source("_common.R")
```

## `class_path`

```{r}
#| label: class_path
class_path <- new_class(
  name = "class_path",
  properties = list(
    head = new_property(
      class_character,
      default = "",
      setter = function(self, value) {
        self@head <- value
        self
      }),
    guid = new_property(
      class_character,
      default = "",
      setter = function(self, value) {
        self@guid <- value
        self
      }),
    tail = new_property(
      class_character,
      default = "",
      setter = function(self, value) {
        self@tail <- value
        self
      })
  ),
  validator = function(self) { 
    if (length(self@head) != 1L) "@head must be length 1" 
    if (length(self@guid) != 1L) "@guid must be length 1" 
    if (nchar(self@guid) == 36 & 
        !grepl(
          "(?:\\{{0,1}(?:[0-9a-fA-F]){8}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){12}\\}{0,1})", 
          self@guid)) 
      "@guid invalid"
    if (length(self@tail) != 1L) "@tail must be length 1"
  }
)

class_path()
```

## `class_url`

```{r}
#| label: class_url
class_url <- new_class(
  name = "class_url",
  properties = list(
    scheme = new_property(class_character, default = "https"),
    hostname = new_property(class_character, default = "data.cms.gov"),
    path = new_property(class_path),
    query = new_property(class_list, default = list())
  )
)

class_url()
```

## GUID

__GUID__ is an acronym for [Globally Unique Identifier](https://uibakery.io/regex-library/guid-regex-python) and used for resource identification. The term is generally used instead of UUID when working with Microsoft technologies.

```{r}
# regex to validate
"^(?:\\{{0,1}(?:[0-9a-fA-F]){8}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){12}\\}{0,1})$"

# regex to extract
"(?:\\{{0,1}(?:[0-9a-fA-F]){8}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){4}-(?:[0-9a-fA-F]){12}\\}{0,1})"
```


```{r}
curl::curl_parse_url(
  "https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data-viewer?size=5000&offset=10000"
  )

new_path <- \(url) {
  class_path(
    head = stringi::stri_extract(url, regex = "[0-9a-z]{8}-[0-9]{4}-[0-9]{4}-[0-9a-z]{4}-[0-9a-z]{8}"),
    guid = stringi::stri_extract(url, regex = "[0-9a-z]{8}-[0-9]{4}-[0-9]{4}-[0-9a-z]{4}-[0-9a-z]{8}")
    )
}

new_path("https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data-viewer?size=5000&offset=10000")
```

## Examples

```{r}
#| label: urlparse_example
urls <- c(
  "https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data/stats",
  "https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data-viewer?size=5000&offset=10000"
  )

urlparse::url_parse_v2(urls) |> 
  handle_na() |> 
  select(path, raw_query)
```

```{r}
#| label: httr2_path
httr2::url_parse(
  base_url = "https://data.cms.gov/data-api/v1/dataset", 
  url      = "9887a515-7552-4693-bf58-735c77af46d7/data-viewer") |> 
  httr2::url_modify_query(
    offset = 0, 
    limit  = 2000) |> 
  httr2::url_modify(path = "data-api/v1/9887a515-7552-4693-bf58-735c77af46d7/data/stats")
```

Re-setting part of the path:

```{r}
#| label: s7_setter
ex <- class_url(
  path = class_path(
    head = "data-api/v1/dataset",
    guid = "9887a515-7552-4693-bf58-735c77af46d7",
    tail = "data-viewer"))

ex

ex@path@tail <- "data/stats"

ex
```

With httr2:

```{r}
#| label: httr2_example
httr2::url_parse(
  base_url = "https://data.cms.gov/provider-data/", 
  url      = "api/1/datastore/query/mj5m-pzi6/0") |> 
  httr2::url_modify_query(
    offset = 0, 
    limit  = 2000)
```

With S7:

```{r}
#| label: httr2_to_S7
ex2 <- class_url(
  path = class_path(
    head = "/provider-data/api/1/datastore/query/",
    guid = "mj5m-pzi6",
    tail = "0"))

ex2
```

