---
title: "Backend"
editor_options: 
   chunk_output_type: console
---

```{r setup}
#| echo: false
#| message: false
#| warning: false
source("_common.R")
```

## Catalog

```{r}
#| label: catalog
main <- main_data_rcpp()

main
```

### Dataset

```{r}
#| label: dataset
main[["dataset"]] |> 
  tidyr::unnest_wider(contactPoint, names_sep = "_") |>
  tidyr::unnest_wider(publisher, names_sep = "_") |> 
  collapse::frename(remove_at_symbol) |> 
  remove_all_na() |> 
  purse()
```

### Distribution: Latest

```{r}
#| label: distribution_latest
main[["distribution_latest"]]
```

### Distribution: API

```{r}
#| label: distribution_api
main[["distribution_api"]]
```

### Distribution: CSV

```{r}
#| label: distribution_csv
main[["distribution_csv"]]
```

### `S7` Classes

#### `Distribution`

```{r}
#| label: Distribution_class
# Distribution <- new_class(
#   name = "Distribution",
#   properties = list(
#     
#   )
# )
```

#### `contactPoint`

```{r}
#| label: contactPoint_class
contactPoint <- new_class(
  name = "contactPoint",
  properties = list(
    type = new_property(class_character, default = "vcard:Contact"),
    fn = class_character,
    hasEmail = class_character
  )
)
```

#### `publisher`

```{r}
#| label: publisher_class
publisher <- new_class(
  name = "publisher",
  properties = list(
    type = new_property(class_character, default = "org:Organization"),
    name = new_property(class_character, default = "Centers for Medicare & Medicaid Services")
  )
)
```

#### `Dataset`

```{r}
#| label: Dataset_class
Dataset <- new_class(
  name = "Dataset",
  properties = list(
    type               = new_property(class_character, default = "dcat:Dataset"),
    accessLevel        = new_property(class_character, default = "public"),
    accrualPeriodicity = class_character,
    bureauCode         = new_property(class_character, default = "009:38"),
    contactPoint       = new_property(contactPoint, default = contactPoint()),
    describedBy        = class_character,
    dataQuality        = new_property(class_logical, default = TRUE),
    description        = class_character,
    distribution       = class_data.frame,
    identifier         = class_character,
    keyword            = class_character,
    landingPage        = class_character,
    language           = class_character,
    license            = class_character,
    modified           = class_Date,
    programCode        = new_property(class_character, default = "009:000"),
    publisher          = new_property(publisher, default = publisher()),
    references         = class_character,
    temporal           = class_character,
    theme              = class_character,
    title              = class_character,
    describedByType    = class_character
  ))

Dataset()
```

#### `Catalog`

```{r}
#| label: Catalog_class
Catalog <- new_class(
  name = "Catalog",
  properties = list(
    type        = new_property(class_character, default = "dcat:Catalog"),
    context     = new_property(class_character, default = "https://project-open-data.cio.gov/v1.1/schema/catalog.jsonld"),
    id          = class_character,
    conformsTo  = new_property(class_character, default = "https://project-open-data.cio.gov/v1.1/schema"),
    describedBy = new_property(class_character, default = "https://project-open-data.cio.gov/v1.1/schema/catalog.json"),
    dataset = new_property(Dataset, default = Dataset())
  )
)

Catalog()
```

## Dataset Object

```{r}
#| label: provider_data
provider_data() |> 
  purse()

provider_data() |>
  pull(title) |>
  cat(sep = "\n")
```

### National Downloadable File

```{r}
#| label: url_building
#| eval: false
httr2::url_parse("https://data.cms.gov/provider-data/api/1/datastore/query/")
    
# distro 

unclass(
  httr2::url_parse(
    "?limit=1&offset=100&count=true&results=true&schema=true&keys=true&format=json&rowIds=true"
    )
  )

ndf_identifier <- \(x) {
  kit::nswitch(x,
    "affiliations", "27ea-46a8",
    "clinicians", "mj5m-pzi6",
    default = NA_character_,
    nThread = 4L)
}

url_ndf <- httr2::url_parse(
  "https://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items/"
  )

url_tmp <- url_ndf |> 
  httr2::url_build() |> 
  httr2::request()

httr2::req_template(
  url_tmp, 
  "/{fname}?show-reference-ids=true", 
  fname = ndf_identifier("affiliations"))

url_ndf |> 
  httr2::url_build() |> 
  httr2::request() |> 
  httr2::req_url_path_append(
    ndf_identifier(fname)) |> 
  httr2::req_url_path_append("?show-reference-ids=true") |>
  httr2::req_perform() |>
  httr2::resp_body_json(check_type = FALSE, simplifyVector = TRUE)
```

```{r}
#| label: meta_ndf
meta_ndf <- \(fname) {
  
  stopifnot(curl::has_internet())
  
  x <- request(
    paste0(
      "https://data.cms.gov/",
      "provider-data/api/1/",
      "metastore/schemas/",
      "dataset/items/",
      switch(fname, 
             affiliations = "27ea-46a8", 
             clinicians   = "mj5m-pzi6", 
             stop("Invalid argument")),
    "?show-reference-ids=true")) |>
       req_perform() |>
       resp_body_json(
         check_type     = FALSE,
         simplifyVector = TRUE)
  
  distro <- gelm(gelm(x, "distribution"), "identifier")
  
  y <- request(
    paste0(
    "https://data.cms.gov/", 
    "provider-data/api/1/",
    "datastore/query/", 
    distro, 
    "?limit=1&offset=100&",
    "count=true&results=true&", 
    "schema=true&keys=true&",
    "format=json&rowIds=true")) |>
       req_perform() |>
       resp_body_json(
         check_type = FALSE,
         simplifyVector = TRUE)
  
  z <- gelm(gelm(gelm(y, "schema"), distro), "fields")
  
  list(
    title        = gelm(x, "title"),
    description  = gelm(x, "description"),
    identifier   = gelm(gelm(x, "identifier"), "identifier"),
    distribution = distro,
    issued       = gelm(x, "issued"), 
    modified     = gelm(x, "modified")[[1]], 
    released     = gelm(x, "released"),
    dimensions   = paste0(gelm(gelm(y, "count"), is.numeric), " x ", gelm(gelm(z, "record_number"), "length")), 
    fields       = names(z),
    site         = gelm(x, "landingPage"),
    csv          = gelm(gelm(gelm(x, "distribution"), "data"), "downloadURL", m = "df"),
    dictionary   = paste0("https://data.cms.gov/provider-data/sites/default/files/data_dictionaries/physician/DOC_Data_Dictionary.pdf"))
  
}
```

### Examples

```{r}
#| label: meta_affiliations
meta_ndf("affiliations") |> purse()
```


```{r}
#| label: meta_clinicians
meta_ndf("clinicians") |> purse()
```
