{
  "hash": "3f85bbbb07df4eb513a8b87b8eec1b0c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"API FAQ\"\neditor_options: \n   chunk_output_type: console\n---\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<a href=\"https://data.cms.gov/api-docs\" class=\"btn btn-outline-secondary\" role=\"button\" target=\"_blank\">\n<i class=\"bi bi-box-arrow-up-right\"></i>\nCMS API Docs\n</a>\n<a href=\"https://data.cms.gov/sites/default/files/2024-10/7ef65521-65a4-41ed-b600-3a0011f8ec4b/API%20Guide%20Formatted%201_6.pdf\" class=\"btn btn-outline-secondary\" role=\"button\" target=\"_blank\">\n<i class=\"bi bi-box-arrow-up-right\"></i>\nAPI FAQ\n</a>\n```\n\n:::\n:::\n\n\nWorking through the updated [API FAQ](https://data.cms.gov/sites/default/files/2024-10/7ef65521-65a4-41ed-b600-3a0011f8ec4b/API%20Guide%20Formatted%201_6.pdf) *(Oct 2024 - v1.6)*  for [data.CMS.gov](https://data.cms.gov/api-docs), extracting the relevant information\n\n# Accessing the Data Catalog\n\nThe [`data.json`](https://data.cms.gov/data.json) file is an [**Open Data**](https://resources.data.gov/resources/dcat-us/) catalog containing all available datasets. As new data is added, `data.json` is automatically updated.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata_json <- read_json_arrow(\n  file = \"https://data.cms.gov/data.json\",\n  col_select = c(\"dataset\"),\n    as_data_frame = TRUE) |> \n  to_duckdb()\n\ndata_json |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: ??\nColumns: 1\nDatabase: DuckDB v1.1.3 [Andrew@Windows 10 x64:R 4.4.2/:memory:]\n$ dataset <list> [<data.frame[139 x 22]>]\n```\n\n\n:::\n:::\n\n\n> **Note:** Removing `col_select = c(\"dataset\")` from the above call returns the following metadata:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n@context    <chr> https://project-open-data.cio.gov/v1.1/schema/catalog.jsonld\n@id         <chr> https://data.cms.gov/data.json\n@type       <chr> dcat:Catalog\nconformsTo  <chr> https://project-open-data.cio.gov/v1.1/schema\ndescribedBy <chr> https://project-open-data.cio.gov/v1.1/schema/catalog.json\ndataset     <list> [<data.frame[138 x 22]>]\n```\n\n\n:::\n:::\n\n\nWithin `data.json`, there is an array called `dataset`. One can search through this array using the dataset's `title`, such as `\"Payroll Based Journal Daily Nurse Staffing\"`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata_json |> \n  pull(dataset) |> \n  pluck(1) |> \n  filter(\n    grepl(\n      \"Payroll Based Journal Daily Nurse Staffing\", \n      title)) |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 22\n$ `@type`            <chr> \"dcat:Dataset\"\n$ accessLevel        <chr> \"public\"\n$ accrualPeriodicity <chr> \"R/P3M\"\n$ bureauCode         <list> \"009:38\"\n$ contactPoint       <df[,3]> <data.frame[1 x 3]>\n$ describedBy        <chr> \"https://data.cms.gov/resources/payroll-based-journ…\n$ dataQuality        <lgl> TRUE\n$ description        <chr> \"The Payroll Based Journal (PBJ) Nurse Staffing and…\n$ distribution       <list> [<data.frame[61 x 10]>]\n$ identifier         <chr> \"https://data.cms.gov/data-api/v1/dataset/7e0d53ba-…\n$ keyword            <list> <\"Medicare\", \"Original Medicare\", \"Hospitals & Fac…\n$ landingPage        <chr> \"https://data.cms.gov/quality-of-care/payroll-ba…\n$ language           <list> \"en-US\"\n$ license            <chr> \"https://www.usa.gov/government-works\"\n$ modified           <dttm> 2024-10-31\n$ programCode        <list> \"009:000\"\n$ publisher          <df[,2]> <data.frame[1 x 2]>\n$ references         <list> \"https://data.cms.gov/resources/payroll-based-journ…\n$ temporal           <chr> \"2017-01-01/2024-06-30\"\n$ theme              <list> \"Medicare\"\n$ title              <chr> \"Payroll Based Journal Daily Nurse Staffing\"\n$ describedByType    <chr> NA\n```\n\n\n:::\n:::\n\n\nWithin `dataset`, there is an array called `distribution` which contains all dataset versions, in all available formats:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndistribution <- data_json |> \n  pull(dataset) |> \n  pluck(1) |> \n  select(distribution) |> \n  unnest(distribution)\n\ndistribution\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,897 × 10\n   `@type`   format accessURL resourcesAPI description title modified           \n   <chr>     <chr>  <chr>     <chr>        <chr>       <chr> <dttm>             \n 1 dcat:Dis… API    https://… https://dat… latest      Acco… 2024-01-29 00:00:00\n 2 dcat:Dis… <NA>   <NA>      https://dat… <NA>        Acco… 2024-01-29 00:00:00\n 3 dcat:Dis… API    https://… https://dat… <NA>        Acco… 2024-01-29 00:00:00\n 4 dcat:Dis… <NA>   <NA>      https://dat… <NA>        Acco… 2023-03-06 00:00:00\n 5 dcat:Dis… API    https://… https://dat… <NA>        Acco… 2023-03-06 00:00:00\n 6 dcat:Dis… <NA>   <NA>      https://dat… <NA>        Acco… 2022-01-26 00:00:00\n 7 dcat:Dis… API    https://… https://dat… <NA>        Acco… 2022-01-26 00:00:00\n 8 dcat:Dis… <NA>   <NA>      https://dat… <NA>        Acco… 2022-01-27 00:00:00\n 9 dcat:Dis… API    https://… https://dat… <NA>        Acco… 2022-01-27 00:00:00\n10 dcat:Dis… <NA>   <NA>      https://dat… <NA>        Acco… 2022-01-27 00:00:00\n# ℹ 3,887 more rows\n# ℹ 3 more variables: temporal <chr>, downloadURL <chr>, mediaType <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\nfuimus::describe2(distribution[c(-7)])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 13\n  column    type       n   min   mean   med   max   iqr    sd   mad distribution\n  <chr>     <chr>  <int> <int>  <dbl> <dbl> <int> <dbl> <dbl> <dbl> <chr>       \n1 @type     <chr>  66249    17  17       17    17     0  0      0   ▇           \n2 format    <chr>   5214     3   3        3     3     0  0      0   ▇           \n3 accessURL <chr> 142516    82  82       82    82     0  0      0   ▇           \n4 resource… <chr> 339039    87  87       87    87     0  0      0   ▇           \n5 descript… <chr>    672     6   6        6     6     0  0      0   ▇           \n6 title     <chr> 221787    27  56.9     60   163    25 17.5   16.3 ▁▅▃▅▇▂▁▁▁▁▁…\n7 temporal  <chr>  81837    21  21       21    21     0  0      0   ▇           \n8 download… <chr> 246470    62 114.     116   207    23 20.6   19.3 ▂▂▇▇▁▁▁▁    \n9 mediaType <chr>  21346     8   9.89     8    24     7  3.32   0   ▇▁▁▂▁▁▁▁    \n# ℹ 2 more variables: uniq <int>, top <chr>\n```\n\n\n:::\n:::\n\n## Formats\n\n   * __description__ `\"latest\"` is a URL that always point to the latest data\n   * __mediaType__ `\"text/csv\"` is a downloadable CSV file\n   * __mediaType__ `\"application/zip\"` is a downloadable ZIP file\n   * __format__ `\"API\"` is an API endpoint\n   * Remaining entries provide references to the data at fixed points in time, listed in descending order by date.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndistribution |> \n  count(description, \n        format, \n        mediaType) #|> \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n  description format mediaType                    n\n  <chr>       <chr>  <chr>                    <int>\n1 latest      API    <NA>                       112\n2 <NA>        API    <NA>                      1626\n3 <NA>        <NA>   application/vnd.ms-excel    21\n4 <NA>        <NA>   application/zip            534\n5 <NA>        <NA>   text/csv                  1604\n```\n\n\n:::\n\n```{.r .cell-code}\n  # gt() |> \n  # gtExtras::gt_theme_538() |> \n  # tab_options(\n  #   quarto.disable_processing = TRUE,\n  #   quarto.use_bootstrap = FALSE)\n```\n:::\n\n\nFor example, the URL in the following example will *always* point to the **Payroll Based Journal Daily Nurse Staffing** data from **Q2 2021**:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"https://data.cms.gov/data-api/v1/dataset/d10d792e-ea6e-4145-8512-34efbc1be04b/data\"\nstaffing <- distribution |> \n  filter(\n    grepl(\"Payroll Based Journal Daily Nurse Staffing\", title),\n    format == \"API\",\n    grepl(\"^2021-04\", temporal)) |> \n  pull(accessURL) |> \n  request() |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nglimpse(head(staffing, 1))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 33\n$ PROVNUM          <chr> \"015010\"\n$ PROVNAME         <chr> \"COOSA VALLEY HEALTHCARE CENTER\"\n$ CITY             <chr> \"SYLACAUGA\"\n$ STATE            <chr> \"AL\"\n$ COUNTY_NAME      <chr> \"Talladega\"\n$ COUNTY_FIPS      <chr> \"121\"\n$ CY_Qtr           <chr> \"2021Q2\"\n$ WorkDate         <chr> \"20210401\"\n$ MDScensus        <chr> \"70\"\n$ Hrs_RNDON        <chr> \"8\"\n$ Hrs_RNDON_emp    <chr> \"8\"\n$ Hrs_RNDON_ctr    <chr> \"0\"\n$ Hrs_RNadmin      <chr> \"48.25\"\n$ Hrs_RNadmin_emp  <chr> \"48.25\"\n$ Hrs_RNadmin_ctr  <chr> \"0\"\n$ Hrs_RN           <chr> \"32\"\n$ Hrs_RN_emp       <chr> \"32\"\n$ Hrs_RN_ctr       <chr> \"0\"\n$ Hrs_LPNadmin     <chr> \"0\"\n$ Hrs_LPNadmin_emp <chr> \"0\"\n$ Hrs_LPNadmin_ctr <chr> \"0\"\n$ Hrs_LPN          <chr> \"63.25\"\n$ Hrs_LPN_emp      <chr> \"63.25\"\n$ Hrs_LPN_ctr      <chr> \"0\"\n$ Hrs_CNA          <chr> \"189.5\"\n$ Hrs_CNA_emp      <chr> \"189.5\"\n$ Hrs_CNA_ctr      <chr> \"0\"\n$ Hrs_NAtrn        <chr> \"0\"\n$ Hrs_NAtrn_emp    <chr> \"0\"\n$ Hrs_NAtrn_ctr    <chr> \"0\"\n$ Hrs_MedAide      <chr> \"0\"\n$ Hrs_MedAide_emp  <chr> \"0\"\n$ Hrs_MedAide_ctr  <chr> \"0\"\n```\n\n\n:::\n:::\n\n## Temporal Data\n\nDatasets with multiple historical versions available will have a `temporal` field in the `distribution` array of the `data.json` file which will indicate the time period.\n\n**Format**: `yyyy-mm-dd/yyyy-mm-dd`\n\nThe following example finds the API link for the [2017 Medicare Inpatient Hospitals - by Provider and Service Data](https://data.cms.gov/provider-summary-by-type-of-service/medicare-inpatienthospitals/medicare-inpatient-hospitals-by-provider-and-service):\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndistribution |> \n  filter(\n    grepl(\"Medicare Inpatient Hospitals - by Provider and Service\", title), \n    format == \"API\",\n    temporal == \"2017-01-01/2017-12-31\") |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 10\n$ `@type`      <chr> \"dcat:Distribution\"\n$ format       <chr> \"API\"\n$ accessURL    <chr> \"https://data.cms.gov/data-api/v1/dataset/b61ba5eb-021b-4…\n$ resourcesAPI <chr> \"https://data.cms.gov/data-api/v1/dataset-resources/b61ba…\n$ description  <chr> NA\n$ title        <chr> \"Medicare Inpatient Hospitals - by Provider and Service :…\n$ modified     <dttm> 2023-05-10\n$ temporal     <chr> \"2017-01-01/2017-12-31\"\n$ downloadURL  <chr> NA\n$ mediaType    <chr> NA\n```\n\n\n:::\n:::\n\n## Methods: Same Data, Different Output\n\nThere are two methods of accessing the latest data. \n\nBoth result in a URL pointing to the most recent version of the dataset. This URL is canonical, i.e., will not change as new versions are added. \n\nFor this reason, it is _recommended to **always** start with the **`data.json` object** as opposed to hardcoding any URL_.\n\n### Method 1: Standard JSON\n\n```r\n<data_json>\n    => <dataset> \n    => <distribution> \n    -> $(description == \"latest\")\n    -> $(accessURL)\n```\nUse the `distribution` with the \"latest\" `description`. This URL returns **standard JSON**.\n\n> For example, this URL for Opt Out Affidavits is \n> `\"https://data.cms.gov/dataapi/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data\"` \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\njson_standard <- distribution |> \n  filter(\n    grepl(\"Order and Referring\", title),\n    description == \"latest\")\n\n\njson_standard |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 10\n$ `@type`      <chr> \"dcat:Distribution\"\n$ format       <chr> \"API\"\n$ accessURL    <chr> \"https://data.cms.gov/data-api/v1/dataset/c99b5865-1119-4…\n$ resourcesAPI <chr> \"https://data.cms.gov/data-api/v1/dataset-resources/c99b5…\n$ description  <chr> \"latest\"\n$ title        <chr> \"Order and Referring : 2024-12-20\"\n$ modified     <dttm> 2024-12-20\n$ temporal     <chr> \"2024-12-08/2024-12-14\"\n$ downloadURL  <chr> NA\n$ mediaType    <chr> NA\n```\n\n\n:::\n\n```{.r .cell-code}\njson_standard[[\"accessURL\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"https://data.cms.gov/data-api/v1/dataset/c99b5865-1119-4436-bb80-c5af2773ea1f/data\"\n```\n\n\n:::\n\n```{.r .cell-code}\njson_standard[[\"resourcesAPI\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"https://data.cms.gov/data-api/v1/dataset-resources/c99b5865-1119-4436-bb80-c5af2773ea1f\"\n```\n\n\n:::\n:::\n\n### Method 2: JSON:API\n\n```r\n<data_json>\n    => <dataset> \n    -> $(title == \"Order and Referring\")\n    -> $(identifier)\n```\n\nUse the URL in the `identifier` field. \n\nThis URL returns JSON in the **JSON:API** form. It has a different response structure that includes metadata about the dataset. Otherwise it is identical to Method 1. \n\n> For example, this URL for Opt Out Affidavits: \n> `\"https://data.cms.gov/dataapi/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data-viewer\"`\n\nThe following example finds the API link for the latest [Order and Referring](https://data.cms.gov/provider-characteristics/medicare-provider-supplierenrollment/order-and-referring) Data:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\njson_api <- data_json |> \n  pull(dataset) |> \n  pluck(1) |> \n  dplyr::tibble() |> \n  filter(grepl(\"Order and Referring\", title))\n\njson_api |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1\nColumns: 22\n$ `@type`            <chr> \"dcat:Dataset\"\n$ accessLevel        <chr> \"public\"\n$ accrualPeriodicity <chr> \"R/P3.5D\"\n$ bureauCode         <list> \"009:38\"\n$ contactPoint       <df[,3]> <data.frame[1 x 3]>\n$ describedBy        <chr> \"https://data.cms.gov/resources/order-and-referring…\n$ dataQuality        <lgl> TRUE\n$ description        <chr> \"The Order and Referring dataset provides informati…\n$ distribution       <list> [<data.frame[325 x 10]>]\n$ identifier         <chr> \"https://data.cms.gov/data-api/v1/dataset/c99b5865-…\n$ keyword            <list> <\"Medicare\", \"Original Medicare\", \"Provider Enroll…\n$ landingPage        <chr> \"https://data.cms.gov/provider-characteristics/m…\n$ language           <list> \"en-US\"\n$ license            <chr> \"https://www.usa.gov/government-works\"\n$ modified           <dttm> 2024-12-20\n$ programCode        <list> \"009:000\"\n$ publisher          <df[,2]> <data.frame[1 x 2]>\n$ references         <list> \"https://data.cms.gov/resources/order-and-referring…\n$ temporal           <chr> \"2023-05-21/2024-12-14\"\n$ theme              <list> \"Medicare\"\n$ title              <chr> \"Order and Referring\"\n$ describedByType    <chr> NA\n```\n\n\n:::\n\n```{.r .cell-code}\njson_api$identifier\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"https://data.cms.gov/data-api/v1/dataset/c99b5865-1119-4436-bb80-c5af2773ea1f/data-viewer\"\n```\n\n\n:::\n:::\n\n--------------------------------------------------------------------------------\n\n# Pagination\n\nThe default is to provide the first 1,000 rows per request. However, there is an ability to increase the limit to 5,000 rows per request. You can use pagination to retrieve the entire dataset. \n\nFor example, with our [Opt Out Affidavits]() dataset:\n\n   1. Start with the following request to get the number of rows:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrequest(\"https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data/stats\") |>\n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$found_rows\n[1] 47984\n\n$total_rows\n[1] 47984\n```\n\n\n:::\n:::\n      \n   2. Make a request for the *first* 5,000 rows:\n      \n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrequest(\"https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=0\") |>\n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE) |> \n  dplyr::tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 13\n   `First Name` `Last Name` NPI        Specialty          Optout Effective Dat…¹\n   <chr>        <chr>       <chr>      <chr>              <chr>                 \n 1 Jonathan     Raines      1720444581 Psychiatry         01/30/1998            \n 2 Kevin        Carlson     1811981905 Internal Medicine  07/01/2010            \n 3 David        Altchek     1114974490 Orthopedic Surgery 07/01/2012            \n 4 Bruce        Shapiro     1548271240 Psychiatry         12/28/2015            \n 5 Alan         Mcfarland   1861482408 Clinical Psycholo… 01/01/2018            \n 6 Heather      Raznick     1689838914 Clinical Social W… 06/01/2010            \n 7 Laura        Brenner     1235359019 Psychiatry         05/01/2006            \n 8 Phyllis      Tuthill     1003924556 Oral Surgery       02/16/2012            \n 9 Firas        Katabi      1366540924 Oral Surgery       10/01/2015            \n10 Geralyn      Carducci    1790869717 Psychiatry         04/28/1998            \n# ℹ 4,990 more rows\n# ℹ abbreviated name: ¹​`Optout Effective Date`\n# ℹ 8 more variables: `Optout End Date` <chr>,\n#   `First Line Street Address` <chr>, `Second Line Street Address` <chr>,\n#   `City Name` <chr>, `State Code` <chr>, `Zip code` <chr>,\n#   `Eligible to Order and Refer` <chr>, `Last updated` <chr>\n```\n\n\n:::\n:::\n      \n   3. Make a request for the *next* 5,000 rows:\n   \n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrequest(\"https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=5000\") |>\n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE) |> \n  dplyr::tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 13\n   `First Name` `Last Name` NPI        Specialty          Optout Effective Dat…¹\n   <chr>        <chr>       <chr>      <chr>              <chr>                 \n 1 Katherine    Whipple     1184839557 Clinical Psycholo… 08/29/2013            \n 2 Bret         Jacobson    1790893956 Oral Surgery       06/28/2014            \n 3 Jeffrey      Zeller      1730172248 Dentist            09/28/2022            \n 4 Lorna        Benjamin    1760572390 Clinical Psycholo… 07/01/2014            \n 5 Kenneth      Kloss       1710190038 Clinical Social W… 04/01/2014            \n 6 Heidi        Rendall     1497900609 Family Practice    04/09/2014            \n 7 Sam          Goodman     1083848246 Psychiatry         05/01/2013            \n 8 Nancy        Goodman     1114267952 Clinical Psycholo… 08/01/2014            \n 9 Marilyn      Meyers      1912320797 Clinical Psycholo… 10/01/2016            \n10 Christine    Salter      1316024540 Family Practice    06/19/2014            \n# ℹ 4,990 more rows\n# ℹ abbreviated name: ¹​`Optout Effective Date`\n# ℹ 8 more variables: `Optout End Date` <chr>,\n#   `First Line Street Address` <chr>, `Second Line Street Address` <chr>,\n#   `City Name` <chr>, `State Code` <chr>, `Zip code` <chr>,\n#   `Eligible to Order and Refer` <chr>, `Last updated` <chr>\n```\n\n\n:::\n:::\n\n   4. Continue increasing the offset until you reach the count from step 1\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrequest(\"https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=10000\") |>\n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE) |> \n  dplyr::tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 13\n   `First Name` `Last Name`   NPI        Specialty        Optout Effective Dat…¹\n   <chr>        <chr>         <chr>      <chr>            <chr>                 \n 1 Steven       Glickman      1942372362 Dentist          11/30/2015            \n 2 David        Christensen   1255403606 Dentist          11/30/2015            \n 3 Michael      Ilardi        1558440842 Dentist          12/10/2015            \n 4 Frank        Shallenberger 1346300035 Internal Medici… 01/01/2016            \n 5 John         Lu            1790901551 Dentist          12/22/2015            \n 6 Richard      Gryzmolowicz  1942426606 Dentist          12/20/2015            \n 7 Lee          Mendiola      1427099431 Psychiatry       01/01/2016            \n 8 Mark         Le Felt       1861525297 Dentist          12/23/2015            \n 9 Marvin       Kaufman       1073534566 Dentist          12/28/2015            \n10 Robbie       Wright        1982881488 Psychiatry       01/01/2016            \n# ℹ 4,990 more rows\n# ℹ abbreviated name: ¹​`Optout Effective Date`\n# ℹ 8 more variables: `Optout End Date` <chr>,\n#   `First Line Street Address` <chr>, `Second Line Street Address` <chr>,\n#   `City Name` <chr>, `State Code` <chr>, `Zip code` <chr>,\n#   `Eligible to Order and Refer` <chr>, `Last updated` <chr>\n```\n\n\n:::\n:::\n\n## Pagination Example\n\nPaginates through the [Opt Out Affidavits](https://data.cms.gov/provider-characteristics/medicare-provider-supplier-enrollment/opt-out-affidavits) data:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noptout_n <- distribution |> \n  filter(\n    grepl(\"Opt Out Affidavits : \", title), \n    format == \"API\",\n    description == \"latest\") |> \n  str_glue_data(\"{accessURL}/stats\") |> \n  request() |> \n  req_perform() |> \n  resp_body_json()\n\noptout_n$total_rows / 5000\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.6\n```\n\n\n:::\n\n```{.r .cell-code}\n# req_perform_iterative()\n```\n:::\n\n## Find the Number of Rows\n\nYou can use the `data-viewer/stats` or `data/stats` endpoints i.e., `https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data-viewer/stats` or `https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data/stats`.\n\n\n# Download CSV/ZIP versions\n\n   1. Start with a request to the `data.json`. \n   2. Find the dataset within the catalog by matching the `title` with the name of the dataset.\n   3. Within each dataset, there is an array called distribution which will contain all the versions of the data in all available formats for each version.\n   4. The most recent release will be at the top of the distribution list, there is also a temporal field which can be used to find earlier releases.\n   5. Datasets are available as either CSV or ZIP files; this will be designated in the `mediaType` field. Please review the distribution list to determine what formats are available for the dataset.\n   6. The `downloadURL` will provide a direct download link for the data.\n\n## CSV Example\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\norderrefer_url <- distribution |> \n  filter(\n    grepl(\"Order and Referring\", title), \n    mediaType == \"text/csv\",\n    modified == max(modified)) |> \n  pull(downloadURL)\n  \norderrefer_csv <- read_csv_arrow(\n  file = orderrefer_url, \n  as_data_frame = TRUE) |> \n  to_duckdb()\n\n# approx 2 million rows\norderrefer_csv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Source:   table<arrow_002> [?? x 8]\n# Database: DuckDB v1.1.3 [Andrew@Windows 10 x64:R 4.4.2/:memory:]\n          NPI LAST_NAME     FIRST_NAME PARTB DME   HHA   PMD   HOSPICE\n        <int> <chr>         <chr>      <chr> <chr> <chr> <chr> <chr>  \n 1 1558467555 .MCINDOE      THOMAS     N     Y     N     Y     N      \n 2 1770667479 A             SCOTT      N     Y     N     Y     N      \n 3 1417051921 A BELLE       N          Y     Y     Y     Y     N      \n 4 1356025894 A FOLEY       MEGAN      Y     Y     Y     Y     N      \n 5 1972040137 A NOVOTNY     ELIZABETH  Y     Y     Y     Y     N      \n 6 1760465553 A SATTAR      MUHAMMAD   Y     Y     Y     Y     Y      \n 7 1295400745 A'NEAL        BROGAN     Y     Y     N     N     N      \n 8 1265446264 A'VANT FOWLER CATHERINE  Y     Y     N     N     N      \n 9 1700562584 AAB           BAILEY     Y     Y     Y     N     Y      \n10 1205257284 AAB           KATIE      Y     Y     N     N     N      \n# ℹ more rows\n```\n\n\n:::\n:::\n\n## ZIP Example\n\n_CMS Summary Statistics/COVID data -> Likely not relevant to package scope_\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# providers_url <- distribution |> \n#   filter(mediaType == \"application/zip\", modified == max(modified), .by = resourcesAPI) |> \n#   count(title)\n```\n:::\n\n# Additional Resources\n\nThe data.json has been updated to include a resources API that allows you to easily find the download URL for resources, which are supplemental documents to the main dataset.\n1. Start with a request to the data.json. Always start with the catalog, do not hard code or try to predict the download URL. The catalog will update automatically when new data is available.\n2. Find the dataset within the catalog by matching the “title” with the name of the dataset.\n3. Within each dataset, there is an array called distribution which will contain all the versions of the data in all available formats for each version.\n4. The most recent release will be at the top of the distribution list, there is also a “temporal” field which can be used to find earlier releases.\n5. The “resourcesAPI” is a secondary API endpoint from data.json that will provide a link for the resources connected to the dataset and the download URL for the supporting documents.\n6. Using the link stored in the “resourcesAPI”, limit by the “name” of the resource you want to download. The name of the resource may change between versions.\n7. The “downloadURL” will provide a direct download link for the resource.\n\n## Resource Example\n\nResource File Download URL Link for Latest Dataset Code Example\n\n-------------------------------------------------------------------------------\n\n## Schema\n\n```r\n<data.json>\n  |--@context\n  |--@id\n  |--@type\n  |--conformsTo\n  |--describedBy\n  |==<dataset>\n  |    |--@type\n  |    |--accessLevel\n  |    |--accrualPeriodicity\n  |    |--bureauCode\n  |    |--contactPoint\n  |    |--describedBy\n  |    |--dataQuality\n  |    |--description\n  |    |==<distribution>\n  |    |    |--@type\n  |    |    |--format\n  |    |    |--accessURL\n  |    |    |--resourcesAPI\n  |    |    |--description\n  |    |    |--title\n  |    |    |--modified\n  |    |    |--temporal\n  |    |    |--downloadURL\n  |    |    |--mediaType\n  |    |--identifier\n  |    |--keyword\n  |    |--landingPage\n  |    |--language\n  |    |--license\n  |    |--modified\n  |    |--programCode\n  |    |--publisher\n  |    |--references\n  |    |--temporal\n  |    |--theme\n  |    |--title\n  |____|--describedByType\n```\n",
    "supporting": [
      "faq_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}