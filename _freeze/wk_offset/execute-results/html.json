{
  "hash": "10343762764618a5048767956c5e1025",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Pagination and Offset Sequencing\"\neditor_options: \n   chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n## Pagination Example 1\n\n::: {.cell}\n\n```{.r .cell-code}\nbase <- request(\"https://data.cms.gov/data-api/v1/dataset\") |> \n  req_url_path_append(\"9887a515-7552-4693-bf58-735c77af46d7\") |> \n  req_url_path_append(\"data\")\n\nbase\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n<httr2_request>\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nGET\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBody: empty\n```\n\n\n:::\n\n```{.r .cell-code}\nstats <- base |> \n  req_url_path_append(\"stats\")\n\nstats\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n<httr2_request>\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nGET\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data/stats\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBody: empty\n```\n\n\n:::\n\n```{.r .cell-code}\nstats <- stats |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nstats |> purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- $found_rows i1  47984\n- $total_rows i1  47984\n```\n\n\n:::\n\n```{.r .cell-code}\noffset_sequence(\n  nobs = stats$found_rows, \n  limit = 5000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]     0  5001 10001 15001 20001 25001 30001 35001 40001 45001 47984\n```\n\n\n:::\n\n```{.r .cell-code}\nglue::glue(\n  \"{base$url}\",\n  \"?size=5000&\",\n  \"offset=\",\n  \"{offset_sequence(nobs = stats$found_rows, limit = 5000)}\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=0\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=5001\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=10001\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=15001\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=20001\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=25001\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=30001\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=35001\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=40001\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=45001\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=47984\n```\n\n\n:::\n:::\n\n## Pagination Example 2\n\nSelect Dataset\n\n::: {.cell}\n\n```{.r .cell-code}\ndistribution <- read_json_arrow(\n  file = \"https://data.cms.gov/data.json\",\n  col_select = c(\"dataset\"),\n  as_data_frame = TRUE) |> \n  to_duckdb() |> \n  pull(dataset) |> \n  pluck(1) |> \n  select(distribution) |> \n  as_tibble() |> \n  unnest(distribution) |> \n  rename_with(remove_at_symbol) |> \n  filter(format      == \"API\", \n         description == \"latest\") |> \n  handle_na()\n\ndistribution |> \n  filter(grepl(\"Enrollment\", title)) |> \n  pull(title)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Federally Qualified Health Center Enrollments : 2024-10-01\"      \n[2] \"Home Health Agency Enrollments : 2024-10-01\"                     \n[3] \"Hospice Enrollments : 2024-10-01\"                                \n[4] \"Hospital Enrollments : 2024-12-01\"                               \n[5] \"Medicare Fee-For-Service Public Provider Enrollment : 2024-09-01\"\n[6] \"Rural Health Clinic Enrollments : 2024-10-01\"                    \n[7] \"Skilled Nursing Facility Enrollments : 2024-12-01\"               \n[8] \"Medicare Monthly Enrollment : 2024-09-01\"                        \n```\n\n\n:::\n\n```{.r .cell-code}\naccessURL <- distribution |> \n  filter(grepl(\"Opt Out Affidavits : \", title)) |> \n  pull(accessURL)\n\naccessURL\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data\"\n```\n\n\n:::\n:::\n\nFormat Query\n\n::: {.cell}\n\n```{.r .cell-code}\nquery <- glue::glue(\n  'c(\n    \"filter[id-{FID}][path]\"  = \"{PATH}\",\n    \"filter[id-{FID}][value]\" = \"{VALUE}\"\n  )', \n  FID = 1, \n  PATH = \"State Code\", \n  VALUE = \"CA\")\n\nquery\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nc(\n  \"filter[id-1][path]\"  = \"State Code\",\n  \"filter[id-1][value]\" = \"CA\"\n)\n```\n\n\n:::\n\n```{.r .cell-code}\nquery <- query |> \n  rlang::parse_expr() |> \n  rlang::eval_bare()\n\nquery\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n filter[id-1][path] filter[id-1][value] \n       \"State Code\"                \"CA\" \n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqueryurl <- accessURL |> \n  request() |> \n  req_url_query(size = 5000, !!!query)\n\nnresults <- queryurl |> \n  req_url_path_append(\"stats\") |> \n  req_perform() |> \n  resp_body_json() |> \n  gelm(\"found\")\n\nnresults\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9288\n```\n\n\n:::\n\n```{.r .cell-code}\nreqs <- purrr::map(\n  glue::glue(\n    \"{url}\", \n    \"offset={off}\", \n    url = queryurl$url, \n    off = offset_sequence(nobs = nresults, limit = 5000)), \n  httr2::request)\n\nres <- httr2::req_perform_parallel(reqs) |> \n  httr2::resps_successes()\n\nres[[1]] |> \n  resp_body_json(simplifyVector = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nlist()\n```\n\n\n:::\n\n```{.r .cell-code}\nqueryurl |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE) |> \n  tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 13\n   `First Name` `Last Name` NPI        Specialty          Optout Effective Dat…¹\n   <chr>        <chr>       <chr>      <chr>              <chr>                 \n 1 Namir        Damluji     1124116793 Psychiatry         07/26/2020            \n 2 Lesley       Macarthur   1073604054 Psychiatry         04/05/2012            \n 3 Sharon       Bae         1346211372 Internal Medicine  06/01/2012            \n 4 Albert       Fuchs       1013964386 Internal Medicine  07/01/2012            \n 5 Linda        Schaffer    1740495043 Psychiatry         06/14/2012            \n 6 Charles      Schaffer    1114132313 Psychiatry         06/14/2012            \n 7 Cheri        Adrian      1366597833 Clinical Psycholo… 05/25/2012            \n 8 Richard      Wolf        1891713079 Internal Medicine  08/16/2012            \n 9 Robert       Woods       1881601029 Psychiatry         06/11/2012            \n10 Shela        Fisk        1417084583 Clinical Psycholo… 06/20/2012            \n# ℹ 4,990 more rows\n# ℹ abbreviated name: ¹​`Optout Effective Date`\n# ℹ 8 more variables: `Optout End Date` <chr>,\n#   `First Line Street Address` <chr>, `Second Line Street Address` <chr>,\n#   `City Name` <chr>, `State Code` <chr>, `Zip code` <chr>,\n#   `Eligible to Order and Refer` <chr>, `Last updated` <chr>\n```\n\n\n:::\n:::\n\n",
    "supporting": [
      "wk_offset_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}