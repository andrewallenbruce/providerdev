{
  "hash": "00c539ea5426fe8af47993c1c386c128",
  "result": {
    "engine": "knitr",
    "markdown": "# Query {#sec-querying}\n\n\n\n## Quick Query\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- pro_endpoint(\"asc_facility\")\n\n`%|||%` <- function(x, y) {\n  if (!is.null(x)) y else NULL\n}\n\ncli_query <- function(x) {\n  x <- unlist(x)\n  glue_col(\"{silver {names(x)}=}{red {bold {unname(x)}}}\") |> glue_collapse(sep = \"&\")\n}\n\nquick_query_ <- new_generic(\"quick_query_\", \"x\")\n\nmethod(quick_query_, providertwo:::class_endpoint) <- function(x, query = NULL) {\n  n <- providertwo:::identifier_(x) |>\n    request() |>\n    req_url_query(\n      count   = \"true\",\n      format  = \"json\",\n      keys    = \"true\",\n      results = \"false\",\n      rowIds  = \"false\",\n      schema  = \"false\",\n      offset  = 0L,\n      limit   = 1L,\n      !!!query\n    ) |>\n    providertwo:::perform_simple() |>\n    _$count\n  \n  if (n == 0) {\n    cli::cli_alert_danger(\"Query {.var {cli_query(query)}} returned {.emph 0} results.\", wrap = TRUE)\n    return(invisible(NULL))\n  }\n  \n  if (n <= providertwo:::limit_(x)) {\n    cli::cli_alert_success(\"Returning {.emph {n}} results...\", wrap = TRUE)\n    return(\n      providertwo:::identifier_(x) |>\n        map(\n          function(i)\n            request(i) |>\n            req_url_query(\n              count   = \"false\",\n              format  = \"json\",\n              keys    = \"true\",\n              results = \"true\",\n              rowIds  = \"false\",\n              schema  = \"false\",\n              offset  = 0L,\n              limit   = providertwo:::limit_(x),\n              !!!query\n            )\n        ) |>\n        req_perform_parallel(on_error = \"continue\") |>\n        map(\n          function(x)\n            providertwo:::parse_string(x, query = \"results\") |>\n            as_tbl() |>\n            providertwo:::map_na_if()\n        ) |>\n        pluck(1) |>\n        providertwo:::name_fields_(x)\n    )\n  }\n  \n  if (n > providertwo:::limit_(x)) {\n    cli::cli_alert_danger(\n      \"UNIMPLEMENTED: Query returned {.emph {n}} results, exceeding the limit of {providertwo:::limit_(x)}.\",\n      wrap = TRUE\n    )\n    return(invisible(NULL))\n  }\n}\n\nq1 <- list(\n  \"conditions[0][property]\" = \"state\",\n  \"conditions[0][operator]\" = \"=\",\n  \"conditions[0][value]\" = \"NY\"\n)\n\nq2 <- list(\n  \"conditions[0][property]\" = \"state\",\n  \"conditions[0][operator]\" = \"IN\",\n  \"conditions[0][value][1]\" = \"CA\",\n  \"conditions[0][value][2]\" = \"GA\",\n  \"conditions[0][value][3]\" = \"NY\"\n)\n\nq3 <- list(\n  \"conditions[0][property]\" = \"asc2_rate\",\n  \"conditions[0][operator]\" = \"<\",\n  \"conditions[0][value]\" = \"0.02\"\n)\n\nr1 <- quick_query_(pro_endpoint(\"asc_facility\"), query = q1)\n```\n\n<pre class=\"r-output\"><code><span style='color: #00BB00;'>✔</span> Returning <span style='font-style: italic;'>326</span> results...\n</code></pre>\n\n```{.r .cell-code}\nr1 |> str()\n```\n\n<pre class=\"r-output\"><code>tibble [326 × 50] (S3: tbl_df/tbl/data.frame)\n $ facility_name             : chr [1:326] \"RENAL FOCUS ASC LLC DBA RENAL FOC\"..\n $ facility_id               : chr [1:326] \"33C0001208\" \"33C0001208\" \"33C0001\"..\n $ npi                       : chr [1:326] \"1003575218\" \"1003575218\" \"1023551\"..\n $ citytown                  : chr [1:326] \"PLAINVIEW\" \"PLAINVIEW\" \"BRONX\" \"B\"..\n $ state                     : chr [1:326] \"NY\" \"NY\" \"NY\" \"NY\" ...\n $ zip_code                  : chr [1:326] \"11803\" \"11803\" \"10453\" \"10453\" ...\n $ year                      : chr [1:326] \"2023\" \"2024_Q2\" \"2023\" \"2024_Q2\" ...\n $ asc1_rate                 : chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc1_footnote             : chr [1:326] \"5\" \"5\" \"5\" \"5\" ...\n $ asc2_rate                 : chr [1:326] \"0.03\" \"N/A\" \"0.03\" \"N/A\" ...\n $ asc2_footnote             : chr [1:326] NA \"5\" NA \"5\" ...\n $ asc3_rate                 : chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc3_footnote             : chr [1:326] \"5\" \"5\" \"5\" \"5\" ...\n $ asc4_rate                 : chr [1:326] \"0.17\" \"N/A\" \"0.06\" \"N/A\" ...\n $ asc4_footnote             : chr [1:326] NA \"5\" NA \"5\" ...\n $ asc9_rate                 : chr [1:326] \"N/A\" \"N/A\" \"82.41\" \"N/A\" ...\n $ asc9_footnote             : chr [1:326] \"5\" \"5\" NA \"5\" ...\n $ asc11_rate                : chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc11_footnote            : chr [1:326] \"5\" \"5\" \"5\" \"5\" ...\n $ asc12_total_cases         : chr [1:326] \"N/A\" \"N/A\" \"111\" \"N/A\" ...\n $ asc12_performance_category: chr [1:326] \"N/A\" \"N/A\" \"No Different Than the\"..\n $ asc12_rshv_rate           : chr [1:326] \"N/A\" \"N/A\" \"10.3\" \"N/A\" ...\n $ asc12_interval_lower_limit: chr [1:326] \"N/A\" \"N/A\" \"7.1\" \"N/A\" ...\n $ asc12_interval_upper_limit: chr [1:326] \"N/A\" \"N/A\" \"14.8\" \"N/A\" ...\n $ asc12_footnote            : chr [1:326] \"5\" \"5\" NA \"5\" ...\n $ asc13_rate                : chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc13_footnote            : chr [1:326] \"5\" \"5\" \"5\" \"5\" ...\n $ asc14_rate                : chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc14_footnote            : chr [1:326] \"5\" \"5\" \"5\" \"5\" ...\n $ asc17_total_cases         : chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc17_performance_category: chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc17_rshv_rate           : chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc17_interval_lower_limit: chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc17_interval_upper_limit: chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc17_footnote            : chr [1:326] \"5\" \"5\" \"5\" \"5\" ...\n $ asc18_total_cases         : chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc18_performance_category: chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc18_rshv_rate           : chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc18_interval_lower_limit: chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc18_interval_upper_limit: chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc18_footnote            : chr [1:326] \"5\" \"5\" \"5\" \"5\" ...\n $ asc19_total_cases         : chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc19_performance_category: chr [1:326] \"Number of Cases Too Small\" \"N/A\" \"..\n $ asc19_rshv_rate           : chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc19_interval_lower_limit: chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc19_interval_upper_limit: chr [1:326] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc19_footnote            : chr [1:326] \"1\" \"5\" \"7\" \"5\" ...\n $ asc20_sample              : chr [1:326] NA \"33\" NA \"52\" ...\n $ asc20_rate                : chr [1:326] \"N/A\" \"0.00\" \"N/A\" \"3.80\" ...\n $ asc20_footnote            : chr [1:326] \"5\" NA \"5\" NA ...\n</code></pre>\n\n```{.r .cell-code}\n\nquick_query_(pro_endpoint(\"asc_facility\"), query = q2)\n```\n\n<pre class=\"r-output\"><code><span style='color: #BB0000;'>✖</span> UNIMPLEMENTED: Query returned <span style='font-style: italic;'>2334</span> results, exceeding the limit of 2000.\n</code></pre>\n\n```{.r .cell-code}\n\nr3 <- quick_query_(pro_endpoint(\"asc_facility\"), query = q3)\n```\n\n<pre class=\"r-output\"><code><span style='color: #00BB00;'>✔</span> Returning <span style='font-style: italic;'>1879</span> results...\n</code></pre>\n\n```{.r .cell-code}\nr3 |> str()\n```\n\n<pre class=\"r-output\"><code>tibble [1,879 × 50] (S3: tbl_df/tbl/data.frame)\n $ facility_name             : chr [1:1879] \"NORTHERN NJ ENDOSCOPY CENTER LLC\"..\n $ facility_id               : chr [1:1879] \"31C0001270\" \"05C0001672\" \"03C000\"..\n $ npi                       : chr [1:1879] \"1003116823\" \"1003138736\" \"100333\"..\n $ citytown                  : chr [1:1879] \"NEWTON\" \"COSTA MESA\" \"SCOTTSDALE\"..\n $ state                     : chr [1:1879] \"NJ\" \"CA\" \"AZ\" \"CA\" ...\n $ zip_code                  : chr [1:1879] \"07860\" \"92627\" \"85258\" \"90621\" ...\n $ year                      : chr [1:1879] \"2023\" \"2023\" \"2023\" \"2023\" ...\n $ asc1_rate                 : chr [1:1879] \"0.00\" \"0.00\" \"0.00\" \"0.00\" ...\n $ asc1_footnote             : chr [1:1879] NA NA NA NA ...\n $ asc2_rate                 : chr [1:1879] \"0.00\" \"0.00\" \"0.00\" \"0.00\" ...\n $ asc2_footnote             : chr [1:1879] NA NA NA NA ...\n $ asc3_rate                 : chr [1:1879] \"0.00\" \"0.00\" \"0.00\" \"0.00\" ...\n $ asc3_footnote             : chr [1:1879] NA NA NA NA ...\n $ asc4_rate                 : chr [1:1879] \"0.00\" \"0.05\" \"0.02\" \"0.00\" ...\n $ asc4_footnote             : chr [1:1879] NA NA NA NA ...\n $ asc9_rate                 : chr [1:1879] \"86.59\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc9_footnote             : chr [1:1879] NA \"5\" \"5\" \"5\" ...\n $ asc11_rate                : chr [1:1879] \"0.00\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc11_footnote            : chr [1:1879] NA \"5\" \"5\" \"5\" ...\n $ asc12_total_cases         : chr [1:1879] \"1056\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc12_performance_category: chr [1:1879] \"No Different Than the National R\"..\n $ asc12_rshv_rate           : chr [1:1879] \"9.3\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc12_interval_lower_limit: chr [1:1879] \"6.8\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc12_interval_upper_limit: chr [1:1879] \"13.0\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc12_footnote            : chr [1:1879] NA \"5\" \"5\" \"5\" ...\n $ asc13_rate                : chr [1:1879] \"0.00\" \"100.00\" \"100.00\" \"N/A\" ...\n $ asc13_footnote            : chr [1:1879] NA NA NA \"5\" ...\n $ asc14_rate                : chr [1:1879] \"0.00\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc14_footnote            : chr [1:1879] NA \"5\" \"5\" \"5\" ...\n $ asc17_total_cases         : chr [1:1879] \"N/A\" \"39\" \"N/A\" \"N/A\" ...\n $ asc17_performance_category: chr [1:1879] \"N/A\" \"No Different Than the Nati\"..\n $ asc17_rshv_rate           : chr [1:1879] \"N/A\" \"2.2\" \"N/A\" \"N/A\" ...\n $ asc17_interval_lower_limit: chr [1:1879] \"N/A\" \"1.4\" \"N/A\" \"N/A\" ...\n $ asc17_interval_upper_limit: chr [1:1879] \"N/A\" \"3.3\" \"N/A\" \"N/A\" ...\n $ asc17_footnote            : chr [1:1879] \"5\" NA \"1\" \"1\" ...\n $ asc18_total_cases         : chr [1:1879] \"N/A\" \"121\" \"N/A\" \"N/A\" ...\n $ asc18_performance_category: chr [1:1879] \"N/A\" \"No Different Than the Nati\"..\n $ asc18_rshv_rate           : chr [1:1879] \"N/A\" \"4.6\" \"N/A\" \"N/A\" ...\n $ asc18_interval_lower_limit: chr [1:1879] \"N/A\" \"3.0\" \"N/A\" \"N/A\" ...\n $ asc18_interval_upper_limit: chr [1:1879] \"N/A\" \"7.1\" \"N/A\" \"N/A\" ...\n $ asc18_footnote            : chr [1:1879] \"5\" NA \"5\" \"5\" ...\n $ asc19_total_cases         : chr [1:1879] \"N/A\" \"169\" \"N/A\" \"N/A\" ...\n $ asc19_performance_category: chr [1:1879] \"N/A\" \"No Different than expected\"..\n $ asc19_rshv_rate           : chr [1:1879] \"N/A\" \"0.9\" \"N/A\" \"N/A\" ...\n $ asc19_interval_lower_limit: chr [1:1879] \"N/A\" \"0.6\" \"N/A\" \"N/A\" ...\n $ asc19_interval_upper_limit: chr [1:1879] \"N/A\" \"1.5\" \"N/A\" \"N/A\" ...\n $ asc19_footnote            : chr [1:1879] \"5\" NA \"1\" \"5\" ...\n $ asc20_sample              : chr [1:1879] NA NA NA NA ...\n $ asc20_rate                : chr [1:1879] \"N/A\" \"N/A\" \"N/A\" \"N/A\" ...\n $ asc20_footnote            : chr [1:1879] \"5\" \"5\" \"5\" \"5\" ...\n</code></pre>\n:::\n\n\n\n### Params with length > 1\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfoo <- function(x) {\n  \n  x_name <- deparse(substitute(x))\n  \n  glue::glue(\"{x_name}[{seq_along(x)}]={x}\") |> \n    glue::glue_collapse(sep = \"&\")\n}\n\nID <- 5:7\n\nfoo(ID)\n```\n\n<pre class=\"r-output\"><code>ID[1]=5&ID[2]=6&ID[3]=7\n</code></pre>\n\n```{.r .cell-code}\n\nfoo(x = list(ID = 1:2))\n```\n\n<pre class=\"r-output\"><code>list(ID = 1:2)[1]=1:2\n</code></pre>\n:::\n\n\n### Multi-value Params\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmulti_value <- function(x) {\n  glue::glue(\"[{seq_along(x)}]={x}\") |> \n    glue::glue_collapse(sep = \"&\")\n}\n\nmulti_value(state.abb[1:5])\n```\n\n<pre class=\"r-output\"><code>[1]=AL&[2]=AK&[3]=AZ&[4]=AR&[5]=CA\n</code></pre>\n:::\n\n\n## Query Generation\n\n   1. Select Dataset/Method\n   1. Build JSON Query\n   1. Build Request\n   1. Retrieve Number of Results\n   1. Build Offset Sequence\n\n### Allowed Operators\n\n\n::: {.cell layout-align=\"center\"}\n<pre class=\"r-output\"><code>=           : equals(x)\n<>          : equals(x, negate = TRUE)\n>           : greater_than(x)\n>=          : greater_than(x, equals = TRUE)\n<           : less_than(x)\n<=          : less_than(x, equals = TRUE)\nSTARTS_WITH : starts_with(x)\nCONTAINS    : contains(x)\nENDS_WITH   : ends_with(x)\nIN          : is_in(x)\nNOT IN      : is_in(x, negate = TRUE)\nBETWEEN     : between(x)\nNOT BETWEEN : between(x, negate = TRUE)\nIS NULL     : blank(x)\nIS NOT NULL : blank(x, negate = TRUE)\n</code></pre>\n:::\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnew_query <- function(args, operator) {\n  \n  len    <- cheapr::lengths_(args, names = TRUE)\n  single <- args[cheapr::which_(len == 1)]\n  multi  <- args[cheapr::which_(len > 1)]\n  \n  x <- list(s = if (vctrs::vec_is_empty(single)) NULL else single, \n            m = if (vctrs::vec_is_empty(multi)) NULL else multi)\n  \n  idx <- rlang::set_names(seq_along(args), names(args))\n  opr <- rlang::set_names(operator, names(args))\n\n  g_single <- glue::glue(\n    \"filter[{idx[names(x$s)]}][condition][path]={names(x$s)}\\n\",\n    \"filter[{idx[names(x$s)]}][condition][operator]={opr[names(x$s)]}\\n\",\n    \"filter[{idx[names(x$s)]}][condition][value]={providertwo:::delist(x$s)}\")\n  \n  g_mult <- glue::as_glue(\n    c(\n      glue::glue(\n        \"filter[{idx[names(x$m)]}][condition][path]={names(x$m)}\\n\",\n        \"filter[{idx[names(x$m)]}][condition][operator]={opr[names(x$m)]}\"), \n      glue::glue(\n        \"filter[{idx[names(x$m)]}][condition][value]\",\n        \"[{seq_along(providertwo:::delist(x$m))}]={providertwo:::delist(x$m)}\"))\n    )\n  \n  glue::glue_collapse(c(g_single, g_mult), sep = \"\\n\")\n}\n\nnew_query(args = list(state = c(\"GA\", \"MD\"), \n                      last_name = \"SMITH\", \n                      npi = 1234567890), \n          operator = c(\"IN\", \"STARTS_WITH\", \"=\"))\n```\n\n<pre class=\"r-output\"><code>filter[2][condition][path]=last_name\nfilter[2][condition][operator]=STARTS_WITH\nfilter[2][condition][value]=SMITH\nfilter[3][condition][path]=npi\nfilter[3][condition][operator]==\nfilter[3][condition][value]=1234567890\nfilter[1][condition][path]=state\nfilter[1][condition][operator]=IN\nfilter[1][condition][value][1]=GA\nfilter[1][condition][value][2]=MD\n</code></pre>\n:::\n\n\n### `class_query`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclass_query <- new_class(\n  \"class_query\",\n  properties = list(\n    path     = class_character,\n    operator = class_character,\n    value    = class_vector,\n    limit    = class_numeric,\n    sort     = class_character, \n    column   = class_vector,\n    group    = new_property(\n      class_list,\n      default = list(\n        conjunction = \"AND\",\n        memberOf    = \"\"))\n  )\n)\n```\n:::\n\n\n### `query` Formatters\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nex <- list(\n  state  = c(\"GA\", \"MD\"), \n  name   = \"Jerry\", \n  number = 300.12)\n\nlist_lengths(ex)\n```\n\n<pre class=\"r-output\"><code>[1] 2 1 1\n</code></pre>\n\n```{.r .cell-code}\n\nargs <- list_combine(ex, i = set_names(seq_along(ex), names(ex)))\n\nlist_assign(x = ex, values = set_names(as.list(seq_along(ex)), names(ex)))\n```\n\n<pre class=\"r-output\"><code>$state\n[1] 1\n\n$name\n[1] 2\n\n$number\n[1] 3\n</code></pre>\n:::\n\n\n#### `query_comparison`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nquery_comparison <- function(args, \n                             operator = c(\"=\", \">\", \">=\", \"<\", \"<=\", \"<>\")) {\n  \n  o <- match.arg(operator)\n  x <- args[cheapr::which_(cheapr::lengths_(args, names = TRUE) == 1)]\n  i <- args$i[names(x)]\n  \n  glue::glue(\n  \"\n  filter[{i}][condition][path]={names(x)}\n  filter[{i}][condition][operator]={o}\n  filter[{i}][condition][value]={providertwo:::delist(x)}\n  \"\n  )\n}\n\nquery_comparison(args)\n```\n\n<pre class=\"r-output\"><code>filter[2][condition][path]=name\nfilter[2][condition][operator]==\nfilter[2][condition][value]=Jerry\nfilter[3][condition][path]=number\nfilter[3][condition][operator]==\nfilter[3][condition][value]=300.12\n</code></pre>\n\n```{.r .cell-code}\nquery_comparison(args, \">=\")\n```\n\n<pre class=\"r-output\"><code>filter[2][condition][path]=name\nfilter[2][condition][operator]=>=\nfilter[2][condition][value]=Jerry\nfilter[3][condition][path]=number\nfilter[3][condition][operator]=>=\nfilter[3][condition][value]=300.12\n</code></pre>\n:::\n\n\n#### `query_equals_simple`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nquery_equals_simple <- function(args) {\n  \n  args <- args[cheapr::which_(cheapr::lengths_(args, names = TRUE) == 1)]\n  \n  glue::glue(\"filter[{names(args)}]={providertwo:::delist(args)}\")\n}\n\nquery_equals_simple(ex)\n```\n\n<pre class=\"r-output\"><code>filter[name]=Jerry\nfilter[number]=300.12\n</code></pre>\n:::\n\n\n#### `query_in_notin`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nquery_in_notin <- function(args, operator = \"IN\") {\n  \n  o <- match.arg(operator, c(\"IN\", \"NOT IN\"))\n  x <- args[cheapr::which_(cheapr::lengths_(args, names = TRUE) > 1)]\n  i <- args$i[names(x)]\n  i <- names(i)[!cheapr::is_na(names(i))]\n  x$i <- NULL\n  \n  glue::as_glue(\n    c(\n      glue::glue(\n        \"filter[{i}][condition][path]={names(x)} \",\n        \"filter[{i}][condition][operator]={o}\"\n        ), \n      glue::glue(\n        \"filter[{i}]\",\n        \"[condition][value]\",\n        \"[{seq_along(providertwo:::delist(x))}]={providertwo:::delist(x)}\"\n        )\n      )\n    )\n}\n\nquery_in_notin(args, \"IN\")\n```\n\n<pre class=\"r-output\"><code>filter[state][condition][path]=state filter[state][condition][operator]=IN\nfilter[state][condition][value][1]=GA\nfilter[state][condition][value][2]=MD\n</code></pre>\n\n```{.r .cell-code}\nquery_in_notin(ex, \"NOT IN\")\n```\n:::\n\n\n#### Finalizing `query` Components\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglue::as_glue(c(query_in_notin(ex), query_comparison(ex)))\n```\n:::\n\n\n### New Function\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfields <- c(\n  \"year\",\n  \"covered_recipient_npi\",                                         \n  \"covered_recipient_type\",                                        \n  \"covered_recipient_first_name\",                                  \n  \"covered_recipient_last_name\",                                   \n  \"recipient_city\",                                                \n  \"recipient_state\",                                               \n  \"recipient_zip_code\",                                            \n  \"teaching_hospital_name\",                                        \n  \"form_of_payment_or_transfer_of_value\",                          \n  \"nature_of_payment_or_transfer_of_value\",                        \n  \"applicable_manufacturer_or_applicable_gpo_making_payment_name\",\n  \"applicable_manufacturer_or_applicable_gpo_making_payment_id\")\n\nprocess_params <- \\(arg_names, field_names) {\n  \n  nms <- set_names(arg_names, field_names)\n  \n  parse_expr(\n    paste0(\n      \"list2(\", \n      glue_collapse(\n        glue('{names(nms)} = {unname(nms)}'), \n        sep = \", \"), \")\"))\n}\n\nhas_operator <- \\(args) {\n  map_lgl(args, function(x) inherits(x, \"query_operator\"))\n}\n\nname_path <- \\(args) {\n  map(args, \\(x) x[[names(x)]][[\"path\"]] <- names(x))\n}\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nopen_pay <- function(year,\n                     npi               = NULL,\n                     covered_type      = NULL,\n                     first             = NULL,\n                     last              = NULL,\n                     city              = NULL,\n                     state             = NULL,\n                     zip               = NULL,\n                     teaching_hospital = NULL,\n                     payment_form      = NULL,\n                     payment_nature    = NULL,\n                     payer             = NULL,\n                     payer_id          = NULL) {\n  \n  fn_args <- process_params(fn_fmls_names(), fields) |> \n    eval_bare() |> \n    compact()\n  \n  # if (any(has_operator(fn_args))) \n  # fn_args[has_operator(fn_args)] <- name_path(fn_args[has_operator(fn_args)])\n  \n  fn_args\n}\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nopen_pay(year = 2021, npi = \"1043218118\")\n```\n\n<pre class=\"r-output\"><code>$year\n[1] 2021\n\n$covered_recipient_npi\n[1] \"1043218118\"\n</code></pre>\n\n```{.r .cell-code}\nopen_pay(year = 2021, payment_nature = \"Royalty or License\")\n```\n\n<pre class=\"r-output\"><code>$year\n[1] 2021\n\n$nature_of_payment_or_transfer_of_value\n[1] \"Royalty or License\"\n</code></pre>\n\n```{.r .cell-code}\nopen_pay(year = 2021, payment_form = \"Stock option\")\n```\n\n<pre class=\"r-output\"><code>$year\n[1] 2021\n\n$form_of_payment_or_transfer_of_value\n[1] \"Stock option\"\n</code></pre>\n\n```{.r .cell-code}\nopen_pay(year = 2021, payer = \"Adaptive Biotechnologies Corporation\")\n```\n\n<pre class=\"r-output\"><code>$year\n[1] 2021\n\n$applicable_manufacturer_or_applicable_gpo_making_payment_name\n[1] \"Adaptive Biotechnologies Corporation\"\n</code></pre>\n\n```{.r .cell-code}\nopen_pay(year = 2021, teaching_hospital = \"Nyu Langone Hospitals\")\n```\n\n<pre class=\"r-output\"><code>$year\n[1] 2021\n\n$teaching_hospital_name\n[1] \"Nyu Langone Hospitals\"\n</code></pre>\n\n```{.r .cell-code}\nopen_pay(year = 2017:2023, npi = \"1043477615\")\n```\n\n<pre class=\"r-output\"><code>$year\n[1] 2017 2018 2019 2020 2021 2022 2023\n\n$covered_recipient_npi\n[1] \"1043477615\"\n</code></pre>\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstarts_with <- \\(x) {\n  structure(\n    c(path      = NA_character_,\n      operator  = \"STARTS_WITH\",\n      value     = x),\n    class = \"query_operator\")\n}\n\nstarts_with(\"Royalty or License\")\n```\n\n<pre class=\"r-output\"><code>                path             operator                value \n                  NA        \"STARTS_WITH\" \"Royalty or License\" \nattr(,\"class\")\n[1] \"query_operator\"\n</code></pre>\n\n```{.r .cell-code}\n\nx <- open_pay(\n  year = 2021, \n  payment_nature = starts_with(\"Royalty or License\"), \n  teaching_hospital = starts_with(\"NYU\"))\n\nx\n```\n\n<pre class=\"r-output\"><code>$year\n[1] 2021\n\n$teaching_hospital_name\n         path      operator         value \n           NA \"STARTS_WITH\"         \"NYU\" \nattr(,\"class\")\n[1] \"query_operator\"\n\n$nature_of_payment_or_transfer_of_value\n                path             operator                value \n                  NA        \"STARTS_WITH\" \"Royalty or License\" \nattr(,\"class\")\n[1] \"query_operator\"\n</code></pre>\n\n```{.r .cell-code}\n\nnames(x[has_operator(x)])\n```\n\n<pre class=\"r-output\"><code>[1] \"teaching_hospital_name\"                \n[2] \"nature_of_payment_or_transfer_of_value\"\n</code></pre>\n\n```{.r .cell-code}\n\nx[has_operator(x)][[1]][[\"path\"]] <- names(x[has_operator(x)])[[1]]\n\nx\n```\n\n<pre class=\"r-output\"><code>$year\n[1] 2021\n\n$teaching_hospital_name\n                    path                 operator                    value \n\"teaching_hospital_name\"            \"STARTS_WITH\"                    \"NYU\" \nattr(,\"class\")\n[1] \"query_operator\"\n\n$nature_of_payment_or_transfer_of_value\n                path             operator                value \n                  NA        \"STARTS_WITH\" \"Royalty or License\" \nattr(,\"class\")\n[1] \"query_operator\"\n</code></pre>\n\n```{.r .cell-code}\n\n# map(args, \\(x) x[[names(x)]][[\"path\"]] <- names(x))\n# \n# x[has_operator(x)] <- providertwo:::map2(\n#   x[has_operator(x)], \n#   names(x[has_operator(x)]), \n#   function(x, y) x[[\"path\"]] <- y)\n# \n# x\n```\n:::\n\n\n## Query Format\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nurl_parse(\n  base_url = \"https://openpaymentsdata.cms.gov/api/1/datastore/\", \n  url      = \"query/fdc3c773-018a-412c-8a81-d7b8a13a037b/0\") |> \n  url_modify_query(\n    `conditions[0][property]` = \"covered_recipient_last_name\",\n    `conditions[0][value]`    = \"SMITH\",\n    `conditions[0][operator]` = \"=\",\n    schema                    = \"false\",\n    keys                      = \"false\",\n    results                   = \"false\",\n    offset                    = 0,\n    limit                     = 500) |>\n  url_build() |> \n  request() |> \n  providertwo:::perform_simple() |>\n  _[[\"count\"]]\n```\n\n<pre class=\"r-output\"><code>[1] 77\n</code></pre>\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nurl_parse(\n  base_url = \"https://openpaymentsdata.cms.gov/api/1/datastore/\", \n  url      = \"query/fdc3c773-018a-412c-8a81-d7b8a13a037b/0\") |> \n  url_modify_query(\n    `conditions[0][property]` = \"covered_recipient_first_name\",\n    `conditions[0][value]`    = \"PATRICK\",\n    `conditions[0][operator]` = \"=\",\n    `conditions[1][property]` = \"covered_recipient_last_name\",\n    `conditions[1][value]`    = \"WARD\",\n    `conditions[1][operator]` = \"=\",\n    schema                    = \"false\",\n    keys                      = \"false\",\n    results                   = \"false\",\n    offset                    = 0) |>\n  url_build() |> \n  request() |> \n  providertwo:::perform_simple() |>\n  _[[\"count\"]]\n```\n\n<pre class=\"r-output\"><code>[1] 48\n</code></pre>\n:::\n\n\n### Other Examples\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nexquery <- glue::glue(\n  '\n  \"filter[{i}][path]\" = \"{PATH}\",\n  \"filter[{i}][operator]\" = \"{OPERATOR}\",\n  \"filter[{i}][value]\" = \"{VALUE}\"\n  ', \n  i = 1:2, \n  PATH = c(\"STATE_CD\", \"LAST_NAME\"), \n  OPERATOR = \"=\",\n  VALUE = c(\"GA\", \"SMITH\")\n  ) |> \n  glue::glue_collapse(sep = \",\\n\")\n\nexquery\n```\n\n<pre class=\"r-output\"><code>\"filter[1][path]\" = \"STATE_CD\",\n\"filter[1][operator]\" = \"=\",\n\"filter[1][value]\" = \"GA\",\n\"filter[2][path]\" = \"LAST_NAME\",\n\"filter[2][operator]\" = \"=\",\n\"filter[2][value]\" = \"SMITH\"\n</code></pre>\n\n```{.r .cell-code}\n\nglue::glue('c({exquery})') |> \n  rlang::parse_expr() |> \n  rlang::eval_bare()\n```\n\n<pre class=\"r-output\"><code>    filter[1][path] filter[1][operator]    filter[1][value]     filter[2][path] \n         \"STATE_CD\"                 \"=\"                \"GA\"         \"LAST_NAME\" \nfilter[2][operator]    filter[2][value] \n                \"=\"             \"SMITH\" \n</code></pre>\n:::\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nglue::glue(\n  '\n  filter[{PATH}][operator]={OPERATOR}\n  filter[{PATH}][value]={VALUE}\n  ', \n  PATH = c(\"STATE_CD\", \"LAST_NAME\"), \n  OPERATOR = \"IN\",\n  VALUE = c(\"GA\", \"SMITH\")\n  )\n```\n\n<pre class=\"r-output\"><code>filter[STATE_CD][operator]=IN\nfilter[STATE_CD][value]=GA\nfilter[LAST_NAME][operator]=IN\nfilter[LAST_NAME][value]=SMITH\n</code></pre>\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nformat_syntax <- \\(name, value) {\n  setNames(\n    value, \n    paste0(\n      name, \n      \"[id-\", \n      seq_along(value), \n      \"][condition][value]\"))\n}\n\nformat_syntax(\"filter\", c(\"GA\", \"NY\"))\n```\n\n<pre class=\"r-output\"><code>filter[id-1][condition][value] filter[id-2][condition][value] \n                          \"GA\"                           \"NY\" \n</code></pre>\n\n```{.r .cell-code}\n\n\n# query_syntax <- c(\n#   \"filter[STATE_CD]\" = \"GA\",\n#   \"filter[LAST_NAME]\" = \"SMITH\"\n#   )\n```\n:::\n\n\n## Pagination\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase <- request(\"https://data.cms.gov/data-api/v1/dataset\") |> \n  req_url_path_append(\"9887a515-7552-4693-bf58-735c77af46d7\") |> \n  req_url_path_append(\"data\")\n\nbase\n```\n\n<pre class=\"r-output\"><code><span style='color: #0000BB;'><httr2_request></span>\n</code></pre><pre class=\"r-output\"><code><span style='font-weight: bold;'>GET</span>\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data\n</code></pre><pre class=\"r-output\"><code><span style='font-weight: bold;'>Body</span>: empty\n</code></pre>\n\n```{.r .cell-code}\n\nstats <- base |> \n  req_url_path_append(\"stats\")\n\nstats\n```\n\n<pre class=\"r-output\"><code><span style='color: #0000BB;'><httr2_request></span>\n</code></pre><pre class=\"r-output\"><code><span style='font-weight: bold;'>GET</span>\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data/stats\n</code></pre><pre class=\"r-output\"><code><span style='font-weight: bold;'>Body</span>: empty\n</code></pre>\n\n```{.r .cell-code}\n\nstats <- stats |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nstats |> purse()\n```\n\n<pre class=\"r-output\"><code>• <span style='color: #DADADA;'>$</span>found_rows <span style='color: #5FAF87;'>i1 </span> <span style='color: #3A3A3A;'>51174</span>\n• <span style='color: #DADADA;'>$</span>total_rows <span style='color: #5FAF87;'>i1 </span> <span style='color: #3A3A3A;'>51174</span>\n</code></pre>\n\n```{.r .cell-code}\n\n# Offset shouldn't go to 50000\nprovidertwo:::offset_seq(stats$found_rows, 5000)\n```\n\n<pre class=\"r-output\"><code> [1]     0  5000 10000 15000 20000 25000 30000 35000 40000 45000 50000\n</code></pre>\n\n```{.r .cell-code}\n\nurls <- glue::glue(\n  \"{base$url}\",\n  \"?size=5000&\",\n  \"offset=\",\n  \"{providertwo:::offset_seq(stats$found_rows, 5000)}\"\n)\n\nurls\n```\n\n<pre class=\"r-output\"><code>https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=0\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=5000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=10000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=15000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=20000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=25000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=30000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=35000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=40000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=45000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=50000\n</code></pre>\n\n```{.r .cell-code}\n\nresp <- urls[1:3] |> \n  map(\n    function(x) {\n      request(x) |> \n        req_perform() |> \n        resp_body_json(simplifyVector = TRUE) |> \n        tibble()\n    }) |> \n  list_rbind(names_to = \"reqID\") |> \n  janitor::clean_names()\n\nresp |> \n  janitor::get_dupes()\n```\n\n<pre class=\"r-output\"><code>No variable names specified - using all columns.\n</code></pre><pre class=\"r-output\"><code><span style='color: #555555;'># A tibble: 6 × 15</span>\n  req_id first_name last_name npi        specialty  optout_effective_date\n   <span style='color: #555555; font-style: italic;'><int></span> <span style='color: #555555; font-style: italic;'><chr></span>      <span style='color: #555555; font-style: italic;'><chr></span>     <span style='color: #555555; font-style: italic;'><chr></span>      <span style='color: #555555; font-style: italic;'><chr></span>      <span style='color: #555555; font-style: italic;'><chr></span>                \n<span style='color: #555555;'>1</span>      2 Joseph     Kunnel    1740295518 Dentist    09/25/2015           \n<span style='color: #555555;'>2</span>      2 Joseph     Kunnel    1740295518 Dentist    09/25/2015           \n<span style='color: #555555;'>3</span>      3 David      Fernitz   1225232226 Dentist    03/15/2016           \n<span style='color: #555555;'>4</span>      3 David      Fernitz   1225232226 Dentist    03/15/2016           \n<span style='color: #555555;'>5</span>      3 Martin     Drooker   1326103029 Psychiatry 04/01/2016           \n<span style='color: #555555;'>6</span>      3 Martin     Drooker   1326103029 Psychiatry 04/01/2016           \n<span style='color: #555555;'># ℹ 9 more variables: optout_end_date <chr>, first_line_street_address <chr>,</span>\n<span style='color: #555555;'>#   second_line_street_address <chr>, city_name <chr>, state_code <chr>,</span>\n<span style='color: #555555;'>#   zip_code <chr>, eligible_to_order_and_refer <chr>, last_updated <chr>,</span>\n<span style='color: #555555;'>#   dupe_count <int></span>\n</code></pre>\n\n```{.r .cell-code}\n\ndupes <- resp |> \n  count(npi, sort = TRUE) |> \n  filter(n > 1) |> \n  pull(npi)\n\nresp |> \n  filter(npi %in% dupes) |> \n  arrange(npi)\n```\n\n<pre class=\"r-output\"><code><span style='color: #555555;'># A tibble: 161 × 14</span>\n   req_id first_name last_name npi        specialty        optout_effective_date\n    <span style='color: #555555; font-style: italic;'><int></span> <span style='color: #555555; font-style: italic;'><chr></span>      <span style='color: #555555; font-style: italic;'><chr></span>     <span style='color: #555555; font-style: italic;'><chr></span>      <span style='color: #555555; font-style: italic;'><chr></span>            <span style='color: #555555; font-style: italic;'><chr></span>                \n<span style='color: #555555;'> 1</span>      2 Barbara    Lino      1013130632 Clinical Psycho… 04/16/2021           \n<span style='color: #555555;'> 2</span>      2 Barbara    Lino      1013130632 Clinical Psycho… 04/19/2021           \n<span style='color: #555555;'> 3</span>      2 Victoria   Lasser    1043597586 Clinical Psycho… 10/21/2015           \n<span style='color: #555555;'> 4</span>      3 Victoria   Lasser    1043597586 Clinical Psycho… 01/13/2016           \n<span style='color: #555555;'> 5</span>      2 Peter      Chang     1053320606 Dentist          09/25/2015           \n<span style='color: #555555;'> 6</span>      3 Peter      Chang     1053320606 Dentist          05/31/2016           \n<span style='color: #555555;'> 7</span>      1 Donna      Lewinter  1053493767 Psychiatry       10/10/2002           \n<span style='color: #555555;'> 8</span>      1 Donna      Lewinter  1053493767 Psychiatry       10/10/2012           \n<span style='color: #555555;'> 9</span>      1 Jeffrey    Dean      1073687711 Oral Surgery     06/25/2023           \n<span style='color: #555555;'>10</span>      1 Jeffrey    Dean      1073687711 Maxillofacial S… 06/25/2013           \n<span style='color: #555555;'># ℹ 151 more rows</span>\n<span style='color: #555555;'># ℹ 8 more variables: optout_end_date <chr>, first_line_street_address <chr>,</span>\n<span style='color: #555555;'>#   second_line_street_address <chr>, city_name <chr>, state_code <chr>,</span>\n<span style='color: #555555;'>#   zip_code <chr>, eligible_to_order_and_refer <chr>, last_updated <chr></span>\n</code></pre>\n\n```{.r .cell-code}\n\nresp |> \n  filter(npi %in% c(\"1225232226\", \"1740295518\", \"1326103029\")) |> \n  relocate(last_updated) |> \n  arrange(npi)\n```\n\n<pre class=\"r-output\"><code><span style='color: #555555;'># A tibble: 6 × 14</span>\n  last_updated req_id first_name last_name npi   specialty optout_effective_date\n  <span style='color: #555555; font-style: italic;'><chr></span>         <span style='color: #555555; font-style: italic;'><int></span> <span style='color: #555555; font-style: italic;'><chr></span>      <span style='color: #555555; font-style: italic;'><chr></span>     <span style='color: #555555; font-style: italic;'><chr></span> <span style='color: #555555; font-style: italic;'><chr></span>     <span style='color: #555555; font-style: italic;'><chr></span>                \n<span style='color: #555555;'>1</span> 10/15/2024        3 David      Fernitz   1225… Dentist   03/15/2016           \n<span style='color: #555555;'>2</span> 10/15/2024        3 David      Fernitz   1225… Dentist   03/15/2016           \n<span style='color: #555555;'>3</span> 05/15/2024        3 Martin     Drooker   1326… Psychiat… 04/01/2016           \n<span style='color: #555555;'>4</span> 05/15/2024        3 Martin     Drooker   1326… Psychiat… 04/01/2016           \n<span style='color: #555555;'>5</span> 10/15/2024        2 Joseph     Kunnel    1740… Dentist   09/25/2015           \n<span style='color: #555555;'>6</span> 10/15/2024        2 Joseph     Kunnel    1740… Dentist   09/25/2015           \n<span style='color: #555555;'># ℹ 7 more variables: optout_end_date <chr>, first_line_street_address <chr>,</span>\n<span style='color: #555555;'>#   second_line_street_address <chr>, city_name <chr>, state_code <chr>,</span>\n<span style='color: #555555;'>#   zip_code <chr>, eligible_to_order_and_refer <chr></span>\n</code></pre>\n:::\n\n\n## Example 2\n\nSelect Dataset\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndistribution <- read_json_arrow(\n  file = \"https://data.cms.gov/data.json\",\n  col_select = c(\"dataset\"),\n  as_data_frame = TRUE) |> \n  to_duckdb() |> \n  pull(dataset) |> \n  pluck(1) |> \n  select(distribution) |> \n  as_tibble() |> \n  unnest(distribution) |> \n  # rename_with(remove_at_symbol) |> \n  filter(format      == \"API\", \n         description == \"latest\")\n\ndistribution |> \n  filter(grepl(\"Enrollment\", title)) |> \n  pull(title)\n\naccessURL <- distribution |> \n  filter(grepl(\"Opt Out Affidavits : \", title)) |> \n  pull(accessURL)\n\naccessURL\n```\n:::\n\n\nFormat Query\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nquery <- glue::glue(\n  'c(\n    \"filter[{i}][path]\"  = \"{PATH}\",\n    \"filter[{i}][value]\" = \"{VALUE}\"\n  )', \n  i = 1, \n  PATH = \"State Code\", \n  VALUE = \"CA\")\n\nquery\n\nquery <- query |> \n  parse_expr() |> \n  eval_bare()\n\nquery\n```\n:::\n\n\nRetrieve Number of Results\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nqueryurl <- accessURL |> \n  request() |> \n  req_url_query(size = 5000, !!!query)\n\nnresults <- queryurl |> \n  req_url_path_append(\"stats\") |> \n  req_perform() |> \n  resp_body_json() |> \n  fuimus::gelm(\"found\")\n\nnresults\n```\n:::\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nurl_parse(queryurl$url)\n```\n:::\n\n\nGenerate and Send Requests\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nreqs <- map(\n  glue(\n    \"{url}\", \n    \"&offset={off}\", \n    url = queryurl$url, \n    off = providertwo:::offset_seq(nresults, 5000)), \n  httr2::request)\n\nres <- req_perform_parallel(reqs) |> \n  resps_successes() |> \n  map(\\(x) tibble(resp_body_json(x, simplifyVector = TRUE))) |> \n  bind_rows()\n\nprovidertwo:::set_clean(res, names(res)) |> \n  providertwo:::map_na_if() |> \n  mtt(\n    optout_effective_date = providertwo:::as_date(optout_effective_date, fmt = \"%m/%d/%Y\"),\n    optout_end_date = providertwo:::as_date(optout_end_date, fmt = \"%m/%d/%Y\"),\n    last_updated = providertwo:::as_date(last_updated, fmt = \"%m/%d/%Y\")\n    )\n```\n:::\n\n\n### Testing in a Function\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nprotofunc <- function(id     = NULL, \n                      state  = NULL, \n                      name   = NULL, \n                      number = NULL) {\n  arg <- class_args(\n    id     = id,\n    state  = state,\n    name   = name,\n    number = number)\n  \n  query_comparison(compact(props(arg)))\n  \n}\n\nprotofunc(state  = c(\"GA\"), \n          name   = \"Jerry\", \n          number = 300.12)\n```\n:::\n\n\n## Try Again\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\narg_list <- new_class(\n  \"arg_list\",\n  properties = list(params = class_list),\n  constructor = function(...) new_object(S7_object(), params = rlang::list2(...)),\n  validator = function(self) if (!rlang::is_named(self@params)) \"all @params must all be named\")\n\nless_than <- function(x, equals = FALSE) {\n  `attr<-`(x, \"operator\", if (equals) \"<=\" else \"<\")\n}\n\nis_in <- function(x, negate = FALSE) {\n  `attr<-`(x, \"operator\", ifelse(negate, \"NOT IN\", \"IN\"))\n}\n\na <- arg_list(\n  npi   = less_than(\"1234567890\"),\n  state = is_in(state.abb),\n  name  = \"Jerry\")\n\n# get_operator <- purrr::attr_getter(\"operator\")\n\n# attr(prop(a, \"params\")$npi, \"operator\")\n\nhas_operator <- \\(x) names(attributes(x)) %in% \"operator\"\n\nhas_operator(a@params$npi)\n```\n\n<pre class=\"r-output\"><code>[1] TRUE\n</code></pre>\n\n```{.r .cell-code}\n\nhas_operator(a@params$name)\n```\n\n<pre class=\"r-output\"><code>logical(0)\n</code></pre>\n\n```{.r .cell-code}\n\nmap(a@params, has_operator) |> \n  compact() |> \n  names()\n```\n\n<pre class=\"r-output\"><code>[1] \"npi\"   \"state\"\n</code></pre>\n\n```{.r .cell-code}\n\na@params[names(a@params) %in% \"npi\"]\n```\n\n<pre class=\"r-output\"><code>$npi\n[1] \"1234567890\"\nattr(,\"operator\")\n[1] \"<\"\n</code></pre>\n:::\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstartswith <- \\(x) {\n  list(\n    OPERATOR = \"STARTS_WITH\", \n    VALUE    = as.character(x)\n  )\n}\n\nstartswith(\"Royalty or License\")\n\nbetween <- \\(x, negate = FALSE) {\n  list(\n    OPERATOR = ifelse(negate, \"NOT BETWEEN\", \"BETWEEN\"), \n    VALUE    = as.character(x)\n  )\n}\n\nbetween(c(1, 10))\n\nbetween(c(1, 10), negate = TRUE)\n\nendswith <- \\(x) {\n  list(\n    OPERATOR = \"ENDS_WITH\", \n    VALUE    = as.character(x)\n  )\n}\n\nendswith(\"NYU\")\n\nis_in <- \\(x, negate = FALSE) {\n  list(\n    OPERATOR = ifelse(negate, \"NOT IN\", \"IN\"), \n    VALUE    = as.character(x)\n  )\n}\n\nis_in(c(\"GA\", \"NY\"))\n\nis_in(c(\"GA\", \"NY\"), negate = TRUE)\n```\n:::\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nx <- list(npi = ~ providertwo:::starts_with(\"gdklfgj\"))\nx\n```\n\n<pre class=\"r-output\"><code>$npi\n~providertwo:::starts_with(\"gdklfgj\")\n</code></pre>\n\n```{.r .cell-code}\n\nx$npi[1]\n```\n\n<pre class=\"r-output\"><code>`~`()\n</code></pre>\n\n```{.r .cell-code}\n\nrlang::is_formula(x$npi, lhs = TRUE)\n```\n\n<pre class=\"r-output\"><code>[1] FALSE\n</code></pre>\n\n```{.r .cell-code}\n\n\nfoo <- function(npi            = NULL,\n                entity         = NULL,\n                first          = NULL,\n                last           = NULL,\n                organization   = NULL,\n                name_type      = NULL,\n                taxonomy_desc  = NULL,\n                city           = NULL,\n                state          = NULL,\n                zip            = NULL,\n                country        = NULL) {\n  rlang::list2(\n    number               = npi,\n    enumeration_type     = entity,\n    first_name           = first,\n    last_name            = last,\n    name_purpose         = name_type,\n    organization_name    = organization,\n    taxonomy_description = taxonomy_desc,\n    city                 = city,\n    state                = state,\n    postal_code          = zip,\n    country_code         = country,\n    skip                 = 0L\n  )\n}\n\nx <- foo(npi = ~ providertwo:::starts_with(1234567890))\n\n\nrlang::f_lhs(x$number) <- rlang::expr(NPI)\n\nx$number\n```\n\n<pre class=\"r-output\"><code>NPI ~ providertwo:::starts_with(1234567890)\n</code></pre>\n\n```{.r .cell-code}\n\nrlang::f_lhs(x$number)\n```\n\n<pre class=\"r-output\"><code>NPI\n</code></pre>\n\n```{.r .cell-code}\n\nrlang::f_rhs(x$number) |> \n  rlang::eval_tidy()\n```\n\n<pre class=\"r-output\"><code>$field\ncharacter(0)\n\n$operator\n[1] \"STARTS_WITH\"\n\n$input\n[1] \"1234567890\"\n</code></pre>\n:::\n\n\n",
    "supporting": [
      "wk_query_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}