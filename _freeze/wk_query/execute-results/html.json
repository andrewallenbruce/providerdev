{
  "hash": "b5363b18a2f32bf391cd459c695c09f8",
  "result": {
    "engine": "knitr",
    "markdown": "# Query {#sec-querying}\n\n\n\n## Query Generation\n\n   1. Select Dataset/Method\n   1. Build JSON Query\n   1. Build Request\n   1. Retrieve Number of Results\n   1. Build Offset Sequence\n\n### Allowed Operators\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n=           : equals(x)\n<>          : equals(x, negate = TRUE)\n>           : greater_than(x)\n>=          : greater_than(x, equals = TRUE)\n<           : less_than(x)\n<=          : less_than(x, equals = TRUE)\nSTARTS_WITH : starts_with(x)\nCONTAINS    : contains(x)\nENDS_WITH   : ends_with(x)\nIN          : is_in(x)\nNOT IN      : is_in(x, negate = TRUE)\nBETWEEN     : between(x)\nNOT BETWEEN : between(x, negate = TRUE)\nIS NULL     : blank(x)\nIS NOT NULL : blank(x, negate = TRUE)\n```\n\n\n:::\n:::\n\n### `class_query`\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_query <- new_class(\n  \"class_query\",\n  properties = list(\n    path     = class_character,\n    operator = class_character,\n    value    = class_vector,\n    limit    = class_numeric,\n    sort     = class_character, \n    column   = class_vector,\n    group    = new_property(\n      class_list,\n      default = list(\n        conjunction = \"AND\",\n        memberOf    = \"\"))\n  )\n)\n```\n:::\n\n### `query` Formatters\n\n::: {.cell}\n\n```{.r .cell-code}\nex <- list(\n  state  = c(\"GA\", \"MD\"), \n  name   = \"Jerry\", \n  number = 300.12)\n```\n:::\n\n#### `query_comparison`\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_comparison <- function(args, \n                             operator = c(\"=\", \">\", \">=\", \"<\", \"<=\", \"<>\")) {\n  \n  operator <- match.arg(operator)\n  args     <- args[\n    cheapr::which_(\n      cheapr::lengths_(\n        args, \n        names = TRUE) == 1\n      )]\n  \n  glue::glue(\n  \"\n  filter[{seq_along(args)}][condition][path]={names(args)}\n  filter[{seq_along(args)}][condition][operator]={operator}\n  filter[{seq_along(args)}][condition][value]={providertwo:::delist(args)}\n  \"\n  )\n}\n\nquery_comparison(ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[1][condition][path]=name\nfilter[1][condition][operator]==\nfilter[1][condition][value]=Jerry\nfilter[2][condition][path]=number\nfilter[2][condition][operator]==\nfilter[2][condition][value]=300.12\n```\n\n\n:::\n\n```{.r .cell-code}\nquery_comparison(ex, \">=\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[1][condition][path]=name\nfilter[1][condition][operator]=>=\nfilter[1][condition][value]=Jerry\nfilter[2][condition][path]=number\nfilter[2][condition][operator]=>=\nfilter[2][condition][value]=300.12\n```\n\n\n:::\n:::\n\n#### `query_equals_simple`\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_equals_simple <- function(args) {\n  \n  args <- args[\n    cheapr::which_(\n      cheapr::lengths_(\n        args, \n        names = TRUE) == 1\n      )]\n  \n  glue::glue(\n  \"\n  filter[{names(args)}]={providertwo:::delist(args)}\n  \"\n  )\n}\n\nquery_equals_simple(ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[name]=Jerry\nfilter[number]=300.12\n```\n\n\n:::\n:::\n\n#### `query_in_notin`\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_in_notin <- function(args, \n                           operator = c(\"IN\", \"NOT IN\")) {\n  \n  operator <- match.arg(operator)\n  args     <- args[cheapr::which_(cheapr::lengths_(args, names = TRUE) > 1)]\n  \n  glue::as_glue(\n    c(\n      glue::glue(\n        \"filter[f{seq_along(args)}][condition][path]={names(args)}\n        filter[f{seq_along(args)}][condition][operator]={operator}\"\n        ), \n      glue::glue(\n        \"filter[f{seq_along(args)}]\",\n        \"[condition][value]\",\n        \"[{seq_along(providertwo:::delist(args))}]={providertwo:::delist(args)}\"\n        )\n      )\n    )\n}\n\nquery_in_notin(ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[f1][condition][path]=state\nfilter[f1][condition][operator]=IN\nfilter[f1][condition][value][1]=GA\nfilter[f1][condition][value][2]=MD\n```\n\n\n:::\n\n```{.r .cell-code}\nquery_in_notin(ex, \"NOT IN\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[f1][condition][path]=state\nfilter[f1][condition][operator]=NOT IN\nfilter[f1][condition][value][1]=GA\nfilter[f1][condition][value][2]=MD\n```\n\n\n:::\n:::\n\n#### Finalizing `query` Components\n\n::: {.cell}\n\n```{.r .cell-code}\nglue::as_glue(c(query_in_notin(ex), query_comparison(ex)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[f1][condition][path]=state\nfilter[f1][condition][operator]=IN\nfilter[f1][condition][value][1]=GA\nfilter[f1][condition][value][2]=MD\nfilter[1][condition][path]=name\nfilter[1][condition][operator]==\nfilter[1][condition][value]=Jerry\nfilter[2][condition][path]=number\nfilter[2][condition][operator]==\nfilter[2][condition][value]=300.12\n```\n\n\n:::\n:::\n\n### New Function\n\n::: {.cell}\n\n```{.r .cell-code}\nfields <- c(\n  \"year\",\n  \"covered_recipient_npi\",                                         \n  \"covered_recipient_type\",                                        \n  \"covered_recipient_first_name\",                                  \n  \"covered_recipient_last_name\",                                   \n  \"recipient_city\",                                                \n  \"recipient_state\",                                               \n  \"recipient_zip_code\",                                            \n  \"teaching_hospital_name\",                                        \n  \"form_of_payment_or_transfer_of_value\",                          \n  \"nature_of_payment_or_transfer_of_value\",                        \n  \"applicable_manufacturer_or_applicable_gpo_making_payment_name\",\n  \"applicable_manufacturer_or_applicable_gpo_making_payment_id\")\n\nprocess_params <- \\(arg_names, field_names) {\n  \n  nms <- set_names(arg_names, field_names)\n  \n  parse_expr(\n    paste0(\n      \"list2(\", \n      glue_collapse(\n        glue('{names(nms)} = {unname(nms)}'), \n        sep = \", \"), \")\"))\n}\n\nhas_operator <- \\(args) {\n  map_lgl(args, function(x) inherits(x, \"query_operator\"))\n}\n\nname_path <- \\(args) {\n  map(args, \\(x) x[[names(x)]][[\"path\"]] <- names(x))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nopen_pay <- function(year,\n                     npi               = NULL,\n                     covered_type      = NULL,\n                     first             = NULL,\n                     last              = NULL,\n                     city              = NULL,\n                     state             = NULL,\n                     zip               = NULL,\n                     teaching_hospital = NULL,\n                     payment_form      = NULL,\n                     payment_nature    = NULL,\n                     payer             = NULL,\n                     payer_id          = NULL) {\n  \n  fn_args <- process_params(fn_fmls_names(), fields) |> \n    eval_bare() |> \n    compact()\n  \n  # if (any(has_operator(fn_args))) \n  # fn_args[has_operator(fn_args)] <- name_path(fn_args[has_operator(fn_args)])\n  \n  fn_args\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nopen_pay(year = 2021, npi = \"1043218118\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2021\n\n$covered_recipient_npi\n[1] \"1043218118\"\n```\n\n\n:::\n\n```{.r .cell-code}\nopen_pay(year = 2021, payment_nature = \"Royalty or License\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2021\n\n$nature_of_payment_or_transfer_of_value\n[1] \"Royalty or License\"\n```\n\n\n:::\n\n```{.r .cell-code}\nopen_pay(year = 2021, payment_form = \"Stock option\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2021\n\n$form_of_payment_or_transfer_of_value\n[1] \"Stock option\"\n```\n\n\n:::\n\n```{.r .cell-code}\nopen_pay(year = 2021, payer = \"Adaptive Biotechnologies Corporation\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2021\n\n$applicable_manufacturer_or_applicable_gpo_making_payment_name\n[1] \"Adaptive Biotechnologies Corporation\"\n```\n\n\n:::\n\n```{.r .cell-code}\nopen_pay(year = 2021, teaching_hospital = \"Nyu Langone Hospitals\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2021\n\n$teaching_hospital_name\n[1] \"Nyu Langone Hospitals\"\n```\n\n\n:::\n\n```{.r .cell-code}\nopen_pay(year = 2017:2023, npi = \"1043477615\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2017 2018 2019 2020 2021 2022 2023\n\n$covered_recipient_npi\n[1] \"1043477615\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstarts_with <- \\(x) {\n  structure(\n    c(path      = NA_character_,\n      operator  = \"STARTS_WITH\",\n      value     = x),\n    class = \"query_operator\")\n}\n\nstarts_with(\"Royalty or License\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                path             operator                value \n                  NA        \"STARTS_WITH\" \"Royalty or License\" \nattr(,\"class\")\n[1] \"query_operator\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- open_pay(\n  year = 2021, \n  payment_nature = starts_with(\"Royalty or License\"), \n  teaching_hospital = starts_with(\"NYU\"))\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2021\n\n$teaching_hospital_name\n         path      operator         value \n           NA \"STARTS_WITH\"         \"NYU\" \nattr(,\"class\")\n[1] \"query_operator\"\n\n$nature_of_payment_or_transfer_of_value\n                path             operator                value \n                  NA        \"STARTS_WITH\" \"Royalty or License\" \nattr(,\"class\")\n[1] \"query_operator\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(x[has_operator(x)])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"teaching_hospital_name\"                \n[2] \"nature_of_payment_or_transfer_of_value\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx[has_operator(x)][[1]][[\"path\"]] <- names(x[has_operator(x)])[[1]]\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2021\n\n$teaching_hospital_name\n                    path                 operator                    value \n\"teaching_hospital_name\"            \"STARTS_WITH\"                    \"NYU\" \nattr(,\"class\")\n[1] \"query_operator\"\n\n$nature_of_payment_or_transfer_of_value\n                path             operator                value \n                  NA        \"STARTS_WITH\" \"Royalty or License\" \nattr(,\"class\")\n[1] \"query_operator\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# map(args, \\(x) x[[names(x)]][[\"path\"]] <- names(x))\n# \n# x[has_operator(x)] <- providertwo:::map2(\n#   x[has_operator(x)], \n#   names(x[has_operator(x)]), \n#   function(x, y) x[[\"path\"]] <- y)\n# \n# x\n```\n:::\n\n## Query Format\n\n::: {.cell}\n\n```{.r .cell-code}\nurl_parse(\n  base_url = \"https://openpaymentsdata.cms.gov/api/1/datastore/\", \n  url      = \"query/fdc3c773-018a-412c-8a81-d7b8a13a037b/0\") |> \n  url_modify_query(\n    `conditions[0][property]` = \"covered_recipient_last_name\",\n    `conditions[0][value]`    = \"SMITH\",\n    `conditions[0][operator]` = \"=\",\n    schema                    = \"false\",\n    keys                      = \"false\",\n    results                   = \"false\",\n    offset                    = 0,\n    limit                     = 500) |>\n  url_build() |> \n  request() |> \n  providertwo:::perform_simple() |>\n  _[[\"count\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 77\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nurl_parse(\n  base_url = \"https://openpaymentsdata.cms.gov/api/1/datastore/\", \n  url      = \"query/fdc3c773-018a-412c-8a81-d7b8a13a037b/0\") |> \n  url_modify_query(\n    `conditions[0][property]` = \"covered_recipient_first_name\",\n    `conditions[0][value]`    = \"PATRICK\",\n    `conditions[0][operator]` = \"=\",\n    `conditions[1][property]` = \"covered_recipient_last_name\",\n    `conditions[1][value]`    = \"WARD\",\n    `conditions[1][operator]` = \"=\",\n    schema                    = \"false\",\n    keys                      = \"false\",\n    results                   = \"false\",\n    offset                    = 0) |>\n  url_build() |> \n  request() |> \n  providertwo:::perform_simple() |>\n  _[[\"count\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 48\n```\n\n\n:::\n:::\n\n### Other Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nexquery <- glue::glue(\n  '\n  \"filter[{i}][path]\" = \"{PATH}\",\n  \"filter[{i}][operator]\" = \"{OPERATOR}\",\n  \"filter[{i}][value]\" = \"{VALUE}\"\n  ', \n  i = 1:2, \n  PATH = c(\"STATE_CD\", \"LAST_NAME\"), \n  OPERATOR = \"=\",\n  VALUE = c(\"GA\", \"SMITH\")\n  ) |> \n  glue::glue_collapse(sep = \",\\n\")\n\nexquery\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\"filter[1][path]\" = \"STATE_CD\",\n\"filter[1][operator]\" = \"=\",\n\"filter[1][value]\" = \"GA\",\n\"filter[2][path]\" = \"LAST_NAME\",\n\"filter[2][operator]\" = \"=\",\n\"filter[2][value]\" = \"SMITH\"\n```\n\n\n:::\n\n```{.r .cell-code}\nglue::glue('c({exquery})') |> \n  rlang::parse_expr() |> \n  rlang::eval_bare()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    filter[1][path] filter[1][operator]    filter[1][value]     filter[2][path] \n         \"STATE_CD\"                 \"=\"                \"GA\"         \"LAST_NAME\" \nfilter[2][operator]    filter[2][value] \n                \"=\"             \"SMITH\" \n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglue::glue(\n  '\n  filter[{PATH}][operator]={OPERATOR}\n  filter[{PATH}][value]={VALUE}\n  ', \n  PATH = c(\"STATE_CD\", \"LAST_NAME\"), \n  OPERATOR = \"IN\",\n  VALUE = c(\"GA\", \"SMITH\")\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[STATE_CD][operator]=IN\nfilter[STATE_CD][value]=GA\nfilter[LAST_NAME][operator]=IN\nfilter[LAST_NAME][value]=SMITH\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nformat_syntax <- \\(name, value) {\n  setNames(\n    value, \n    paste0(\n      name, \n      \"[id-\", \n      seq_along(value), \n      \"][condition][value]\"))\n}\n\nformat_syntax(\"filter\", c(\"GA\", \"NY\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[id-1][condition][value] filter[id-2][condition][value] \n                          \"GA\"                           \"NY\" \n```\n\n\n:::\n\n```{.r .cell-code}\n# query_syntax <- c(\n#   \"filter[STATE_CD]\" = \"GA\",\n#   \"filter[LAST_NAME]\" = \"SMITH\"\n#   )\n```\n:::\n\n## Pagination\n\n::: {.cell}\n\n```{.r .cell-code}\nbase <- request(\"https://data.cms.gov/data-api/v1/dataset\") |> \n  req_url_path_append(\"9887a515-7552-4693-bf58-735c77af46d7\") |> \n  req_url_path_append(\"data\")\n\nbase\n\nstats <- base |> \n  req_url_path_append(\"stats\")\n\nstats\n\nstats <- stats |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nstats |> purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- $found_rows i1  50473\n- $total_rows i1  50473\n```\n\n\n:::\n\n```{.r .cell-code}\n# Offset shouldn't go to 50000\nprovidertwo:::offset_seq(stats$found_rows, 5000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]     0  5000 10000 15000 20000 25000 30000 35000 40000 45000 50000\n```\n\n\n:::\n\n```{.r .cell-code}\nurls <- glue::glue(\n  \"{base$url}\",\n  \"?size=5000&\",\n  \"offset=\",\n  \"{providertwo:::offset_seq(stats$found_rows, 5000)}\"\n)\n\nurls\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=0\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=5000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=10000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=15000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=20000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=25000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=30000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=35000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=40000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=45000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=50000\n```\n\n\n:::\n\n```{.r .cell-code}\nresp <- urls[1:3] |> \n  map(\n    function(x) {\n      request(x) |> \n        req_perform() |> \n        resp_body_json(simplifyVector = TRUE) |> \n        tibble()\n    }) |> \n  list_rbind(names_to = \"reqID\") |> \n  janitor::clean_names()\n\nresp |> \n  janitor::get_dupes()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 15\n  req_id first_name last_name npi        specialty  optout_effective_date\n   <int> <chr>      <chr>     <chr>      <chr>      <chr>                \n1      2 Joseph     Kunnel    1740295518 Dentist    09/25/2015           \n2      2 Joseph     Kunnel    1740295518 Dentist    09/25/2015           \n3      3 David      Fernitz   1225232226 Dentist    03/15/2016           \n4      3 David      Fernitz   1225232226 Dentist    03/15/2016           \n5      3 Martin     Drooker   1326103029 Psychiatry 04/01/2016           \n6      3 Martin     Drooker   1326103029 Psychiatry 04/01/2016           \n# ℹ 9 more variables: optout_end_date <chr>, first_line_street_address <chr>,\n#   second_line_street_address <chr>, city_name <chr>, state_code <chr>,\n#   zip_code <chr>, eligible_to_order_and_refer <chr>, last_updated <chr>,\n#   dupe_count <int>\n```\n\n\n:::\n\n```{.r .cell-code}\ndupes <- resp |> \n  count(npi, sort = TRUE) |> \n  filter(n > 1) |> \n  pull(npi)\n\nresp |> \n  filter(npi %in% dupes) |> \n  arrange(npi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 159 × 14\n   req_id first_name last_name npi        specialty        optout_effective_date\n    <int> <chr>      <chr>     <chr>      <chr>            <chr>                \n 1      2 Barbara    Lino      1013130632 Clinical Psycho… 04/16/2021           \n 2      2 Barbara    Lino      1013130632 Clinical Psycho… 04/19/2021           \n 3      2 Victoria   Lasser    1043597586 Clinical Psycho… 10/21/2015           \n 4      3 Victoria   Lasser    1043597586 Clinical Psycho… 01/13/2016           \n 5      2 Peter      Chang     1053320606 Dentist          09/25/2015           \n 6      3 Peter      Chang     1053320606 Dentist          05/31/2016           \n 7      1 Donna      Lewinter  1053493767 Psychiatry       10/10/2002           \n 8      1 Donna      Lewinter  1053493767 Psychiatry       10/10/2012           \n 9      1 Jeffrey    Dean      1073687711 Oral Surgery     06/25/2023           \n10      1 Jeffrey    Dean      1073687711 Maxillofacial S… 06/25/2013           \n# ℹ 149 more rows\n# ℹ 8 more variables: optout_end_date <chr>, first_line_street_address <chr>,\n#   second_line_street_address <chr>, city_name <chr>, state_code <chr>,\n#   zip_code <chr>, eligible_to_order_and_refer <chr>, last_updated <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\nresp |> \n  filter(npi %in% c(\"1225232226\", \"1740295518\", \"1326103029\")) |> \n  relocate(last_updated) |> \n  arrange(npi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 14\n  last_updated req_id first_name last_name npi   specialty optout_effective_date\n  <chr>         <int> <chr>      <chr>     <chr> <chr>     <chr>                \n1 10/15/2024        3 David      Fernitz   1225… Dentist   03/15/2016           \n2 10/15/2024        3 David      Fernitz   1225… Dentist   03/15/2016           \n3 05/15/2024        3 Martin     Drooker   1326… Psychiat… 04/01/2016           \n4 05/15/2024        3 Martin     Drooker   1326… Psychiat… 04/01/2016           \n5 10/15/2024        2 Joseph     Kunnel    1740… Dentist   09/25/2015           \n6 10/15/2024        2 Joseph     Kunnel    1740… Dentist   09/25/2015           \n# ℹ 7 more variables: optout_end_date <chr>, first_line_street_address <chr>,\n#   second_line_street_address <chr>, city_name <chr>, state_code <chr>,\n#   zip_code <chr>, eligible_to_order_and_refer <chr>\n```\n\n\n:::\n:::\n\n## Example 2\n\nSelect Dataset\n\n::: {.cell}\n\n```{.r .cell-code}\ndistribution <- read_json_arrow(\n  file = \"https://data.cms.gov/data.json\",\n  col_select = c(\"dataset\"),\n  as_data_frame = TRUE) |> \n  to_duckdb() |> \n  pull(dataset) |> \n  pluck(1) |> \n  select(distribution) |> \n  as_tibble() |> \n  unnest(distribution) |> \n  # rename_with(remove_at_symbol) |> \n  filter(format      == \"API\", \n         description == \"latest\")\n\ndistribution |> \n  filter(grepl(\"Enrollment\", title)) |> \n  pull(title)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Federally Qualified Health Center Enrollments : 2025-01-01\"      \n[2] \"Home Health Agency Enrollments : 2025-01-01\"                     \n[3] \"Hospice Enrollments : 2025-01-01\"                                \n[4] \"Hospital Enrollments : 2025-01-01\"                               \n[5] \"Medicare Fee-For-Service Public Provider Enrollment : 2025-01-01\"\n[6] \"Rural Health Clinic Enrollments : 2025-01-01\"                    \n[7] \"Skilled Nursing Facility Enrollments : 2025-04-01\"               \n[8] \"Medicare Monthly Enrollment : 2025-01-01\"                        \n```\n\n\n:::\n\n```{.r .cell-code}\naccessURL <- distribution |> \n  filter(grepl(\"Opt Out Affidavits : \", title)) |> \n  pull(accessURL)\n\naccessURL\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data\"\n```\n\n\n:::\n:::\n\nFormat Query\n\n::: {.cell}\n\n```{.r .cell-code}\nquery <- glue::glue(\n  'c(\n    \"filter[{i}][path]\"  = \"{PATH}\",\n    \"filter[{i}][value]\" = \"{VALUE}\"\n  )', \n  i = 1, \n  PATH = \"State Code\", \n  VALUE = \"CA\")\n\nquery\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nc(\n  \"filter[1][path]\"  = \"State Code\",\n  \"filter[1][value]\" = \"CA\"\n)\n```\n\n\n:::\n\n```{.r .cell-code}\nquery <- query |> \n  parse_expr() |> \n  eval_bare()\n\nquery\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n filter[1][path] filter[1][value] \n    \"State Code\"             \"CA\" \n```\n\n\n:::\n:::\n\nRetrieve Number of Results\n\n::: {.cell}\n\n```{.r .cell-code}\nqueryurl <- accessURL |> \n  request() |> \n  req_url_query(size = 5000, !!!query)\n\nnresults <- queryurl |> \n  req_url_path_append(\"stats\") |> \n  req_perform() |> \n  resp_body_json() |> \n  fuimus::gelm(\"found\")\n\nnresults\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9690\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl_parse(queryurl$url)\n```\n:::\n\nGenerate and Send Requests\n\n::: {.cell}\n\n```{.r .cell-code}\nreqs <- map(\n  glue(\n    \"{url}\", \n    \"&offset={off}\", \n    url = queryurl$url, \n    off = providertwo:::offset_seq(nresults, 5000)), \n  httr2::request)\n\nres <- req_perform_parallel(reqs) |> \n  resps_successes() |> \n  map(\\(x) tibble(resp_body_json(x, simplifyVector = TRUE))) |> \n  bind_rows()\n\nprovidertwo:::set_clean(res, names(res)) |> \n  providertwo:::map_na_if() |> \n  mtt(\n    optout_effective_date = providertwo:::as_date(optout_effective_date, fmt = \"%m/%d/%Y\"),\n    optout_end_date = providertwo:::as_date(optout_end_date, fmt = \"%m/%d/%Y\"),\n    last_updated = providertwo:::as_date(last_updated, fmt = \"%m/%d/%Y\")\n    )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9,690 × 13\n   first_name last_name npi      specialty optout_effective_date optout_end_date\n   <chr>      <chr>     <chr>    <chr>     <date>                <date>         \n 1 Namir      Damluji   1124116… Psychiat… 2020-07-26            2026-07-26     \n 2 Lesley     Macarthur 1073604… Psychiat… 2012-04-05            2026-04-05     \n 3 Sharon     Bae       1346211… Internal… 2012-06-01            2026-06-01     \n 4 Albert     Fuchs     1013964… Internal… 2012-07-01            2026-07-01     \n 5 Abilash    Gopal     1306179… Psychiat… 2016-11-29            2026-11-29     \n 6 Linda      Schaffer  1740495… Psychiat… 2012-06-14            2026-06-14     \n 7 Charles    Schaffer  1114132… Psychiat… 2012-06-14            2026-06-14     \n 8 Cheri      Adrian    1366597… Clinical… 2012-05-25            2026-05-25     \n 9 Richard    Wolf      1891713… Internal… 2012-08-16            2026-08-16     \n10 Robert     Woods     1881601… Psychiat… 2012-06-11            2026-06-11     \n# ℹ 9,680 more rows\n# ℹ 7 more variables: first_line_street_address <chr>,\n#   second_line_street_address <chr>, city_name <chr>, state_code <chr>,\n#   zip_code <chr>, eligible_to_order_and_refer <chr>, last_updated <date>\n```\n\n\n:::\n:::\n\n### Testing in a Function\n\n::: {.cell}\n\n```{.r .cell-code}\nprotofunc <- function(id     = NULL, \n                      state  = NULL, \n                      name   = NULL, \n                      number = NULL) {\n  arg <- class_args(\n    id     = id,\n    state  = state,\n    name   = name,\n    number = number)\n  \n  query_comparison(compact(props(arg)))\n  \n}\n\nprotofunc(state  = c(\"GA\"), \n          name   = \"Jerry\", \n          number = 300.12)\n```\n:::\n\n## Try Again\n\n::: {.cell}\n\n```{.r .cell-code}\narg_list <- new_class(\n  \"arg_list\",\n  properties = list(params = class_list),\n  constructor = function(...) new_object(S7_object(), params = rlang::list2(...)),\n  validator = function(self) if (!rlang::is_named(self@params)) \"all @params must all be named\")\n\nless_than <- function(x, equals = FALSE) {\n  `attr<-`(x, \"operator\", if (equals) \"<=\" else \"<\")\n}\n\nis_in <- function(x, negate = FALSE) {\n  `attr<-`(x, \"operator\", ifelse(negate, \"NOT IN\", \"IN\"))\n}\n\na <- arg_list(\n  npi   = less_than(\"1234567890\"),\n  state = is_in(state.abb),\n  name  = \"Jerry\")\n\n# get_operator <- purrr::attr_getter(\"operator\")\n\n# attr(prop(a, \"params\")$npi, \"operator\")\n\nhas_operator <- \\(x) names(attributes(x)) %in% \"operator\"\n\nhas_operator(a@params$npi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nhas_operator(a@params$name)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nlogical(0)\n```\n\n\n:::\n\n```{.r .cell-code}\nmap(a@params, has_operator) |> \n  compact() |> \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"npi\"   \"state\"\n```\n\n\n:::\n\n```{.r .cell-code}\na@params[names(a@params) %in% \"npi\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$npi\n[1] \"1234567890\"\nattr(,\"operator\")\n[1] \"<\"\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstartswith <- \\(x) {\n  list(\n    OPERATOR = \"STARTS_WITH\", \n    VALUE    = as.character(x)\n  )\n}\n\nstartswith(\"Royalty or License\")\n\nbetween <- \\(x, negate = FALSE) {\n  list(\n    OPERATOR = ifelse(negate, \"NOT BETWEEN\", \"BETWEEN\"), \n    VALUE    = as.character(x)\n  )\n}\n\nbetween(c(1, 10))\n\nbetween(c(1, 10), negate = TRUE)\n\nendswith <- \\(x) {\n  list(\n    OPERATOR = \"ENDS_WITH\", \n    VALUE    = as.character(x)\n  )\n}\n\nendswith(\"NYU\")\n\nis_in <- \\(x, negate = FALSE) {\n  list(\n    OPERATOR = ifelse(negate, \"NOT IN\", \"IN\"), \n    VALUE    = as.character(x)\n  )\n}\n\nis_in(c(\"GA\", \"NY\"))\n\nis_in(c(\"GA\", \"NY\"), negate = TRUE)\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(npi = ~ providertwo:::starts_with(\"gdklfgj\"))\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$npi\n~providertwo:::starts_with(\"gdklfgj\")\n```\n\n\n:::\n\n```{.r .cell-code}\nx$npi[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n`~`()\n```\n\n\n:::\n\n```{.r .cell-code}\nrlang::is_formula(x$npi, lhs = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nfoo <- function(npi            = NULL,\n                entity         = NULL,\n                first          = NULL,\n                last           = NULL,\n                organization   = NULL,\n                name_type      = NULL,\n                taxonomy_desc  = NULL,\n                city           = NULL,\n                state          = NULL,\n                zip            = NULL,\n                country        = NULL) {\n  rlang::list2(\n    number               = npi,\n    enumeration_type     = entity,\n    first_name           = first,\n    last_name            = last,\n    name_purpose         = name_type,\n    organization_name    = organization,\n    taxonomy_description = taxonomy_desc,\n    city                 = city,\n    state                = state,\n    postal_code          = zip,\n    country_code         = country,\n    skip                 = 0L\n  )\n}\n\nx <- foo(npi = ~ providertwo:::starts_with(1234567890))\n\n\nrlang::f_lhs(x$number) <- rlang::expr(NPI)\n\nx$number\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNPI ~ providertwo:::starts_with(1234567890)\n```\n\n\n:::\n\n```{.r .cell-code}\nrlang::f_lhs(x$number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNPI\n```\n\n\n:::\n\n```{.r .cell-code}\nrlang::f_rhs(x$number) |> \n  rlang::eval_tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$field\ncharacter(0)\n\n$operator\n[1] \"STARTS_WITH\"\n\n$input\n[1] \"1234567890\"\n```\n\n\n:::\n:::\n\n",
    "supporting": [
      "wk_query_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}