{
  "hash": "6bf81553dc97a96d7ec885650b0500a0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Query DSL\"\neditor_options: \n   chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n## `class_query`\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_query <- new_class(\n  \"class_query\",\n  properties = list(\n    path = class_character,\n    operator = class_character,\n    value = class_vector,\n    limit = class_numeric,\n    sort = class_character, \n    column = class_vector,\n    group = new_property(\n      class_list,\n      default = list(\n        conjunction = \"AND\",\n        memberOf = \"\"))\n  )\n)\n```\n:::\n\n\n::: callout\n\n## JSON:API Allowed Operators\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble(\n  ops = c(\"=\", \"<>\", \">\", \">=\", \"<\", \"<=\", \n    \"STARTS_WITH\", \"CONTAINS\", \"ENDS_WITH\", \n    \"IN\", \"NOT IN\", \"BETWEEN\", \"NOT BETWEEN\", \n    \"IS NULL\", \"IS NOT NULL\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 15 Ã— 1\n   ops        \n   <chr>      \n 1 =          \n 2 <>         \n 3 >          \n 4 >=         \n 5 <          \n 6 <=         \n 7 STARTS_WITH\n 8 CONTAINS   \n 9 ENDS_WITH  \n10 IN         \n11 NOT IN     \n12 BETWEEN    \n13 NOT BETWEEN\n14 IS NULL    \n15 IS NOT NULL\n```\n\n\n:::\n:::\n\n::: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nprotofunc <- function(id, \n                      state, \n                      name, \n                      number) {\n  rlang::list2(\n    id = id,\n    state = state,\n    name = name,\n    number = number\n  )\n}\n\nprotofunc(id = 1234567890, \n          state = \"GA\", \n          name = \"Jerry\", \n          number = 300.12)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$id\n[1] 1234567890\n\n$state\n[1] \"GA\"\n\n$name\n[1] \"Jerry\"\n\n$number\n[1] 300\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreater_than <- \\(arg, value) {\n  glue::glue(\n  \"\n  [condition][path]={arg}&\n  [condition][operator]=>&\n  [condition][value]={value}&\n  \"\n  )\n}\n\ngreater_than(\"overall_rating\", 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[condition][path]=overall_rating&\n[condition][operator]=>&\n[condition][value]=3&\n```\n\n\n:::\n\n```{.r .cell-code}\ngreater_or_equal <- \\(arg, value) {\n  glue::glue(\n  \"filter[fID-1][condition][path]={arg}&\\\\\n  filter[fID-1][condition][operator]=>=&\\\\\n  filter[fID-1][condition][value]={value}\"\n  )\n}\n\ngreater_or_equal(\"overall_rating\", 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[fID-1][condition][path]=overall_rating&filter[fID-1][condition][operator]=>=&filter[fID-1][condition][value]=3\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_url <- glue::as_glue(\"https://data.cms.gov/data-api/v1/dataset/d10d792e-ea6e-4145-8512-34efbc1be04b/data?size=10&offset=0&\")\n\ntest_url <- test_url + greater_or_equal(\"overall_rating\", 3)\n\ncurl::curl_parse_url(test_url)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$url\n[1] \"https://data.cms.gov/data-api/v1/dataset/d10d792e-ea6e-4145-8512-34efbc1be04b/data?size=10&offset=0&filter[fID-1][condition][path]=overall_rating&filter[fID-1][condition][operator]=>=&filter[fID-1][condition][value]=3\"\n\n$scheme\n[1] \"https\"\n\n$host\n[1] \"data.cms.gov\"\n\n$port\nNULL\n\n$path\n[1] \"/data-api/v1/dataset/d10d792e-ea6e-4145-8512-34efbc1be04b/data\"\n\n$query\n[1] \"size=10&offset=0&filter[fID-1][condition][path]=overall_rating&filter[fID-1][condition][operator]=>=&filter[fID-1][condition][value]=3\"\n\n$fragment\nNULL\n\n$user\nNULL\n\n$password\nNULL\n\n$params\n                              size                             offset \n                              \"10\"                                \"0\" \n    filter[fID-1][condition][path] filter[fID-1][condition][operator] \n                  \"overall_rating\"                                \">\" \n   filter[fID-1][condition][value] \n                               \"3\" \n```\n\n\n:::\n:::\n\n## Query Generation\n\n::: {.cell}\n\n```{.r .cell-code}\nformat_syntax <- \\(name, value) {\n  setNames(value, paste0(name, \"[id-\", seq_along(value), \"][condition][value]\"))\n}\n\nformat_syntax(name = \"filter\", value = c(\"GA\", \"NY\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[id-1][condition][value] filter[id-2][condition][value] \n                          \"GA\"                           \"NY\" \n```\n\n\n:::\n\n```{.r .cell-code}\nrequest(\"https://example.com\") |>\n  req_url_query(!!!format_syntax(\"filter\", c(\"GA\", \"NY\")))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n<httr2_request>\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nGET\nhttps://example.com/?filter%5Bid-1%5D%5Bcondition%5D%5Bvalue%5D=GA&filter%5Bid-2%5D%5Bcondition%5D%5Bvalue%5D=NY\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBody: empty\n```\n\n\n:::\n:::\n\n--------------------------------------------------------------------------------\n\n## Building Queries\n\n   1. Select Dataset/Method\n   1. Build JSON Query\n   1. Retrieve Number of Results\n   1. Build Offset Sequence\n   1. Build Request\n\n```r\ncatalog:        main_catalog\n  format:       API\n  description:  latest\n  title:        Medicare Fee-For-Service Public Provider Enrollment\n  accessURL:    \"\"\n```\n\n```{.yaml}\nscheme:   https://\nhostname: data.cms.gov/\npath:\n          head:       data-api/v1/dataset/\n          identifier: 9887a515-7552-4693-bf58-735c77af46d7/\n          tail:       data?\n          nobs:       data/stats?\nquery:\n          filter:     1\n          path:       PROVIDER_TYPE_DESC\n          operator:   =\n          value:      PRACTITIONER - GENERAL PRACTICE\n          call:       filter[PROVIDER_TYPE_DESC]=PRACTITIONER - GENERAL PRACTICE\n```\n",
    "supporting": [
      "wk_query_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}