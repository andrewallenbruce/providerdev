{
  "hash": "c8673dfb38df44348cf0980a551a0728",
  "result": {
    "engine": "knitr",
    "markdown": "# Querying {#sec-querying}\n\n\n\n## Building Queries\n\n   1. Select Dataset/Method\n   1. Build JSON Query\n   1. Retrieve Number of Results\n   1. Build Offset Sequence\n   1. Build Request\n\n```{.yaml}\ncatalog: public\n  format: API\n  description: latest\n  title: Medicare Fee-For-Service Public Provider Enrollment\n  url:\n    scheme: https:\n    host: data.cms.gov\n    path:\n      head: data-api/v1/dataset\n      guid: 9887a515-7552-4693-bf58-735c77af46d7\n      tail: data-viewer\n      nobs: stats\n    query:\n      filter: 1\n      path: PROVIDER_TYPE_DESC\n      operator: =\n      value: PRACTITIONER - GENERAL PRACTICE\n```\n\n## Operators\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"ggzceivtia\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>@import url(\"https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n#ggzceivtia table {\n  font-family: 'JetBrains Mono', system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#ggzceivtia thead, #ggzceivtia tbody, #ggzceivtia tfoot, #ggzceivtia tr, #ggzceivtia td, #ggzceivtia th {\n  border-style: none;\n}\n\n#ggzceivtia p {\n  margin: 0;\n  padding: 0;\n}\n\n#ggzceivtia .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: none;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#ggzceivtia .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#ggzceivtia .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#ggzceivtia .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#ggzceivtia .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ggzceivtia .gt_bottom_border {\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ggzceivtia .gt_col_headings {\n  border-top-style: none;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ggzceivtia .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#ggzceivtia .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#ggzceivtia .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#ggzceivtia .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#ggzceivtia .gt_column_spanner {\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#ggzceivtia .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#ggzceivtia .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  border-top-style: none;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#ggzceivtia .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  border-top-style: none;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#ggzceivtia .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#ggzceivtia .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#ggzceivtia .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: none;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#ggzceivtia .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 80%;\n  font-weight: bolder;\n  text-transform: uppercase;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ggzceivtia .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#ggzceivtia .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#ggzceivtia .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#ggzceivtia .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ggzceivtia .gt_first_summary_row {\n  border-top-style: none;\n  border-top-color: #D3D3D3;\n}\n\n#ggzceivtia .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#ggzceivtia .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ggzceivtia .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ggzceivtia .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: none;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#ggzceivtia .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: none;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ggzceivtia .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#ggzceivtia .gt_table_body {\n  border-top-style: none;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ggzceivtia .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ggzceivtia .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ggzceivtia .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ggzceivtia .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ggzceivtia .gt_left {\n  text-align: left;\n}\n\n#ggzceivtia .gt_center {\n  text-align: center;\n}\n\n#ggzceivtia .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#ggzceivtia .gt_font_normal {\n  font-weight: normal;\n}\n\n#ggzceivtia .gt_font_bold {\n  font-weight: bold;\n}\n\n#ggzceivtia .gt_font_italic {\n  font-style: italic;\n}\n\n#ggzceivtia .gt_super {\n  font-size: 65%;\n}\n\n#ggzceivtia .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#ggzceivtia .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#ggzceivtia .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#ggzceivtia .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#ggzceivtia .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#ggzceivtia .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#ggzceivtia .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#ggzceivtia .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#ggzceivtia div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"true\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_heading\">\n      <td colspan=\"2\" class=\"gt_heading gt_title gt_font_normal gt_bottom_border\" style><i>JSON<b>:</b>API</i> <span style=\"color:gray;\"><b>Allowed Operations</b></span></td>\n    </tr>\n    \n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"ops\" class=\"gt_row gt_left\">=</td>\n<td headers=\"impl\" class=\"gt_row gt_left\">default</td></tr>\n    <tr><td headers=\"ops\" class=\"gt_row gt_left\">&lt;&gt;</td>\n<td headers=\"impl\" class=\"gt_row gt_left\">notequal(x)</td></tr>\n    <tr><td headers=\"ops\" class=\"gt_row gt_left\">&gt;</td>\n<td headers=\"impl\" class=\"gt_row gt_left\">greaterthan(x)</td></tr>\n    <tr><td headers=\"ops\" class=\"gt_row gt_left\">&gt;=</td>\n<td headers=\"impl\" class=\"gt_row gt_left\">greater_or_equal(x)</td></tr>\n    <tr><td headers=\"ops\" class=\"gt_row gt_left\">&lt;</td>\n<td headers=\"impl\" class=\"gt_row gt_left\">lessthan(x)</td></tr>\n    <tr><td headers=\"ops\" class=\"gt_row gt_left\">&lt;=</td>\n<td headers=\"impl\" class=\"gt_row gt_left\">less_or_equal(x)</td></tr>\n    <tr><td headers=\"ops\" class=\"gt_row gt_left\">STARTS_WITH</td>\n<td headers=\"impl\" class=\"gt_row gt_left\">startswith(x)</td></tr>\n    <tr><td headers=\"ops\" class=\"gt_row gt_left\">CONTAINS</td>\n<td headers=\"impl\" class=\"gt_row gt_left\">includes(x)</td></tr>\n    <tr><td headers=\"ops\" class=\"gt_row gt_left\">ENDS_WITH</td>\n<td headers=\"impl\" class=\"gt_row gt_left\">endswith(x)</td></tr>\n    <tr><td headers=\"ops\" class=\"gt_row gt_left\">IN</td>\n<td headers=\"impl\" class=\"gt_row gt_left\">in(x)</td></tr>\n    <tr><td headers=\"ops\" class=\"gt_row gt_left\">NOT IN</td>\n<td headers=\"impl\" class=\"gt_row gt_left\">notin(x)</td></tr>\n    <tr><td headers=\"ops\" class=\"gt_row gt_left\">BETWEEN</td>\n<td headers=\"impl\" class=\"gt_row gt_left\">inside(x)</td></tr>\n    <tr><td headers=\"ops\" class=\"gt_row gt_left\">NOT BETWEEN</td>\n<td headers=\"impl\" class=\"gt_row gt_left\">outside(x)</td></tr>\n    <tr><td headers=\"ops\" class=\"gt_row gt_left\">IS NULL</td>\n<td headers=\"impl\" class=\"gt_row gt_left\">X</td></tr>\n    <tr><td headers=\"ops\" class=\"gt_row gt_left\">IS NOT NULL</td>\n<td headers=\"impl\" class=\"gt_row gt_left\">X</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n## S7\n\n### `class_query`\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_query <- new_class(\n  \"class_query\",\n  properties = list(\n    path     = class_character,\n    operator = class_character,\n    value    = class_vector,\n    limit    = class_numeric,\n    sort     = class_character, \n    column   = class_vector,\n    group    = new_property(\n      class_list,\n      default = list(\n        conjunction = \"AND\",\n        memberOf    = \"\"))\n  )\n)\n```\n:::\n\n### `class_args`\n\n::: {.cell}\n\n```{.r .cell-code}\nnull_numeric    <- new_union(NULL, class_numeric)\nnull_vector     <- new_union(NULL, class_vector)\nnull_character  <- new_union(NULL, class_character)\n\nclass_args <- new_class(\n  \"class_args\",\n  properties = list(\n    id     = null_numeric,\n    state  = null_character,\n    name   = null_character,\n    number = null_numeric\n  ),\n  validator = function(self) { \n    if (not_null(self@state) && \n        any(!self@state %in% state.abb)) \n      paste(\"`state`\", self@state, \"not found\")\n  }\n)\n\ntry(class_args(\n  id     = 1234567890, \n  state  = \"ZZ\",\n  number = \"300.12\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nError : <class_args> object properties are invalid:\n- @number must be <NULL>, <integer>, or <double>, not <character>\n```\n\n\n:::\n\n```{.r .cell-code}\ntry(class_args(\n  state  = \"ZZ\",\n  name   = \"Jerry\",\n  number = 300.12))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nError : <class_args> object is invalid:\n- `state` ZZ not found\n```\n\n\n:::\n\n```{.r .cell-code}\nclass_args(state  = c(\"GA\", \"MD\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class_args>\n @ id    : NULL\n @ state : chr [1:2] \"GA\" \"MD\"\n @ name  : NULL\n @ number: NULL\n```\n\n\n:::\n:::\n\n## `query` Formatters\n\n::: {.cell}\n\n```{.r .cell-code}\nex <- list(\n  state  = c(\"GA\", \"MD\"), \n  name   = \"Jerry\", \n  number = 300.12)\n```\n:::\n\n### `query_comparison`\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_comparison <- function(args, operator = c(\"=\", \">\", \">=\", \"<\", \"<=\", \"<>\")) {\n  \n  operator <- match.arg(operator)\n  args     <- args[\n    cheapr::which_(\n      cheapr::lengths_(\n        args, \n        names = TRUE) == 1\n      )]\n  \n  glue::glue(\n  \"\n  filter[{seq_along(args)}][condition][path]={names(args)}\n  filter[{seq_along(args)}][condition][operator]={operator}\n  filter[{seq_along(args)}][condition][value]={delist(args)}\n  \"\n  )\n}\n\nquery_comparison(ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[1][condition][path]=name\nfilter[1][condition][operator]==\nfilter[1][condition][value]=Jerry\nfilter[2][condition][path]=number\nfilter[2][condition][operator]==\nfilter[2][condition][value]=300.12\n```\n\n\n:::\n\n```{.r .cell-code}\nquery_comparison(ex, \">=\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[1][condition][path]=name\nfilter[1][condition][operator]=>=\nfilter[1][condition][value]=Jerry\nfilter[2][condition][path]=number\nfilter[2][condition][operator]=>=\nfilter[2][condition][value]=300.12\n```\n\n\n:::\n:::\n\n### `query_equals_simple`\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_equals_simple <- function(args) {\n  \n  args <- args[\n    cheapr::which_(\n      cheapr::lengths_(\n        args, \n        names = TRUE) == 1\n      )]\n  \n  glue::glue(\n  \"\n  filter[{names(args)}]={delist(args)}\n  \"\n  )\n}\n\nquery_equals_simple(ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[name]=Jerry\nfilter[number]=300.12\n```\n\n\n:::\n:::\n\n### `query_in_notin`\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_in_notin <- function(args, operator = c(\"IN\", \"NOT IN\")) {\n  \n  operator <- match.arg(operator)\n  args     <- args[cheapr::which_(cheapr::lengths_(args, names = TRUE) > 1)]\n  \n  glue::as_glue(\n    c(\n      glue::glue(\n        \"filter[f{seq_along(args)}][condition][path]={names(args)}\n        filter[f{seq_along(args)}][condition][operator]={operator}\"\n        ), \n      glue::glue(\n        \"filter[f{seq_along(args)}]\",\n        \"[condition][value]\",\n        \"[{seq_along(delist(args))}]={delist(args)}\"\n        )\n      )\n    )\n}\n\nquery_in_notin(ex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[f1][condition][path]=state\nfilter[f1][condition][operator]=IN\nfilter[f1][condition][value][1]=GA\nfilter[f1][condition][value][2]=MD\n```\n\n\n:::\n\n```{.r .cell-code}\nquery_in_notin(ex, \"NOT IN\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[f1][condition][path]=state\nfilter[f1][condition][operator]=NOT IN\nfilter[f1][condition][value][1]=GA\nfilter[f1][condition][value][2]=MD\n```\n\n\n:::\n:::\n\n### Finalizing `query` Components\n\n::: {.cell}\n\n```{.r .cell-code}\nglue::as_glue(c(query_in_notin(ex), query_comparison(ex)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[f1][condition][path]=state\nfilter[f1][condition][operator]=IN\nfilter[f1][condition][value][1]=GA\nfilter[f1][condition][value][2]=MD\nfilter[1][condition][path]=name\nfilter[1][condition][operator]==\nfilter[1][condition][value]=Jerry\nfilter[2][condition][path]=number\nfilter[2][condition][operator]==\nfilter[2][condition][value]=300.12\n```\n\n\n:::\n:::\n\n### Testing in a Function\n\n::: {.cell}\n\n```{.r .cell-code}\nprotofunc <- function(id     = NULL, \n                      state  = NULL, \n                      name   = NULL, \n                      number = NULL) {\n  arg <- class_args(\n    id     = id,\n    state  = state,\n    name   = name,\n    number = number)\n  \n  query_comparison(compact(props(arg)))\n  \n}\n\nprotofunc(state  = c(\"GA\"), \n          name   = \"Jerry\", \n          number = 300.12)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[1][condition][path]=state\nfilter[1][condition][operator]==\nfilter[1][condition][value]=GA\nfilter[2][condition][path]=name\nfilter[2][condition][operator]==\nfilter[2][condition][value]=Jerry\nfilter[3][condition][path]=number\nfilter[3][condition][operator]==\nfilter[3][condition][value]=300.12\n```\n\n\n:::\n:::\n\n--------------------------------------------------------------------------------\n\n## New Function\n\n::: {.cell}\n\n```{.r .cell-code}\nfields <- c(\n  \"year\",\n  \"covered_recipient_npi\",                                         \n  \"covered_recipient_type\",                                        \n  \"covered_recipient_first_name\",                                  \n  \"covered_recipient_last_name\",                                   \n  \"recipient_city\",                                                \n  \"recipient_state\",                                               \n  \"recipient_zip_code\",                                            \n  \"teaching_hospital_name\",                                        \n  \"form_of_payment_or_transfer_of_value\",                          \n  \"nature_of_payment_or_transfer_of_value\",                        \n  \"applicable_manufacturer_or_applicable_gpo_making_payment_name\",\n  \"applicable_manufacturer_or_applicable_gpo_making_payment_id\")\n\nprocess_params <- \\(arg_names, field_names) {\n  \n  nms <- set_names(arg_names, field_names)\n  \n  parse_expr(\n    paste0(\n      \"list2(\", \n      glue_collapse(\n        glue('{names(nms)} = {unname(nms)}'), \n        sep = \", \"), \")\"))\n}\n\nhas_operator <- \\(args) {\n  map_lgl(args, function(x) inherits(x, \"query_operator\"))\n}\n\nname_path <- \\(args) {\n  map(args, \\(x) x[[names(x)]][[\"path\"]] <- names(x))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nopen_pay <- function(year,\n                     npi               = NULL,\n                     covered_type      = NULL,\n                     first             = NULL,\n                     last              = NULL,\n                     city              = NULL,\n                     state             = NULL,\n                     zip               = NULL,\n                     teaching_hospital = NULL,\n                     payment_form      = NULL,\n                     payment_nature    = NULL,\n                     payer             = NULL,\n                     payer_id          = NULL) {\n  \n  fn_args <- process_params(fn_fmls_names(), fields) |> \n    eval_bare() |> \n    compact()\n  \n  # if (any(has_operator(fn_args))) \n  # fn_args[has_operator(fn_args)] <- name_path(fn_args[has_operator(fn_args)])\n  \n  fn_args\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nopen_pay(year = 2021, npi = \"1043218118\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2021\n\n$covered_recipient_npi\n[1] \"1043218118\"\n```\n\n\n:::\n\n```{.r .cell-code}\nopen_pay(year = 2021, payment_nature = \"Royalty or License\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2021\n\n$nature_of_payment_or_transfer_of_value\n[1] \"Royalty or License\"\n```\n\n\n:::\n\n```{.r .cell-code}\nopen_pay(year = 2021, payment_form = \"Stock option\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2021\n\n$form_of_payment_or_transfer_of_value\n[1] \"Stock option\"\n```\n\n\n:::\n\n```{.r .cell-code}\nopen_pay(year = 2021, payer = \"Adaptive Biotechnologies Corporation\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2021\n\n$applicable_manufacturer_or_applicable_gpo_making_payment_name\n[1] \"Adaptive Biotechnologies Corporation\"\n```\n\n\n:::\n\n```{.r .cell-code}\nopen_pay(year = 2021, teaching_hospital = \"Nyu Langone Hospitals\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2021\n\n$teaching_hospital_name\n[1] \"Nyu Langone Hospitals\"\n```\n\n\n:::\n\n```{.r .cell-code}\nopen_pay(year = 2017:2023, npi = \"1043477615\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2017 2018 2019 2020 2021 2022 2023\n\n$covered_recipient_npi\n[1] \"1043477615\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstarts_with <- \\(x) {\n  structure(\n    c(path      = NA_character_,\n      operator  = \"STARTS_WITH\",\n      value     = x),\n    class = \"query_operator\")\n}\n\nstarts_with(\"Royalty or License\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                path             operator                value \n                  NA        \"STARTS_WITH\" \"Royalty or License\" \nattr(,\"class\")\n[1] \"query_operator\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx <- open_pay(\n  year = 2021, \n  payment_nature = starts_with(\"Royalty or License\"), \n  teaching_hospital = starts_with(\"NYU\"))\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2021\n\n$teaching_hospital_name\n         path      operator         value \n           NA \"STARTS_WITH\"         \"NYU\" \nattr(,\"class\")\n[1] \"query_operator\"\n\n$nature_of_payment_or_transfer_of_value\n                path             operator                value \n                  NA        \"STARTS_WITH\" \"Royalty or License\" \nattr(,\"class\")\n[1] \"query_operator\"\n```\n\n\n:::\n\n```{.r .cell-code}\nnames(x[has_operator(x)])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"teaching_hospital_name\"                \n[2] \"nature_of_payment_or_transfer_of_value\"\n```\n\n\n:::\n\n```{.r .cell-code}\nx[has_operator(x)][[1]][[\"path\"]] <- names(x[has_operator(x)])[[1]]\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$year\n[1] 2021\n\n$teaching_hospital_name\n                    path                 operator                    value \n\"teaching_hospital_name\"            \"STARTS_WITH\"                    \"NYU\" \nattr(,\"class\")\n[1] \"query_operator\"\n\n$nature_of_payment_or_transfer_of_value\n                path             operator                value \n                  NA        \"STARTS_WITH\" \"Royalty or License\" \nattr(,\"class\")\n[1] \"query_operator\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# map(args, \\(x) x[[names(x)]][[\"path\"]] <- names(x))\n# \n# x[has_operator(x)] <- providertwo:::map2(\n#   x[has_operator(x)], \n#   names(x[has_operator(x)]), \n#   function(x, y) x[[\"path\"]] <- y)\n# \n# x\n```\n:::\n\n\n## Query Format\n\n::: {.cell}\n\n```{.r .cell-code}\nurl_parse(\n  base_url = \"https://openpaymentsdata.cms.gov/api/1/datastore/\", \n  url      = \"query/fdc3c773-018a-412c-8a81-d7b8a13a037b/0\") |> \n  url_modify_query(\n    `conditions[0][property]` = \"covered_recipient_last_name\",\n    `conditions[0][value]`    = \"SMITH\",\n    `conditions[0][operator]` = \"=\",\n    schema = \"false\",\n    keys = \"false\",\n    results = \"false\",\n    offset = 0,\n    limit = 500) |>\n  url_build() |> \n  request() |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE) |> \n  _[[\"count\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 77\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nurl_parse(\n  base_url = \"https://openpaymentsdata.cms.gov/api/1/datastore/\", \n  url      = \"query/fdc3c773-018a-412c-8a81-d7b8a13a037b/0\") |> \n  url_modify_query(\n    `conditions[0][property]` = \"covered_recipient_first_name\",\n    `conditions[0][value]`    = \"PATRICK\",\n    `conditions[0][operator]` = \"=\",\n    `conditions[1][property]` = \"covered_recipient_last_name\",\n    `conditions[1][value]`    = \"WARD\",\n    `conditions[1][operator]` = \"=\",\n    schema                    = \"false\",\n    keys                      = \"false\",\n    results                   = \"false\",\n    offset                    = 0) |>\n  url_build() |> \n  request() |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE) |> \n  _[[\"count\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 48\n```\n\n\n:::\n:::\n\n### Other Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nexquery <- glue::glue(\n  '\n  \"filter[{i}][path]\" = \"{PATH}\",\n  \"filter[{i}][operator]\" = \"{OPERATOR}\",\n  \"filter[{i}][value]\" = \"{VALUE}\"\n  ', \n  i = 1:2, \n  PATH = c(\"STATE_CD\", \"LAST_NAME\"), \n  OPERATOR = \"=\",\n  VALUE = c(\"GA\", \"SMITH\")\n  ) |> \n  glue::glue_collapse(sep = \",\\n\")\n\nexquery\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\"filter[1][path]\" = \"STATE_CD\",\n\"filter[1][operator]\" = \"=\",\n\"filter[1][value]\" = \"GA\",\n\"filter[2][path]\" = \"LAST_NAME\",\n\"filter[2][operator]\" = \"=\",\n\"filter[2][value]\" = \"SMITH\"\n```\n\n\n:::\n\n```{.r .cell-code}\nglue::glue('c({exquery})') |> \n  rlang::parse_expr() |> \n  rlang::eval_bare()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    filter[1][path] filter[1][operator]    filter[1][value]     filter[2][path] \n         \"STATE_CD\"                 \"=\"                \"GA\"         \"LAST_NAME\" \nfilter[2][operator]    filter[2][value] \n                \"=\"             \"SMITH\" \n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglue::glue(\n  '\n  filter[{PATH}][operator]={OPERATOR}\n  filter[{PATH}][value]={VALUE}\n  ', \n  PATH = c(\"STATE_CD\", \"LAST_NAME\"), \n  OPERATOR = \"IN\",\n  VALUE = c(\"GA\", \"SMITH\")\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[STATE_CD][operator]=IN\nfilter[STATE_CD][value]=GA\nfilter[LAST_NAME][operator]=IN\nfilter[LAST_NAME][value]=SMITH\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nformat_syntax <- \\(name, value) {\n  setNames(\n    value, \n    paste0(\n      name, \n      \"[id-\", \n      seq_along(value), \n      \"][condition][value]\"))\n}\n\nformat_syntax(\"filter\", c(\"GA\", \"NY\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[id-1][condition][value] filter[id-2][condition][value] \n                          \"GA\"                           \"NY\" \n```\n\n\n:::\n\n```{.r .cell-code}\n# query_syntax <- c(\n#   \"filter[STATE_CD]\" = \"GA\",\n#   \"filter[LAST_NAME]\" = \"SMITH\"\n#   )\n```\n:::\n\n## Pagination\n\n::: {.cell}\n\n```{.r .cell-code}\nbase <- request(\"https://data.cms.gov/data-api/v1/dataset\") |> \n  req_url_path_append(\"9887a515-7552-4693-bf58-735c77af46d7\") |> \n  req_url_path_append(\"data\")\n\nbase\n\nstats <- base |> \n  req_url_path_append(\"stats\")\n\nstats\n\nstats <- stats |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nstats |> purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- $found_rows i1  48702\n- $total_rows i1  48702\n```\n\n\n:::\n\n```{.r .cell-code}\n# Offset shouldn't go to 50000\noffset_sequence(stats$found_rows, 5000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]     0  5000 10000 15000 20000 25000 30000 35000 40000 45000\n```\n\n\n:::\n\n```{.r .cell-code}\nurls <- glue::glue(\n  \"{base$url}\",\n  \"?size=5000&\",\n  \"offset=\",\n  \"{offset_sequence(stats$found_rows, 5000)}\"\n)\n\nurls\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=0\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=5000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=10000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=15000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=20000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=25000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=30000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=35000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=40000\nhttps://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=45000\n```\n\n\n:::\n\n```{.r .cell-code}\nresp <- urls[1:3] |> \n  map(\n    function(x) {\n      request(x) |> \n        req_perform() |> \n        resp_body_json(simplifyVector = TRUE) |> \n        tibble()\n    }) |> \n  list_rbind(names_to = \"reqID\") |> \n  janitor::clean_names()\n\nresp |> \n  janitor::get_dupes()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 15\n  req_id first_name last_name npi        specialty  optout_effective_date\n   <int> <chr>      <chr>     <chr>      <chr>      <chr>                \n1      2 Joseph     Kunnel    1740295518 Dentist    09/25/2015           \n2      2 Joseph     Kunnel    1740295518 Dentist    09/25/2015           \n3      3 David      Fernitz   1225232226 Dentist    03/15/2016           \n4      3 David      Fernitz   1225232226 Dentist    03/15/2016           \n5      3 Martin     Drooker   1326103029 Psychiatry 04/01/2016           \n6      3 Martin     Drooker   1326103029 Psychiatry 04/01/2016           \n# ℹ 9 more variables: optout_end_date <chr>, first_line_street_address <chr>,\n#   second_line_street_address <chr>, city_name <chr>, state_code <chr>,\n#   zip_code <chr>, eligible_to_order_and_refer <chr>, last_updated <chr>,\n#   dupe_count <int>\n```\n\n\n:::\n\n```{.r .cell-code}\ndupes <- resp |> \n  count(npi, sort = TRUE) |> \n  filter(n > 1) |> \n  pull(npi)\n\nresp |> \n  filter(npi %in% dupes) |> \n  arrange(npi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 161 × 14\n   req_id first_name last_name npi        specialty        optout_effective_date\n    <int> <chr>      <chr>     <chr>      <chr>            <chr>                \n 1      2 Barbara    Lino      1013130632 Clinical Psycho… 04/16/2021           \n 2      2 Barbara    Lino      1013130632 Clinical Psycho… 04/19/2021           \n 3      2 Victoria   Lasser    1043597586 Clinical Psycho… 10/21/2015           \n 4      3 Victoria   Lasser    1043597586 Clinical Psycho… 01/13/2016           \n 5      2 Peter      Chang     1053320606 Dentist          09/25/2015           \n 6      3 Peter      Chang     1053320606 Dentist          05/31/2016           \n 7      1 Donna      Lewinter  1053493767 Psychiatry       10/10/2002           \n 8      1 Donna      Lewinter  1053493767 Psychiatry       10/10/2012           \n 9      1 Jeffrey    Dean      1073687711 Oral Surgery     06/25/2023           \n10      1 Jeffrey    Dean      1073687711 Maxillofacial S… 06/25/2013           \n# ℹ 151 more rows\n# ℹ 8 more variables: optout_end_date <chr>, first_line_street_address <chr>,\n#   second_line_street_address <chr>, city_name <chr>, state_code <chr>,\n#   zip_code <chr>, eligible_to_order_and_refer <chr>, last_updated <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\nresp |> \n  filter(npi %in% c(\"1225232226\", \"1740295518\", \"1326103029\")) |> \n  relocate(last_updated) |> \n  arrange(npi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 14\n  last_updated req_id first_name last_name npi   specialty optout_effective_date\n  <chr>         <int> <chr>      <chr>     <chr> <chr>     <chr>                \n1 10/15/2024        3 David      Fernitz   1225… Dentist   03/15/2016           \n2 10/15/2024        3 David      Fernitz   1225… Dentist   03/15/2016           \n3 05/15/2024        3 Martin     Drooker   1326… Psychiat… 04/01/2016           \n4 05/15/2024        3 Martin     Drooker   1326… Psychiat… 04/01/2016           \n5 10/15/2024        2 Joseph     Kunnel    1740… Dentist   09/25/2015           \n6 10/15/2024        2 Joseph     Kunnel    1740… Dentist   09/25/2015           \n# ℹ 7 more variables: optout_end_date <chr>, first_line_street_address <chr>,\n#   second_line_street_address <chr>, city_name <chr>, state_code <chr>,\n#   zip_code <chr>, eligible_to_order_and_refer <chr>\n```\n\n\n:::\n:::\n\n## Example 2\n\nSelect Dataset\n\n::: {.cell}\n\n```{.r .cell-code}\ndistribution <- read_json_arrow(\n  file = \"https://data.cms.gov/data.json\",\n  col_select = c(\"dataset\"),\n  as_data_frame = TRUE) |> \n  to_duckdb() |> \n  pull(dataset) |> \n  pluck(1) |> \n  select(distribution) |> \n  as_tibble() |> \n  unnest(distribution) |> \n  rename_with(remove_at_symbol) |> \n  filter(format      == \"API\", \n         description == \"latest\") |> \n  handle_na()\n\ndistribution |> \n  filter(grepl(\"Enrollment\", title)) |> \n  pull(title)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Federally Qualified Health Center Enrollments : 2025-01-01\"      \n[2] \"Home Health Agency Enrollments : 2025-01-01\"                     \n[3] \"Hospice Enrollments : 2025-01-01\"                                \n[4] \"Hospital Enrollments : 2025-01-01\"                               \n[5] \"Medicare Fee-For-Service Public Provider Enrollment : 2024-12-31\"\n[6] \"Rural Health Clinic Enrollments : 2025-01-01\"                    \n[7] \"Skilled Nursing Facility Enrollments : 2025-01-01\"               \n[8] \"Medicare Monthly Enrollment : 2024-09-01\"                        \n```\n\n\n:::\n\n```{.r .cell-code}\naccessURL <- distribution |> \n  filter(grepl(\"Opt Out Affidavits : \", title)) |> \n  pull(accessURL)\n\naccessURL\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data\"\n```\n\n\n:::\n:::\n\nFormat Query\n\n::: {.cell}\n\n```{.r .cell-code}\nquery <- glue::glue(\n  'c(\n    \"filter[{FID}][path]\"  = \"{PATH}\",\n    \"filter[{FID}][value]\" = \"{VALUE}\"\n  )', \n  FID = 1, \n  PATH = \"State Code\", \n  VALUE = \"CA\")\n\nquery\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nc(\n  \"filter[1][path]\"  = \"State Code\",\n  \"filter[1][value]\" = \"CA\"\n)\n```\n\n\n:::\n\n```{.r .cell-code}\nquery <- query |> \n  parse_expr() |> \n  eval_bare()\n\nquery\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n filter[1][path] filter[1][value] \n    \"State Code\"             \"CA\" \n```\n\n\n:::\n:::\n\nRetrieve Number of Results\n\n::: {.cell}\n\n```{.r .cell-code}\nqueryurl <- accessURL |> \n  request() |> \n  req_url_query(size = 5000, !!!query)\n\nnresults <- queryurl |> \n  req_url_path_append(\"stats\") |> \n  req_perform() |> \n  resp_body_json() |> \n  gelm(\"found\")\n\nnresults\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9405\n```\n\n\n:::\n\n```{.r .cell-code}\nurl_parse(queryurl$url)\n\noff <- offset_sequence(nresults, 5000)\n\noff\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]    0 5000\n```\n\n\n:::\n:::\n\nGenerate and Send Requests\n\n::: {.cell}\n\n```{.r .cell-code}\nreqs <- map(\n  glue(\n    \"{url}\", \n    \"&offset={off}\", \n    url = queryurl$url, \n    off = ), \n  httr2::request)\n\nreq_perform_parallel(reqs) |> \n  resps_successes() |> \n  map(\\(x) tibble(resp_body_json(x, simplifyVector = TRUE))) |> \n  bind_rows()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9,405 × 13\n   `First Name` `Last Name` NPI        Specialty          Optout Effective Dat…¹\n   <chr>        <chr>       <chr>      <chr>              <chr>                 \n 1 Namir        Damluji     1124116793 Psychiatry         07/26/2020            \n 2 Lesley       Macarthur   1073604054 Psychiatry         04/05/2012            \n 3 Sharon       Bae         1346211372 Internal Medicine  06/01/2012            \n 4 Albert       Fuchs       1013964386 Internal Medicine  07/01/2012            \n 5 Abilash      Gopal       1306179486 Psychiatry         11/29/2016            \n 6 Linda        Schaffer    1740495043 Psychiatry         06/14/2012            \n 7 Charles      Schaffer    1114132313 Psychiatry         06/14/2012            \n 8 Cheri        Adrian      1366597833 Clinical Psycholo… 05/25/2012            \n 9 Richard      Wolf        1891713079 Internal Medicine  08/16/2012            \n10 Robert       Woods       1881601029 Psychiatry         06/11/2012            \n# ℹ 9,395 more rows\n# ℹ abbreviated name: ¹​`Optout Effective Date`\n# ℹ 8 more variables: `Optout End Date` <chr>,\n#   `First Line Street Address` <chr>, `Second Line Street Address` <chr>,\n#   `City Name` <chr>, `State Code` <chr>, `Zip code` <chr>,\n#   `Eligible to Order and Refer` <chr>, `Last updated` <chr>\n```\n\n\n:::\n:::\n\n",
    "supporting": [
      "wk_query_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}