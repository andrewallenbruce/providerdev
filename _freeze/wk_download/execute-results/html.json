{
  "hash": "9d895cad55d6ecc09fe0455d5350d365",
  "result": {
    "engine": "knitr",
    "markdown": "# Downloads {#sec-downloads}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nread_sql_duckdb(\"SELECT current_setting('memory_limit') AS memlimit\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A duckplyr data frame: 1 variable\n  memlimit\n  <chr>   \n1 12.5 GiB\n```\n\n\n:::\n\n```{.r .cell-code}\ndb_exec(\"PRAGMA memory_limit = '1GB'\")\n\nread_sql_duckdb(\"SELECT current_setting('memory_limit') AS memlimit\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A duckplyr data frame: 1 variable\n  memlimit \n  <chr>    \n1 953.6 MiB\n```\n\n\n:::\n\n```{.r .cell-code}\ndb_exec(\"PRAGMA enable_progress_bar = true\")\n\nread_sql_duckdb(\"SELECT current_setting('threads') AS threads\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A duckplyr data frame: 1 variable\n  threads\n    <dbl>\n1       4\n```\n\n\n:::\n\n```{.r .cell-code}\nread_sql_duckdb(\"SELECT * FROM duckdb_settings()\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A duckplyr data frame: 5 variables\n   name                                       value description input_type scope\n   <chr>                                      <chr> <chr>       <chr>      <chr>\n 1 access_mode                                auto… Access mod… VARCHAR    GLOB…\n 2 allocator_background_threads               false Whether to… BOOLEAN    GLOB…\n 3 allocator_bulk_deallocation_flush_thresho… 512.… If a bulk … VARCHAR    GLOB…\n 4 allocator_flush_threshold                  128.… Peak alloc… VARCHAR    GLOB…\n 5 allow_community_extensions                 true  Allow to l… BOOLEAN    GLOB…\n 6 allow_extensions_metadata_mismatch         false Allow to l… BOOLEAN    GLOB…\n 7 allow_persistent_secrets                   true  Allow the … BOOLEAN    GLOB…\n 8 allow_unredacted_secrets                   false Allow prin… BOOLEAN    GLOB…\n 9 allow_unsigned_extensions                  false Allow to l… BOOLEAN    GLOB…\n10 allowed_directories                        []    List of di… VARCHAR[]  GLOB…\n# ℹ more rows\n```\n\n\n:::\n:::\n\n\n## Provider Enrollment Sub-Files\n\n::: {.cell}\n\n```{.r .cell-code}\nresources <- prop(\n  public_Dataset(\"enrollees\"), \n  \"resources\")\n\nsubfiles <- filter(\n  prop(resources, \"files\"), \n  fileType == \"csv\", \n  sf_detect(name, \"Sub-File\")) |> \n  pull(downloadURL)\n\nbasename(subfiles) |> \n  purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n-  c3  PPEF_Reassignment_Extract_2025.01.02.csv PPEF_Practice_Location_Extr ...\n```\n\n\n:::\n:::\n\n### Reassignment Sub-File 2024 Q4\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- tempfile(\"reassign_subfile\", fileext = \".csv\")\n\ndownload.file(url = subfiles[1], destfile = path)\n\ndk <- read_csv_duckdb(path)\n\nnrow(dk)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: Materialization would result in more than 500000 rows. Use collect() or as_tibble() to materialize.\n```\n\n\n:::\n:::\n\n### Address Sub-File 2024 Q4\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- tempfile(\"address_subfile\", fileext = \".csv\")\n\ndownload.file(url = subfiles[2], destfile = path)\n\ndk <- read_csv_duckdb(path)\n\nnrow(dk)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: Materialization would result in more than 250000 rows. Use collect() or as_tibble() to materialize.\n```\n\n\n:::\n:::\n\n### Secondary Specialty Sub-File 2024 Q4\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- tempfile(\"second_specialty\", fileext = \".csv\")\n\ndownload.file(url = subfiles[3], destfile = path)\n\ndk <- read_csv_duckdb(path)\n\nnrow(dk)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: Materialization would result in more than 333333 rows. Use collect() or as_tibble() to materialize.\n```\n\n\n:::\n:::\n\n",
    "supporting": [
      "wk_download_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}