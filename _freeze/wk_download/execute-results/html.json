{
  "hash": "256fb3b4556663c4883aba6d82986a7b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Downloads\"\neditor_options: \n   chunk_output_type: console\n---\n\n\n\n## Provider Enrollment Sub-Files\n\n::: {.cell}\n\n```{.r .cell-code}\nresources <- prop(\n  public_Dataset(\"enrollees\"), \n  \"resources\")\n\nsubfiles <- filter(\n  prop(resources, \"files\"), \n  fileType == \"csv\", \n  sf_detect(name, \"Sub-File\")) |> \n  pull(downloadURL)\n\nbasename(subfiles) |> purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n-  c3  PPEF_Reassignment_Extract_2025.01.02.csv PPEF_Practice_Location_Extr ...\n```\n\n\n:::\n:::\n\n### Reassignment Sub-File 2024 Q4\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- tempfile(\"reassign_subfile\", fileext = \".csv\")\n\ndownload.file(url = subfiles[1], destfile = path)\n\ndk <- read_csv_duckdb(path)\n\nnrow(dk)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: Materialization would result in 500001 rows, which exceeds the limit of 500000. Use collect() or as_tibble() to materialize.\n```\n\n\n:::\n:::\n\n### Address Sub-File 2024 Q4\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- tempfile(\"address_subfile\", fileext = \".csv\")\n\ndownload.file(url = subfiles[2], destfile = path)\n\ndk <- read_csv_duckdb(path)\n\nnrow(dk)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: Materialization would result in 250001 rows, which exceeds the limit of 250000. Use collect() or as_tibble() to materialize.\n```\n\n\n:::\n:::\n\n### Secondary Specialty Sub-File 2024 Q4\n\n::: {.cell}\n\n```{.r .cell-code}\npath <- tempfile(\"second_specialty\", fileext = \".csv\")\n\ndownload.file(url = subfiles[3], destfile = path)\n\ndk <- read_csv_duckdb(path)\n\nnrow(dk)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: Materialization would result in 333334 rows, which exceeds the limit of 333333. Use collect() or as_tibble() to materialize.\n```\n\n\n:::\n:::\n\n",
    "supporting": [
      "wk_download_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}