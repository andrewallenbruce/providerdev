{
  "hash": "c6a8ab94aecfcc084e16a40756ea9470",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Provider API\"\neditor_options: \n   chunk_output_type: console\n---\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<a href=\"https://data.cms.gov/provider-data/docs\" class=\"btn btn-outline-secondary\" role=\"button\" target=\"_blank\">\n<i class=\"bi bi-box-arrow-up-right\"></i>\nProvider API Docs\n</a>\n<a href=\"https://data.cms.gov/provider-data/search\" class=\"btn btn-outline-secondary\" role=\"button\" target=\"_blank\">\n<i class=\"bi bi-box-arrow-up-right\"></i>\nDataset Search\n</a>\n```\n\n:::\n:::\n\n\nThis site provides access to the Centers for Medicare & Medicaid Services official data that are used on the **Medicare Care Compare** website and directories.\n\n   * [Home](https://data.cms.gov/provider-data/)\n   * [About](https://data.cms.gov/provider-data/about)\n\n### Rate Limit\n\nThe **Provider Data Catalog API** currently limits each batch of results to a maximum of **2,000** entries. To retrieve datasets larger than this threshold, you must execute multiple requests, incrementing the offset each time to paginate through results:\n\n   1. Fetch the first 2000 results:\n\n::: {.cell}\n\n```{.r .cell-code}\nownership0 <- url_parse(\n  base_url = \"https://data.cms.gov/provider-data/\", \n  url      = \"api/1/datastore/query/7t8x-u3ir/0\") |> \n  url_modify_query(\n    offset = 0, \n    limit  = 2000) |> \n  url_build() |> \n  request() |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nownership0$query\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$offset\n[1] 0\n\n$limit\n[1] 2000\n\n$resources\n                                    id alias\n1 e7fce918-0873-519f-80ae-818e386299d1     t\n\n$count\n[1] TRUE\n\n$results\n[1] TRUE\n\n$schema\n[1] TRUE\n\n$keys\n[1] TRUE\n\n$format\n[1] \"json\"\n\n$rowIds\n[1] FALSE\n\n$properties\n [1] \"cms_certification_number_ccn\" \"provider_name\"               \n [3] \"address_line_1\"               \"address_line_2\"              \n [5] \"citytown\"                     \"state\"                       \n [7] \"zip_code\"                     \"countyparish\"                \n [9] \"telephone_number\"             \"cms_region\"                  \n[11] \"ownership_type\"               \"certification_date\"          \n```\n\n\n:::\n\n```{.r .cell-code}\nownership0$count\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1229\n```\n\n\n:::\n\n```{.r .cell-code}\nownership0$results |> \n  tibble() |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,229\nColumns: 12\n$ cms_certification_number_ccn <chr> \"013025\", \"013028\", \"013029\", \"013030\", \"…\n$ provider_name                <chr> \"ENCOMPASS HEALTH LAKESHORE REHABILITATIO…\n$ address_line_1               <chr> \"3800 RIDGEWAY DRIVE\", \"4465 NARROW LANE …\n$ address_line_2               <chr> \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"-\", \"…\n$ citytown                     <chr> \"BIRMINGHAM\", \"MONTGOMERY\", \"HUNTSVILLE\",…\n$ state                        <chr> \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\",…\n$ zip_code                     <chr> \"35209\", \"36116\", \"35811\", \"36301\", \"3512…\n$ countyparish                 <chr> \"Jefferson\", \"Montgomery\", \"Madison\", \"Ho…\n$ telephone_number             <chr> \"(205) 868-2000\", \"(334) 284-7821\", \"(205…\n$ cms_region                   <chr> \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"4\", \"…\n$ ownership_type               <chr> \"For profit\", \"For profit\", \"For profit\",…\n$ certification_date           <chr> \"10/01/1983\", \"05/11/1987\", \"06/04/1987\",…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n   2. Fetch the next 2000 results (2001-4000):\n\n::: {.cell}\n\n```{.r .cell-code}\nownership1 <- url_parse(\n  base_url = \"https://data.cms.gov/provider-data/api/1/datastore/query/\", \n  url      = \"7t8x-u3ir/0\") |> \n  url_modify_query(\n    offset = 2001, \n    limit  = 2000) |> \n  url_build() |> \n  request() |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nownership1$query\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$offset\n[1] 2001\n\n$limit\n[1] 2000\n\n$resources\n                                    id alias\n1 e7fce918-0873-519f-80ae-818e386299d1     t\n\n$count\n[1] TRUE\n\n$results\n[1] TRUE\n\n$schema\n[1] TRUE\n\n$keys\n[1] TRUE\n\n$format\n[1] \"json\"\n\n$rowIds\n[1] FALSE\n\n$properties\n [1] \"cms_certification_number_ccn\" \"provider_name\"               \n [3] \"address_line_1\"               \"address_line_2\"              \n [5] \"citytown\"                     \"state\"                       \n [7] \"zip_code\"                     \"countyparish\"                \n [9] \"telephone_number\"             \"cms_region\"                  \n[11] \"ownership_type\"               \"certification_date\"          \n```\n\n\n:::\n\n```{.r .cell-code}\nownership1$count\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1229\n```\n\n\n:::\n\n```{.r .cell-code}\nownership1$results |> \n  tibble() |> \n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 0\nColumns: 1\n$ `ownership1$results` <list> list()\n```\n\n\n:::\n:::\n\nContinue incrementing the offset by 2,000 for each subsequent batch. When retrieving large datasets, consider pacing your requests to avoid overwhelming your system with data and to allow for graceful error handling. Depending on the volume of data and your application's capabilities, consider implementing a back-off strategy if errors occur.\n\n### Stars/Ratings\n\nCMS's **Five-Star Quality Rating System** is designed to help users compare the overall quality of care across different healthcare providers. Access these ratings by referring to the associated column names:\n\n   * __Nursing Home__: `overall_rating`\n   * __Hospitals__: `hospital_overall_rating`\n   * __Dialysis__: `five_star`\n   * __Hospice__: `star_rating`\n   * __Home Health__: `quality_of_patient_care_star_rating`\n\nFor example, the query for [**Nursing Home**](https://data.cms.gov/provider-data/dataset/4pq5-n9py) facilities with _less than_ a 5-star overall rating is:\n\n::: {.cell}\n\n```{.r .cell-code}\nnhome0 <- url_parse(\n  base_url = \"https://data.cms.gov/provider-data/api/1/datastore/query/\", \n  url      = \"4pq5-n9py/0\") |> \n  url_modify_query(\n    `conditions[0][property]` = \"overall_rating\",\n    `conditions[0][value]`    = 5,\n    `conditions[0][operator]` = \"<\",\n    offset                    = 0, \n    limit                     = 2000) |> \n  url_build() |> \n  request() |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nnhome0$query\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$conditions\n        property value operator\n1 overall_rating     5        <\n\n$offset\n[1] 0\n\n$limit\n[1] 2000\n\n$resources\n                                    id alias\n1 f93da3a3-400b-5efe-960d-c1d72b1d4f65     t\n\n$count\n[1] TRUE\n\n$results\n[1] TRUE\n\n$schema\n[1] TRUE\n\n$keys\n[1] TRUE\n\n$format\n[1] \"json\"\n\n$rowIds\n[1] FALSE\n\n$properties\n  [1] \"cms_certification_number_ccn\"                                    \n  [2] \"provider_name\"                                                   \n  [3] \"provider_address\"                                                \n  [4] \"citytown\"                                                        \n  [5] \"state\"                                                           \n  [6] \"zip_code\"                                                        \n  [7] \"telephone_number\"                                                \n  [8] \"provider_ssa_county_code\"                                        \n  [9] \"countyparish\"                                                    \n [10] \"ownership_type\"                                                  \n [11] \"number_of_certified_beds\"                                        \n [12] \"average_number_of_residents_per_day\"                             \n [13] \"average_number_of_residents_per_day_footnote\"                    \n [14] \"provider_type\"                                                   \n [15] \"provider_resides_in_hospital\"                                    \n [16] \"legal_business_name\"                                             \n [17] \"date_first_approved_to_provide_medicare_and_medicaid_services\"   \n [18] \"affiliated_entity_name\"                                          \n [19] \"affiliated_entity_id\"                                            \n [20] \"continuing_care_retirement_community\"                            \n [21] \"special_focus_status\"                                            \n [22] \"abuse_icon\"                                                      \n [23] \"most_recent_health_inspection_more_than_2_years_ago\"             \n [24] \"provider_changed_ownership_in_last_12_months\"                    \n [25] \"with_a_resident_and_family_council\"                              \n [26] \"automatic_sprinkler_systems_in_all_required_areas\"               \n [27] \"overall_rating\"                                                  \n [28] \"overall_rating_footnote\"                                         \n [29] \"health_inspection_rating\"                                        \n [30] \"health_inspection_rating_footnote\"                               \n [31] \"qm_rating\"                                                       \n [32] \"qm_rating_footnote\"                                              \n [33] \"longstay_qm_rating\"                                              \n [34] \"longstay_qm_rating_footnote\"                                     \n [35] \"shortstay_qm_rating\"                                             \n [36] \"shortstay_qm_rating_footnote\"                                    \n [37] \"staffing_rating\"                                                 \n [38] \"staffing_rating_footnote\"                                        \n [39] \"reported_staffing_footnote\"                                      \n [40] \"physical_therapist_staffing_footnote\"                            \n [41] \"reported_nurse_aide_staffing_hours_per_resident_per_day\"         \n [42] \"reported_lpn_staffing_hours_per_resident_per_day\"                \n [43] \"reported_rn_staffing_hours_per_resident_per_day\"                 \n [44] \"reported_licensed_staffing_hours_per_resident_per_day\"           \n [45] \"reported_total_nurse_staffing_hours_per_resident_per_day\"        \n [46] \"total_number_of_nurse_staff_hours_per_resident_per_day_on_t_4a14\"\n [47] \"registered_nurse_hours_per_resident_per_day_on_the_weekend\"      \n [48] \"reported_physical_therapist_staffing_hours_per_resident_per_day\" \n [49] \"total_nursing_staff_turnover\"                                    \n [50] \"total_nursing_staff_turnover_footnote\"                           \n [51] \"registered_nurse_turnover\"                                       \n [52] \"registered_nurse_turnover_footnote\"                              \n [53] \"number_of_administrators_who_have_left_the_nursing_home\"         \n [54] \"administrator_turnover_footnote\"                                 \n [55] \"nursing_casemix_index\"                                           \n [56] \"nursing_casemix_index_ratio\"                                     \n [57] \"casemix_nurse_aide_staffing_hours_per_resident_per_day\"          \n [58] \"casemix_lpn_staffing_hours_per_resident_per_day\"                 \n [59] \"casemix_rn_staffing_hours_per_resident_per_day\"                  \n [60] \"casemix_total_nurse_staffing_hours_per_resident_per_day\"         \n [61] \"casemix_weekend_total_nurse_staffing_hours_per_resident_per_day\" \n [62] \"adjusted_nurse_aide_staffing_hours_per_resident_per_day\"         \n [63] \"adjusted_lpn_staffing_hours_per_resident_per_day\"                \n [64] \"adjusted_rn_staffing_hours_per_resident_per_day\"                 \n [65] \"adjusted_total_nurse_staffing_hours_per_resident_per_day\"        \n [66] \"adjusted_weekend_total_nurse_staffing_hours_per_resident_per_day\"\n [67] \"rating_cycle_1_standard_survey_health_date\"                      \n [68] \"rating_cycle_1_total_number_of_health_deficiencies\"              \n [69] \"rating_cycle_1_number_of_standard_health_deficiencies\"           \n [70] \"rating_cycle_1_number_of_complaint_health_deficiencies\"          \n [71] \"rating_cycle_1_health_deficiency_score\"                          \n [72] \"rating_cycle_1_number_of_health_revisits\"                        \n [73] \"rating_cycle_1_health_revisit_score\"                             \n [74] \"rating_cycle_1_total_health_score\"                               \n [75] \"rating_cycle_2_standard_health_survey_date\"                      \n [76] \"rating_cycle_2_total_number_of_health_deficiencies\"              \n [77] \"rating_cycle_2_number_of_standard_health_deficiencies\"           \n [78] \"rating_cycle_2_number_of_complaint_health_deficiencies\"          \n [79] \"rating_cycle_2_health_deficiency_score\"                          \n [80] \"rating_cycle_2_number_of_health_revisits\"                        \n [81] \"rating_cycle_2_health_revisit_score\"                             \n [82] \"rating_cycle_2_total_health_score\"                               \n [83] \"rating_cycle_3_standard_health_survey_date\"                      \n [84] \"rating_cycle_3_total_number_of_health_deficiencies\"              \n [85] \"rating_cycle_3_number_of_standard_health_deficiencies\"           \n [86] \"rating_cycle_3_number_of_complaint_health_deficiencies\"          \n [87] \"rating_cycle_3_health_deficiency_score\"                          \n [88] \"rating_cycle_3_number_of_health_revisits\"                        \n [89] \"rating_cycle_3_health_revisit_score\"                             \n [90] \"rating_cycle_3_total_health_score\"                               \n [91] \"total_weighted_health_survey_score\"                              \n [92] \"number_of_facility_reported_incidents\"                           \n [93] \"number_of_substantiated_complaints\"                              \n [94] \"number_of_citations_from_infection_control_inspections\"          \n [95] \"number_of_fines\"                                                 \n [96] \"total_amount_of_fines_in_dollars\"                                \n [97] \"number_of_payment_denials\"                                       \n [98] \"total_number_of_penalties\"                                       \n [99] \"location\"                                                        \n[100] \"latitude\"                                                        \n[101] \"longitude\"                                                       \n[102] \"geocoding_footnote\"                                              \n[103] \"processing_date\"                                                 \n```\n\n\n:::\n\n```{.r .cell-code}\nnhome0$count\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12130\n```\n\n\n:::\n\n```{.r .cell-code}\nnhome0$results |> tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,000 × 103\n   cms_certification_nu…¹ provider_name provider_address citytown state zip_code\n   <chr>                  <chr>         <chr>            <chr>    <chr> <chr>   \n 1 015009                 BURNS NURSIN… 701 MONROE STRE… RUSSELL… AL    35653   \n 2 015010                 COOSA VALLEY… 260 WEST WALNUT… SYLACAU… AL    35150   \n 3 015012                 HIGHLANDS HE… 380 WOODS COVE … SCOTTSB… AL    35768   \n 4 015014                 EASTVIEW REH… 7755 FOURTH AVE… BIRMING… AL    35206   \n 5 015015                 PLANTATION M… 6450 OLD TUSCAL… MC CALLA AL    35111   \n 6 015019                 MERRY WOOD L… 280 MT HEBRON R… ELMORE   AL    36025   \n 7 015024                 LIMESTONE NU… 1600 WEST HOBBS… ATHENS   AL    35611   \n 8 015027                 WETUMPKA HEA… 1825 HOLTVILLE … WETUMPKA AL    36092   \n 9 015031                 MITCHELL-HOL… 805 FLAGG CIRCLE FLORENCE AL    35631   \n10 015032                 DIVERSICARE … 1701 NORTH ALST… FOLEY    AL    36535   \n# ℹ 1,990 more rows\n# ℹ abbreviated name: ¹​cms_certification_number_ccn\n# ℹ 97 more variables: telephone_number <chr>, provider_ssa_county_code <chr>,\n#   countyparish <chr>, ownership_type <chr>, number_of_certified_beds <chr>,\n#   average_number_of_residents_per_day <chr>,\n#   average_number_of_residents_per_day_footnote <chr>, provider_type <chr>,\n#   provider_resides_in_hospital <chr>, legal_business_name <chr>, …\n```\n\n\n:::\n\n```{.r .cell-code}\nnhome0$results |> \n  mutate(across(where(is.character),  ~ na_if(.x, \"\"))) |> \n  remove_all_na() |> \n  count(overall_rating, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  overall_rating   n\n1              2 561\n2              3 525\n3              1 450\n4              4 444\n5           <NA>  20\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnhome1 <- url_parse(\n  base_url = \"https://data.cms.gov/provider-data/api/1/datastore/query/\", \n  url      = \"4pq5-n9py/0\") |> \n  url_modify_query(\n    `conditions[0][property]` = \"overall_rating\",\n    `conditions[0][value]`    = 5,\n    `conditions[0][operator]` = \"<\",\n    offset                    = 2001, \n    limit                     = 2000) |> \n  url_build() |> \n  request() |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nnhome1$query\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$conditions\n        property value operator\n1 overall_rating     5        <\n\n$offset\n[1] 2001\n\n$limit\n[1] 2000\n\n$resources\n                                    id alias\n1 f93da3a3-400b-5efe-960d-c1d72b1d4f65     t\n\n$count\n[1] TRUE\n\n$results\n[1] TRUE\n\n$schema\n[1] TRUE\n\n$keys\n[1] TRUE\n\n$format\n[1] \"json\"\n\n$rowIds\n[1] FALSE\n\n$properties\n  [1] \"cms_certification_number_ccn\"                                    \n  [2] \"provider_name\"                                                   \n  [3] \"provider_address\"                                                \n  [4] \"citytown\"                                                        \n  [5] \"state\"                                                           \n  [6] \"zip_code\"                                                        \n  [7] \"telephone_number\"                                                \n  [8] \"provider_ssa_county_code\"                                        \n  [9] \"countyparish\"                                                    \n [10] \"ownership_type\"                                                  \n [11] \"number_of_certified_beds\"                                        \n [12] \"average_number_of_residents_per_day\"                             \n [13] \"average_number_of_residents_per_day_footnote\"                    \n [14] \"provider_type\"                                                   \n [15] \"provider_resides_in_hospital\"                                    \n [16] \"legal_business_name\"                                             \n [17] \"date_first_approved_to_provide_medicare_and_medicaid_services\"   \n [18] \"affiliated_entity_name\"                                          \n [19] \"affiliated_entity_id\"                                            \n [20] \"continuing_care_retirement_community\"                            \n [21] \"special_focus_status\"                                            \n [22] \"abuse_icon\"                                                      \n [23] \"most_recent_health_inspection_more_than_2_years_ago\"             \n [24] \"provider_changed_ownership_in_last_12_months\"                    \n [25] \"with_a_resident_and_family_council\"                              \n [26] \"automatic_sprinkler_systems_in_all_required_areas\"               \n [27] \"overall_rating\"                                                  \n [28] \"overall_rating_footnote\"                                         \n [29] \"health_inspection_rating\"                                        \n [30] \"health_inspection_rating_footnote\"                               \n [31] \"qm_rating\"                                                       \n [32] \"qm_rating_footnote\"                                              \n [33] \"longstay_qm_rating\"                                              \n [34] \"longstay_qm_rating_footnote\"                                     \n [35] \"shortstay_qm_rating\"                                             \n [36] \"shortstay_qm_rating_footnote\"                                    \n [37] \"staffing_rating\"                                                 \n [38] \"staffing_rating_footnote\"                                        \n [39] \"reported_staffing_footnote\"                                      \n [40] \"physical_therapist_staffing_footnote\"                            \n [41] \"reported_nurse_aide_staffing_hours_per_resident_per_day\"         \n [42] \"reported_lpn_staffing_hours_per_resident_per_day\"                \n [43] \"reported_rn_staffing_hours_per_resident_per_day\"                 \n [44] \"reported_licensed_staffing_hours_per_resident_per_day\"           \n [45] \"reported_total_nurse_staffing_hours_per_resident_per_day\"        \n [46] \"total_number_of_nurse_staff_hours_per_resident_per_day_on_t_4a14\"\n [47] \"registered_nurse_hours_per_resident_per_day_on_the_weekend\"      \n [48] \"reported_physical_therapist_staffing_hours_per_resident_per_day\" \n [49] \"total_nursing_staff_turnover\"                                    \n [50] \"total_nursing_staff_turnover_footnote\"                           \n [51] \"registered_nurse_turnover\"                                       \n [52] \"registered_nurse_turnover_footnote\"                              \n [53] \"number_of_administrators_who_have_left_the_nursing_home\"         \n [54] \"administrator_turnover_footnote\"                                 \n [55] \"nursing_casemix_index\"                                           \n [56] \"nursing_casemix_index_ratio\"                                     \n [57] \"casemix_nurse_aide_staffing_hours_per_resident_per_day\"          \n [58] \"casemix_lpn_staffing_hours_per_resident_per_day\"                 \n [59] \"casemix_rn_staffing_hours_per_resident_per_day\"                  \n [60] \"casemix_total_nurse_staffing_hours_per_resident_per_day\"         \n [61] \"casemix_weekend_total_nurse_staffing_hours_per_resident_per_day\" \n [62] \"adjusted_nurse_aide_staffing_hours_per_resident_per_day\"         \n [63] \"adjusted_lpn_staffing_hours_per_resident_per_day\"                \n [64] \"adjusted_rn_staffing_hours_per_resident_per_day\"                 \n [65] \"adjusted_total_nurse_staffing_hours_per_resident_per_day\"        \n [66] \"adjusted_weekend_total_nurse_staffing_hours_per_resident_per_day\"\n [67] \"rating_cycle_1_standard_survey_health_date\"                      \n [68] \"rating_cycle_1_total_number_of_health_deficiencies\"              \n [69] \"rating_cycle_1_number_of_standard_health_deficiencies\"           \n [70] \"rating_cycle_1_number_of_complaint_health_deficiencies\"          \n [71] \"rating_cycle_1_health_deficiency_score\"                          \n [72] \"rating_cycle_1_number_of_health_revisits\"                        \n [73] \"rating_cycle_1_health_revisit_score\"                             \n [74] \"rating_cycle_1_total_health_score\"                               \n [75] \"rating_cycle_2_standard_health_survey_date\"                      \n [76] \"rating_cycle_2_total_number_of_health_deficiencies\"              \n [77] \"rating_cycle_2_number_of_standard_health_deficiencies\"           \n [78] \"rating_cycle_2_number_of_complaint_health_deficiencies\"          \n [79] \"rating_cycle_2_health_deficiency_score\"                          \n [80] \"rating_cycle_2_number_of_health_revisits\"                        \n [81] \"rating_cycle_2_health_revisit_score\"                             \n [82] \"rating_cycle_2_total_health_score\"                               \n [83] \"rating_cycle_3_standard_health_survey_date\"                      \n [84] \"rating_cycle_3_total_number_of_health_deficiencies\"              \n [85] \"rating_cycle_3_number_of_standard_health_deficiencies\"           \n [86] \"rating_cycle_3_number_of_complaint_health_deficiencies\"          \n [87] \"rating_cycle_3_health_deficiency_score\"                          \n [88] \"rating_cycle_3_number_of_health_revisits\"                        \n [89] \"rating_cycle_3_health_revisit_score\"                             \n [90] \"rating_cycle_3_total_health_score\"                               \n [91] \"total_weighted_health_survey_score\"                              \n [92] \"number_of_facility_reported_incidents\"                           \n [93] \"number_of_substantiated_complaints\"                              \n [94] \"number_of_citations_from_infection_control_inspections\"          \n [95] \"number_of_fines\"                                                 \n [96] \"total_amount_of_fines_in_dollars\"                                \n [97] \"number_of_payment_denials\"                                       \n [98] \"total_number_of_penalties\"                                       \n [99] \"location\"                                                        \n[100] \"latitude\"                                                        \n[101] \"longitude\"                                                       \n[102] \"geocoding_footnote\"                                              \n[103] \"processing_date\"                                                 \n```\n\n\n:::\n\n```{.r .cell-code}\nnhome1$count\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12130\n```\n\n\n:::\n\n```{.r .cell-code}\nnhome1$results |> tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,000 × 103\n   cms_certification_nu…¹ provider_name provider_address citytown state zip_code\n   <chr>                  <chr>         <chr>            <chr>    <chr> <chr>   \n 1 115418                 PRUITTHEALTH… 521 CABINESS RO… FORSYTH  GA    31029   \n 2 115419                 OAKS - ATHEN… 490 KATHWOOD DR  ATHENS   GA    30607   \n 3 115421                 WOODSTOCK NU… 105 ARNOLD MILL… WOODSTO… GA    30188   \n 4 115422                 ROSWELL NURS… 1109 GREEN STRE… ROSWELL  GA    30075   \n 5 115423                 CHESTNUT RID… 125 SAMARITAN D… CUMMING  GA    30040   \n 6 115424                 LAKE CROSSIN… 6698 WASHINGTON… APPLING  GA    30802   \n 7 115427                 THOMASVILLE … 120 SKYLINE DRI… THOMASV… GA    31757   \n 8 115429                 CORDELE HEAL… 1106 NORTH 4TH … CORDELE  GA    31015   \n 9 115430                 SUMMERHILL E… 500 STANLEY STR… PERRY    GA    31069   \n10 115431                 HARALSON NSG… 315 FIELD STREET BREMEN   GA    30110   \n# ℹ 1,990 more rows\n# ℹ abbreviated name: ¹​cms_certification_number_ccn\n# ℹ 97 more variables: telephone_number <chr>, provider_ssa_county_code <chr>,\n#   countyparish <chr>, ownership_type <chr>, number_of_certified_beds <chr>,\n#   average_number_of_residents_per_day <chr>,\n#   average_number_of_residents_per_day_footnote <chr>, provider_type <chr>,\n#   provider_resides_in_hospital <chr>, legal_business_name <chr>, …\n```\n\n\n:::\n\n```{.r .cell-code}\nnhome1$results |> \n  mutate(across(where(is.character),  ~ na_if(.x, \"\"))) |> \n  remove_all_na() |> \n  count(overall_rating, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  overall_rating   n\n1              1 695\n2              2 447\n3              3 439\n4              4 396\n5           <NA>  23\n```\n\n\n:::\n:::\n\n\n### Specific Conditions\n\nUse the __Datastore Query Endpoint__ (`datastore/query/{datasetID}/{index}`). It takes two arguments: the __`datasetID`__, which does not change between data refreshes, and the distribution's __`index`__, which will _always_ be `0`.\n\nFor example, to return the first 500 results (the default) of a dataset with an overall rating of 5:\n\n::: {.cell}\n\n```{.r .cell-code}\nurl_parse(\n  base_url = \"https://data.cms.gov/provider-data/api/1/datastore/query/\", \n  url      = \"4pq5-n9py/0\") |> \n  url_modify_query(\n    `conditions[0][property]` = \"overall_rating\",\n    `conditions[0][value]`    = 5,\n    `conditions[0][operator]` = \"=\",\n    offset                    = 0, \n    limit                     = 500)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n<httr2_url>\nhttps://data.cms.gov/provider-data/api/1/datastore/query/4pq5-n9py/0?conditions%5B0%5D%5Bproperty%5D=overall_rating&conditions%5B0%5D%5Bvalue%5D=5&conditions%5B0%5D%5Boperator%5D=%3D&offset=0&limit=500\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• scheme: https\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• hostname: data.cms.gov\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• path: /provider-data/api/1/datastore/query/4pq5-n9py/0\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• query:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  • conditions[0][property]: overall_rating\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  • conditions[0][value]: 5\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  • conditions[0][operator]: %3D\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  • offset: 0\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  • limit: 500\n```\n\n\n:::\n:::\n\nMore complex queries can be created in JSON and converted to an HTTP query string using the [JSON Query to String](https://www.convertonline.io/convert/json-to-query-string) tool. \n\nFor example, to return the `cms_certification_number_ccn` and `overall_rating` columns with a rating greater than 3, use the following JSON:\n\n```{.json}\n{\n    \"properties\": [\n        \"cms_certification_number_ccn\",\n        \"overall_rating\"\n    ],\n    \"conditions\": [\n        {\n            \"property\":\"overall_rating\",\n            \"value\": \"3\",\n            \"operator\": \">\"\n        }\n    ]\n}\n```\n\nThis converts to a query string of:\n\n::: {.cell}\n\n```{.r .cell-code}\nnhomegt3 <- url_parse(\n  base_url = \"https://data.cms.gov/provider-data/api/1/datastore/query/\", \n  url      = \"4pq5-n9py/0\") |> \n  url_modify_query(\n    `properties[]`            = \"state\",\n    `properties[]`            = \"overall_rating\",\n    `conditions[0][property]` = \"overall_rating\",\n    `conditions[0][value]`    = 3,\n    `conditions[0][operator]` = \">\",\n    offset                    = 0, \n    limit                     = 2000) |> \n  url_build() |> \n  request() |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nnhomegt3$query\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$properties\n[1] \"state\"          \"overall_rating\"\n\n$conditions\n        property value operator\n1 overall_rating     3        >\n\n$offset\n[1] 0\n\n$limit\n[1] 2000\n\n$resources\n                                    id alias\n1 f93da3a3-400b-5efe-960d-c1d72b1d4f65     t\n\n$count\n[1] TRUE\n\n$results\n[1] TRUE\n\n$schema\n[1] TRUE\n\n$keys\n[1] TRUE\n\n$format\n[1] \"json\"\n\n$rowIds\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\nnhomegt3$count\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5174\n```\n\n\n:::\n\n```{.r .cell-code}\nnhomegt3$results |> tibble()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2,000 × 2\n   state overall_rating\n   <chr> <chr>         \n 1 AL    4             \n 2 AL    4             \n 3 AL    5             \n 4 AL    5             \n 5 AL    5             \n 6 AL    4             \n 7 AL    5             \n 8 AL    4             \n 9 AL    4             \n10 AL    5             \n# ℹ 1,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nnhomegt3$results |> \n  mutate(across(where(is.character),  ~ na_if(.x, \"\"))) |> \n  remove_all_na() |> \n  count(state, overall_rating, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   state overall_rating   n\n1     FL              5 163\n2     CA              5 138\n3     CA              4 117\n4     FL              4 110\n5     IN              5 105\n6     IL              4  98\n7     IL              5  91\n8     IN              4  89\n9     IA              5  79\n10    IA              4  73\n11    KS              4  59\n12    GA              4  53\n13    KS              5  53\n14    AL              4  43\n15    AR              4  43\n16    KY              4  42\n17    CT              4  41\n18    AR              5  40\n19    MD              5  40\n20    AL              5  39\n21    CO              4  39\n22    CO              5  39\n23    AZ              5  38\n24    GA              5  37\n25    KY              5  37\n26    CT              5  34\n27    LA              4  31\n28    MD              4  29\n29    ID              5  25\n30    AZ              4  20\n31    LA              5  19\n32    ID              4  18\n33    MA              4  18\n34    HI              5  17\n35    ME              5  17\n36    MA              5  13\n37    DE              5  10\n38    AK              5   9\n39    DE              4   9\n40    ME              4   9\n41    HI              4   7\n42    DC              5   5\n43    AK              4   2\n44    DC              4   2\n```\n\n\n:::\n:::\n\n### All Dataset IDs\n\nRetrieve a comprehensive list of all datasets available by leveraging the `metastore/schemas` endpoint:\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- request(\n  paste0(\n    \"https://data.cms.gov/\",\n    \"provider-data/api/1/\",\n    \"metastore/schemas/dataset/items\"\n    )\n  ) |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nx |> \n  tibble() |> \n  mutate(across(where(is.character),  ~ na_if(.x, \"\"))) |> \n  remove_all_na()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 234 × 17\n   accessLevel landingPage   bureauCode issued `@type` modified released keyword\n   <chr>       <chr>         <list>     <chr>  <chr>   <chr>    <chr>    <list> \n 1 public      https://data… <chr [1]>  2020-… dcat:D… 2024-12… 2024-10… <chr>  \n 2 public      https://data… <chr [1]>  2020-… dcat:D… 2024-12… 2024-10… <chr>  \n 3 public      https://data… <chr [1]>  2020-… dcat:D… 2024-12… 2024-10… <chr>  \n 4 public      https://data… <chr [1]>  2020-… dcat:D… 2024-12… 2024-10… <chr>  \n 5 public      https://data… <chr [1]>  2020-… dcat:D… 2024-12… 2024-10… <chr>  \n 6 public      https://data… <chr [1]>  2024-… dcat:D… 2024-09… 2024-10… <chr>  \n 7 public      https://data… <chr [1]>  2024-… dcat:D… 2024-09… 2024-10… <chr>  \n 8 public      https://data… <chr [1]>  2024-… dcat:D… 2024-09… 2024-10… <chr>  \n 9 public      https://data… <chr [1]>  2024-… dcat:D… 2024-11… 2024-11… <chr>  \n10 public      https://data… <chr [1]>  2024-… dcat:D… 2024-11… 2024-11… <chr>  \n# ℹ 224 more rows\n# ℹ 9 more variables: contactPoint <df[,4]>, publisher <df[,2]>,\n#   identifier <chr>, description <chr>, title <chr>, programCode <list>,\n#   distribution <list>, theme <list>, archiveExclude <lgl>\n```\n\n\n:::\n:::\n\n### Search `theme`\n\nReturn a list of all public datasets for a particular __Topic__ area via the `/api/1/search` endpoint. For example, to get a list of all datasets in the `Home health services` Topic, you could use:\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- request(\n  paste0(\n    \"https://data.cms.gov/\",\n    \"provider-data/api/1/\",\n    \"search?\",\n    \"page-size=100&\",\n    \"theme=Home%20health%20services\"\n    )\n  ) |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nx$facets |> \n  tibble() |> \n  mutate(across(where(is.character),  ~ na_if(.x, \"\"))) |> \n  remove_all_na()\n\nx\n```\n:::\n\n> __Note__: If the `page-size` is not provided, the default result limit is 10.\n\n### Search `keyword`\n\nOne of the easiest ways to generate your search parameters is to use the Provider Data Catalog [search page](https://data.cms.gov/provider-data/search) and then copy the query string to the end of the search endpoint. For example, if you filter by _\"Dialysis facilities\"_ tagged with _\"Linking Quality to Payment\"_ and select 25 results per page, the query string produced is:\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- request(\n  paste0(\n    \"https://data.cms.gov/\",\n    \"provider-data/api/1/\",\n    \"search?\",\n    \"keyword=Linking%20Quality%20to%20Payment&\",\n    \"page-size=25&\",\n    \"theme=Dialysis%20facilities\"\n    )\n  ) |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nx$facets |> \n  tibble() |> \n  mutate(across(where(is.character),  ~ na_if(.x, \"\"))) |> \n  remove_all_na()\n\nx$results\n```\n:::\n\n### Search `fulltext`\n\nUse the same method to return a list of datasets that contain a keyword (like \"ratings\") in their title and/or description:\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- request(\n  paste0(\n    \"https://data.cms.gov/\",\n    \"provider-data/api/1/\",\n    \"search?\",\n    \"fulltext=ratings\"\n    )\n  ) |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nx$facets |> \n  tibble() |> \n  mutate(across(where(is.character),  ~ na_if(.x, \"\"))) |> \n  remove_all_na()\n\nx$results\n```\n:::\n\n\n## Differences\n\n::: callout\n\n#### __Datastore__ vs. __Metastore__\n\n   * __Datastore__\n      * Data from the data files (CSVs)\n   * __Metastore__\n      * Metadata from the `data.json` file \n      * `title`, `last_updated`, `release_date`, `keywords`, etc.\n\nThink of the __Metastore__ as the library index that helps you find the right book (`dataset`), and the __Datastore__ as the book itself.\n\n\n#### __Distribution__ vs. __Dataset__\n\n   * __Distribution__\n      * Unique identifier of the __Datastore__ \n      * Specific to a particular CSV data import\n      * Changes with every data refresh\n   * __Dataset__\n      * Unique identifier of the __Dataset__ \n      * Comes from the data.json file\n      * Appears as part of the URL in the PDC site\n      * Does not change between data refreshes\n\n--------------------------------------------------------------------------------\n\n> If you have been using the `datastore/sql` or `datastore/query/{distributionId}` endpoints, consider switching to the __`datastore/query/{datasetID}/{index}`__ endpoint instead. \n\nThe `datasetID` does not change between refreshes, and, currently, all **Provider Data Catalog** datasets only have a single resource, so the `index` will _always_ be `0`.\n\nFor example, search the [Long Term Care Hospital dataset](https://data.cms.gov/provider-data/dataset/5zdx-ny2x) with:\n\n```r\n\"https://data.cms.gov/provider-data/api/1/datastore/query/5zdx-ny2x/0\"\n```\n\nDistribution IDs change with every dataset update, so it is better to use APIs with the Dataset ID and the index of the distribution. If you still need the current distribution ID, you can access it through the metadata API, under `distribution -> identifier`:\n\n```r\n\"https://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items/[datasetID]?show-reference-ids\"\n```\n\n::: \n\n--------------------------------------------------------------------------------\n",
    "supporting": [
      "faq_provider_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}