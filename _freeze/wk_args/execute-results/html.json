{
  "hash": "075b5af994170105d7a14cacbe46ea71",
  "result": {
    "engine": "knitr",
    "markdown": "---\noutput: html_document\neditor_options: \n  chunk_output_type: console\n---\n# Params {#sec-args}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narg_npi <- new_class(\n  name    = \"arg_npi\",\n  package = NULL,\n  properties = list(\n    x = new_property(\n      class = new_union(NULL, class_character),\n      setter = function(self, value) {\n        self@x <- as.character(value[which_not_na(value)])\n        self\n      },\n      getter = function(self) {\n        as.character(self@x[which_not_na(self@x)])\n      }\n    ),\n    op = new_property(\n      class = class_character,\n      default = \"=\",\n      getter = function(self)\n        if (length(self@x) > 1) \"IN\" else \"=\")\n  ),\n  validator = function(self) {\n    if (not_null(self@x) && length(self@x) > 0) {\n      assert_nchars(self@x, 10L, \"npi\")\n      assert_digits(self@x)\n      assert_luhn(self@x)\n    }\n  }\n)\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvalue <- c(\"132456789\", \"1324567890\", \"132456789\", \"132456789\")\n\nkit::pallv(nchar(value), value = 10L)\n\nallv(nchar(as_chr(value)), 10L)\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprop_npi <- new_property(\n  class = new_union(NULL, class_character, class_numeric),\n  validator = function(value) {\n    if (is.null(value)) return()\n    if (!allv(nchar(as_chr(value)), 10L)) \"`npi` must be 10 characters long\"\n    if (any(stri_detect_regex(value, \"^[0-9]{1,10}$\"))) \"`npi` must be all digits\"\n    if (any(!check_luhn(value))) \"`npi` must pass Luhn algorithm\"\n    if (any(!stri_startswith(value, \"[12]\"))) \"`npi` must start with 1 or 2\"\n  }\n)\n\nprop_state <- new_property(\n  class = null_character,\n  validator = function(value) {\n    if (not_null(value)) {\n      if (!is_character(value)) \"`state` must be a character vector\"\n      if (any(sf_chars(value) != 2L)) \"`state` must be 2 characters long\"\n      if (any(!value %in% state.abb)) {\n        paste(\n          \"Invalid state(s) entered:\",\n          paste0(\n            value[\n              which_(value %in% state.abb, invert = TRUE)],\n            collapse = \", \"))\n      }\n    }\n  }\n)\n```\n:::\n\n\n### `class_arg`\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_arg <- new_class(\n  \"class_arg\",\n  properties  = list(\n    endpoint  = new_property(class_character,\n    validator = function(value) { \n      if (length(value) != 1L) \"must be length 1\" \n      }),\n    field     = new_property(NULL | class_character,\n    validator = function(value) {\n      if (not_null(value)) {\n        if (length(value) != 1L) \"must be length 1\" \n      }}),\n    operator = new_property(\n      class_character, \n      default = \"=\",\n      validator = function(value) {\n        if (any(!value %in% c(\"=\", \">=\", \"<=\", \">\", \"<\", \"<>\", \n                              \"STARTS_WITH\", \"ENDS_WITH\", \n                              \"CONTAINS\", \"IN\", \"NOT IN\", \"BETWEEN\", \n                              \"NOT BETWEEN\")\n               )\n           ) \"@operator invalid\" \n      })\n  )\n)\n\n# choices = new_property(NULL | class_character,\n# setter = function(self, value) {\n#   self@choices <- value\n#   self}),\n\nnpi <- new_class(\n  name = \"npi\",\n  parent = class_arg,\n  properties = list(\n    input = new_property(NULL | class_character | class_numeric),\n    field = new_property(NULL | class_character,\n    getter = function(self) {\n      if (not_null(self@endpoint)) {\n        kit::nswitch(\n          self@endpoint,\n          \"affiliations\", \"npi\",\n          \"enrollees\", \"NPI\",\n          \"open_payments\", \"covered_recipient_npi\")\n        }})),\n  validator = function(self) {\n    if (not_null(self@input)) {\n      if (!allv(nchar(as_chr(self@input)), 10L)) \"`npi` must be 10 characters long\"\n      if (any(stri_detect_regex(self@input, \"^[0-9]{1,10}$\"))) \"`npi` must be all digits\"\n      if (any(!check_luhn(as_chr(self@input)))) \"`npi` must pass Luhn algorithm\"\n      if (any(!stri_detect_regex(self@input, \"^[12]\"))) \"`npi` must start with 1 or 2\"\n    }\n  }\n)\n\nnpi\n\nnpi(\n  endpoint = \"affiliations\", \n  operator = \"IN\",\n  input = c(1043218118, 1023630738))\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\npac <- class_arg(\n  label = \"pac\",\n  alias = \"PECOS_ASCT_CNTL_ID\",\n  operators = c(\"=\", \"IN\", \"NOT IN\", \"STARTS_WITH\", \"ENDS_WITH\"))\n\nenid <- class_arg(\n  label = \"enid\",\n  alias = \"ENRLMT_ID\",\n  operators = c(\"=\", \"IN\", \"NOT IN\", \"STARTS_WITH\", \"ENDS_WITH\"))\n\nstate <- class_arg(\n  label = \"state\",\n  alias = \"STATE_CD\",\n  operators = c(\"=\", \"IN\", \"NOT IN\", \"STARTS_WITH\", \"ENDS_WITH\"),\n  choices = state.abb)\n\nname <- class_arg(\n  label = \"first\",\n  alias = \"FIRST_NAME\",\n  operators = c(\"=\", \"IN\", \"NOT IN\", \"STARTS_WITH\", \"ENDS_WITH\"))\n\ngender <- class_arg(\n  label = \"gender\",\n  alias = \"GNDR_SW\",\n  operators = c(\"=\", \"IN\", \"NOT IN\", \"STARTS_WITH\", \"ENDS_WITH\"),\n  choices = c(\"M\", \"F\", \"9\"))\n\nlist2(\n  \"NPI\"                = npi,\n  \"PECOS_ASCT_CNTL_ID\" = pac,\n  \"ENRLMT_ID\"          = enid,\n  \"PROVIDER_TYPE_CD\"   = spec_code,\n  \"PROVIDER_TYPE_DESC\" = spec_desc,\n  \"STATE_CD\"           = state,\n  \"FIRST_NAME\"         = first,\n  \"MDL_NAME\"           = middle,\n  \"LAST_NAME\"          = last,\n  \"ORG_NAME\"           = org,\n  \"GNDR_SW\"            = gender)\n\nclass_args <- new_class(\n  \"class_args\",\n  properties = list(args = class_list))\n\nlist(\n  npi = arg_npi,\n  pac = arg_pac,\n  enid = arg_enid,\n  state = arg_state,\n  first = arg_firstname,\n  gender = arg_gender)\n\nargs@\n  #' enrollees(enid = \"I20040309000221\")\n  #'\n  #' enrollees(npi = \"1417918293\", spec_code = \"14-41\")\n  #'\n  #' enrollees(pac = \"2860305554\", gender = \"9\")\n\n\ntry(class_args(\n  id     = 1234567890,\n  state  = \"ZZ\",\n  number = \"300.12\"))\n```\n:::\n\n### `class_args`\n\n::: {.cell}\n\n```{.r .cell-code}\nnull_numeric    <- new_union(NULL, class_numeric)\nnull_vector     <- new_union(NULL, class_vector)\nnull_character  <- new_union(NULL, class_character)\n\nclass_args <- new_class(\n  \"class_args\",\n  properties = list(\n    id     = null_numeric,\n    state  = null_character,\n    name   = null_character,\n    number = null_numeric\n  ),\n  validator = function(self) { \n    if (not_null(self@state) && \n        any(!self@state %in% state.abb)) \n      paste(\"`state`\", self@state, \"not found\")\n  }\n)\n\ntry(class_args(\n  id     = 1234567890, \n  state  = \"ZZ\",\n  number = \"300.12\"))\n\ntry(class_args(\n  state  = \"ZZ\",\n  name   = \"Jerry\",\n  number = 300.12))\n\nclass_args(state  = c(\"GA\", \"MD\"))\n```\n:::\n\n## Luhn Check\n\n::: {.cell}\n\n```{.r .cell-code}\nrnpi <- function(n) {\n  replicate(n = 10, \n            expr = cheapr::cheapr_c(1L, cheapr::sample_(0L:9L, 8L, replace = TRUE)), \n            simplify = FALSE)\n}\n\nrandom_npi_gen <- function(n) {\n  paste0(\n  1L, \n  replicate(\n    n = n,\n    expr = paste0(\n      cheapr::sample_(0L:9L, 9L, replace = TRUE), \n      collapse = \"\"),\n    simplify = TRUE\n    )\n  )\n}\n\nluhn_check <- function(x) {\n  \n  if (length(x) != 1L) stop(\"`x` must be length 1\")\n\n  i <- c(1L, 3L, 5L, 7L, 9L)\n  \n  d <- unlist(x, use.names = FALSE) |> \n    strsplit(\"\") |> \n    _[[1]][-1] |> \n    cheapr::cheapr_rev() |> \n    as.integer()\n  \n  d[i] <- cheapr::set_multiply(d[i], 2L)\n  d[i] <- cheapr::cheapr_if_else(d[i] > 9L, d[i] - 9L, d[i])\n  d    <- cheapr::set_add(sum(d), 24L)\n  d    <- cheapr::set_subtract(cheapr::set_multiply(cheapr::set_ceiling(d / 10L), 10L), d)\n\n  identical(paste0(substr(x, 1, 9), d), x)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntictoc::tic()\nexnpi <- map(random_npi_gen(100000), \\(x) x[luhn_check(x)]) |> unlist(use.names = FALSE) |> length() |> print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10056\n```\n\n\n:::\n\n```{.r .cell-code}\ntictoc::toc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n10.33 sec elapsed\n```\n\n\n:::\n:::\n\n\n\n",
    "supporting": [
      "wk_args_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}