{
  "hash": "9704640208d019ec769192e1e27674a2",
  "result": {
    "engine": "knitr",
    "markdown": "---\noutput: html_document\neditor_options: \n  chunk_output_type: console\n---\n# NPI Registry {#sec-nppesapi}\n\n\n\n## NLM\n\n   * [NLM: NPI Registry](https://clinicaltables.nlm.nih.gov/apidoc/npi_idv/v3/doc.html)\n   * [NLM: NPI API](https://clinicaltables.nlm.nih.gov/api/npi_idv/v3)\n\n::: {.cell}\n\n```{.r .cell-code}\nnlm <- function(terms) {\n\n  req <- request(\"https://clinicaltables.nlm.nih.gov/api/npi_idv/v3/search?\") |>\n    req_url_query(\n      terms   = terms,\n      maxList = 500,\n      count   = 500,\n      offset  = 0L,\n      .space  = \"form\"\n    )\n\n  resp <- req_perform(req) |> resp_simple_json()\n\n  n <- resp[[1]]\n\n  if (n > 7500L) {\n    cli::cli_abort(c(\n      \"Your search returned {.strong {.val {n}}} results.\",\n      \"x\" = \"The NLM API limit is {.strong {.emph 7,500}}.\"))\n  }\n\n  results <- resp[[4]] |>\n    as.data.frame() |>\n    set_names(c(\"name\", \"npi\", \"specialty\", \"address\")) |>\n    as_tbl()\n\n  nreq <- offset_length(n, 500) > 1\n\n  cli_n_results_requests(n, 500)\n\n  if (false(nreq)) {\n\n    return(results)\n\n    } else {\n\n      results2 <- req_perform_iterative(\n      req,\n      next_req        = iterate_with_offset(\n        param_name    = \"offset\",\n        start         = 500,\n        offset        = 500,\n        resp_complete = is_complete_with_limit(500))) |>\n      map(\n        function(x) {\n          x <- resp_simple_json(x)\n          x[[4]] |>\n            as.data.frame() |>\n            set_names(c(\"name\", \"npi\", \"specialty\", \"address\"))\n        }) |>\n      rowbind()\n\n    as_tbl(rowbind(results, results2))\n  }\n}\n```\n:::\n\n## NPPES\n\n   * [NPPES API Help](https://npiregistry.cms.hhs.gov/api-page)\n   * Contact: `mailto:NPIFiles@cms.hhs.gov`\n\n::: {.cell}\n\n```{.r .cell-code}\nconvert_epoch <- \\(x) {\n  as.Date(\n    as.POSIXct.numeric(\n      as.numeric(x) / 1000, \n      origin = \"1970-01-01\"\n      )\n    )\n}\n\nyank <- \\(x) x[[1]]\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnppes <- function(npi            = NULL,\n                  entity         = NULL,\n                  first          = NULL,\n                  last           = NULL,\n                  organization   = NULL,\n                  name_type      = NULL,\n                  taxonomy_desc  = NULL,\n                  city           = NULL,\n                  state          = NULL,\n                  zip            = NULL,\n                  country        = NULL) {\n\n  x <- request(\"https://npiregistry.cms.hhs.gov/api/?version=2.1\") |>\n    req_url_query(\n      number               = npi,\n      enumeration_type     = entity,\n      first_name           = first,\n      last_name            = last,\n      name_purpose         = name_type,\n      organization_name    = organization,\n      taxonomy_description = taxonomy_desc,\n      city                 = city,\n      state                = state,\n      postal_code          = zip,\n      country_code         = country,\n      limit                = 1200L,\n      skip                 = 0L\n    ) |>\n    perform_simple()\n  \n  list(\n    count   = x$result_count,\n    results = x$results |> as_tbl()\n  )\n}\n\nex <- nppes(npi = 1528060837)\n\nget_vars(ex$results, is_character) |> \n  fcompute(\n    npi    = number,\n    entity = factor_(\n      val_match(\n        enumeration_type, \n        \"NPI-1\" ~ \"I\", \n        \"NPI-2\" ~ \"O\", \n        .default = \"X\")),\n    date_created = convert_epoch(created_epoch),\n    last_updated = convert_epoch(last_updated_epoch)\n  ) |> \n  add_vars(slt(ex$results$basic, -enumeration_date, -last_updated, -status))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 12\n  npi        entity date_created last_updated first_name last_name middle_name\n* <chr>      <fct>  <date>       <date>       <chr>      <chr>     <chr>      \n1 1528060837 I      2005-06-01   2007-07-09   JOHN       SARGEANT  B          \n# ℹ 5 more variables: credential <chr>, sole_proprietor <chr>, sex <chr>,\n#   name_prefix <chr>, name_suffix <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\n# get_vars(ex$results, is_list)\n\nyank(ex$results$addresses)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  country_code  country_name address_purpose address_type             address_1\n1           US United States         MAILING          DOM 1939 OLD ANNAPOLIS RD\n2           US United States        LOCATION          DOM   6000 EXECUTIVE BLVD\n       city state postal_code telephone_number address_2   fax_number\n1  WOODBINE    MD   217978201     301-854-6748      <NA>         <NA>\n2 ROCKVILLE    MD   208523803     301-816-0020   STE 201 301-816-0334\n```\n\n\n:::\n\n```{.r .cell-code}\nyank(ex$results$taxonomies)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        code taxonomy_group               desc state license primary\n1 225100000X                Physical Therapist    MD   14262    TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nyank(ex$results$practiceLocations)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nlist()\n```\n\n\n:::\n\n```{.r .cell-code}\nyank(ex$results$identifiers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  code                 desc                 issuer identifier state\n1   01 Other (non-Medicare)              Aetna HMO    0129008    MD\n2   01 Other (non-Medicare)               DOL/OWCP  146574500    MD\n3   01 Other (non-Medicare)      United Healthcare     230033    MD\n4   01 Other (non-Medicare)  MDIPA/Alliance/MLH/OC      38311    MD\n5   01 Other (non-Medicare)                  Cigna    4074069    MD\n6   01 Other (non-Medicare)              Aetna PPO    4296824    MD\n7   01 Other (non-Medicare) MCR Railroad retiremnt  650003825    DC\n8   01 Other (non-Medicare)    BC/BS Non Provider#       k366    MD\n```\n\n\n:::\n\n```{.r .cell-code}\nempty(yank(ex$results$endpoints))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nempty(yank(ex$results$other_names))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n",
    "supporting": [
      "api_nppes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}