{
  "hash": "17e52ce669a58a9ea90c64ab73c3546d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Query Syntax\"\neditor_options: \n   chunk_output_type: console\n---\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<a href=\"https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module/filtering\" class=\"btn btn-outline-secondary\" role=\"button\" target=\"_blank\">\n<i class=\"bi bi-box-arrow-up-right\"></i>\nDrupal JSON:API\n</a>\n```\n\n:::\n:::\n\n## Query Generation\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nformat_syntax <- \\(name, value) {\n  setNames(\n    value, \n    paste0(\n      name, \n      \"[id-\", \n      seq_along(value), \n      \"][condition][value]\"))\n}\n\nformat_syntax(\"filter\", c(\"GA\", \"NY\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfilter[id-1][condition][value] filter[id-2][condition][value] \n                          \"GA\"                           \"NY\" \n```\n\n\n:::\n\n```{.r .cell-code}\nrequest(\"https://example.com\") |>\n  req_url_query(\n    !!!format_syntax(\"ID\", 5:7)\n    )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n<httr2_request>\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nGET\nhttps://example.com?ID%5Bid-1%5D%5Bcondition%5D%5Bvalue%5D=5&ID%5Bid-2%5D%5Bcondition%5D%5Bvalue%5D=6&ID%5Bid-3%5D%5Bcondition%5D%5Bvalue%5D=7\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBody: empty\n```\n\n\n:::\n:::\n\n\n## JSON:API\n\nThe Drupal core [JSON:API module](https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module) implements the JSON:API spec for Drupal entities. It provides a zero-configuration required, opinionated, way to allow RESTful CRUD for a Drupal site's content.\n\nIt is closely coupled to Drupal's Entity and Field APIs, response caching, and authentication and authorization systems. Because it follows the shared JSON:API conventions it can help increase productivity and allow you to take advantage of non-Drupal specific tooling.\n\n[Refer to the Drupal documentation](https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module/filtering) for more information on filtering API requests.\n\n## Filtering\n\n[Collections](https://www.drupal.org/docs/8/modules/json-api/collections-filtering-and-sorting) are listings of resources. When you make an unfiltered request to a collection endpoint like `/jsonapi/node/article`, you'll just get every article that you're allowed to see. Without filters, you can't get only the articles that you want.\n\nThe simplest, most common filter is a **key-value filter**:\n\n```r\n/data?\n   filter[field_1]=value_1&\n   filter[field_2]=value_2\n```\n\nThis matches all resources with `field_1` equal to `\"value_1\"` and `field_2` equal to `\"value_2\"`.\n\n### Building Filters\n\nThe fundamental building blocks of JSON:API's filters are **conditions** and **groups**. \n\n   * __Conditions__ assert that something is `TRUE`\n   * __Groups__ compose sets of conditions\n\nThose sets can be nested to make super fine queries. You can think of a nested set as a tree:\n\n_Conventional representation:_\n\n```r\nis_A(is_B(x) & is_C(is_D(x) | is_E(x), x), x)\n```\n\n_Tree representation:_\n\n```r\n   A\n  / \\\n B & C\n    / \\\n   D | E\n```\n\nIn both representations:\n\n   * `D` & `E` are members of `C` in an `OR` group\n   * `B` & `C` are members of `A` in an `AND` group\n\nA condition has 3 primary parts: a `[path]`, an `[operator]` and a `[value]`.\n\n   1. `[path]`: Column of a dataset\n   1. `[operator]`: Logical comparison\n   1. `[value]`: Row of a dataset\n\nIn JSON:API syntax, it is formatted as a key/value pair to work inside a URL query string. If we were filtering on a user's first name, a condition might look like this:\n\n> __Note__: `%3D` is the URL-encoded `=` symbol. All operators must be URL-encoded.\n\n```r\n/data?\n   filter[id1][condition][path]=first_name&\n   filter[id1][condition][operator]=%3D&\n   filter[id1][condition][value]=Janis\n```\n\nNotice that we put an `id` inside the first set of square brackets. Every condition or group should have a unique identifier. \n\nBut what if we have lots of Janises in the system? Let's add another filter so we only get Janises with a last name that starts with `\"J\"`:\n\n```r\n/data?\n   filter[id1][condition][path]=first_name&\n   filter[id1][condition][operator]=%3D&\n   filter[id1][condition][value]=Janis&\n   filter[id2][condition][path]=last_name&\n   filter[id2][condition][operator]=STARTS_WITH&\n   filter[id2][condition][value]=J\n```\n\nJSON:API Allowed Operators:\n\n```r\n= \n<>\n> \n>= \n< \n<=\nSTARTS_WITH \nCONTAINS \nENDS_WITH\nIN \nNOT IN\nBETWEEN \nNOT BETWEEN\nIS NULL \nIS NOT NULL\n```\n\n### Condition Groups\n\nA **group** is a set of conditions joined by a **conjunction**, either `AND` or `OR`. Let's say we want to find all users with a last name that starts with \"J\" and have either the first name \"Janis\" or \"Joan\". To do that, we add a group:\n\n```r\n/data?\n   filter[grp1][group][conjunction]=OR\n```\n\nThen, we need assign filters to that new group. To do that, we add a `memberOf` key. Every condition and group can have a `memberOf` key. \n\n```r\n/data?\n   filter[g1][group][conjunction]=OR&\n   filter[f1][condition][path]=first_name&\n   filter[f1][condition][operator]=%3D&\n   filter[f1][condition][value]=Janis&\n   filter[f1][condition][memberOf]=g1&\n   filter[f2][condition][path]=first_name&\n   filter[f2][condition][operator]=%3D&\n   filter[f2][condition][value]=Joan&\n   filter[f2][condition][memberOf]=g1&\n   filter[f3][condition][path]=last_name&\n   filter[f3][condition][operator]=STARTS_WITH&\n   filter[f3][condition][value]=J\n```\n\n> __Note__: Groups can have a `memberOf` key just like conditions, which means you can have groups of groups. Every filter without a `memberOf` key is assumed to be part of a \"root\" group with a conjunction of `AND`.\n\nDoes that look familiar? It should, we saw it above as a tree:\n\n```r\n   A         A = root & g1\n  / \\\n /   \\       B = f3\nB  &  C      C = g1\n     / \\\n    /   \\    D = f1\n   D  |  E   E = f2\n```\n\n### Paths\n\nPaths provide a way to filter based on relationship values. Up to this point, we've just been filtering by the hypothetical `first_name` and `last_name`. Suppose we want to filter by the name of a user's career, where career types are stored as a separate resource. We could add a filter like this:\n\n```r\n/data?\n   filter[career][condition][path]=field_career.name&\n   filter[career][condition][operator]=%3D&\n   filter[career][condition][value]=DOCTOR\n```\n\nPaths use a \"dot notation\" to traverse relationships. If a resource has a relationship, you can add a filter against it by concatenating the relationship field name and the relationship's field name with a `.` (dot). You can even filter by relationships of relationships (and so on) just by adding more field names and dots.\n\nYou can filter on a specific index of a relationship by putting a non-negative integer in the path. So the path `some_relationship.1.some_attribute` would only filter by the 2nd related resource.\n\n> Tip: You can filter by sub-properties of a field. For example, a path like `field_phone.country_code` will work even though `field_phone` isn't a relationship.\n\nWhen filtering against configuration properties, you can use an asterisk (`*`) to stand-in for any portion of a path. \n\nFor example, `/jsonapi/field_config/field_config?filter[dependencies.config.*]=comment.type.comment` would match all field configs in which `[\"attributes\"][\"dependencies\"][\"config\"]` (an indexed array) contains the value `\"comment.type.comment\"`.\n\n### Shortcuts\n\nWhen the operator is `=`, you don't have to include it:\n```r\n/data?\n   filter[a-label][condition][path]=first_name&\n   filter[a-label][condition][operator]=%3D&\n   filter[a-label][condition][value]=Janis\n```\n_becomes_\n```r\n/data?\n   filter[janis-filter][condition][path]=first_name&\n   filter[janis-filter][condition][value]=Janis\n```\nWhen the operator is `=` and you don't need to filter by the same field twice, the path can be the identifier:\n\n```r\n/data?\n   filter[janis-filter][condition][path]=first_name&\n   filter[janis-filter][condition][value]=Janis\n```\n_becomes_\n```r\n/data?\n   filter[first_name][value]=Janis\n```\nReduce the simplest equality checks down to a _key-value_ form:\n\n```r\n/data?\n   filter[first_name]=Janis\n```\n\n### Filters and Access Control\n\nFirst, a warning: don't make the mistake of confusing filters for access control. Just because you've written a filter to remove something that a user shouldn't be able to see, doesn't mean it's not accessible. **Always perform access checks on the backend.**\n\nWith that big caveat, let's talk about using filters to complement access control. To improve performance, you should filter out what your users will not be able to see. The most frequent support request in the JSON:API issue queues can be solved by this one simple trick! If you know your users cannot see unpublished content, add the following filter:\n\n```r\n/data?\n   filter[status][value]=1\n```\n\nUsing this method, you'll lower the number of unnecessary requests that you need to make. **That's because JSON:API doesn't return data for resources to which a user doesn't have access.** You can see which resources may have been affected by inspecting the meta.errors section of JSON:API document. So, do your best to filter out inaccessible resources ahead of time.\n\n--------------------------------------------------------------------------------\n\n## Examples\n\n### Exact Match on Column\n\n```r\n/data?\n   filter[PROVIDER_TYPE_DESC]=PRACTITIONER - GENERAL PRACTICE\n```\n\n### CONTAINS \n\nSearch on One Column\n\n```r\n/data?\n   filter[example][condition][path]=PROVIDER_TYPE_DESC&\n   filter[example][condition][operator]=CONTAINS&\n   filter[example][condition][value]=SUPPLIER\n```\n\n### CONTAINS & EQUALS \n\nCombination Search on Two Columns\n\n```r\n/data?\n   filter[FID-1][condition][path]=PROVIDER_TYPE_DESC&\n   filter[FID-1][condition][operator]=CONTAINS&\n   filter[FID-1][condition][value]=PRACTITIONER&\n   filter[FID-2][condition][path]=STATE_CD&\n   filter[FID-2][condition][operator]=%3D&\n   filter[FID-2][condition][value]=MD\n```\n\n### EQUALS Simplified\n\nThis example is an equals filter searching the Accountable Care Organizations 2021 dataset for a single ID.\n\n```r\n/data?\n   filter[FID-1][condition][path]=aco_id&\n   filter[FID-1][condition][operator]=%3D&\n   filter[FID-1][condition][value]=A4807\n```\n\nAn equals filter can be simplified like this.\n\n```r\n/data?\n   filter[aco_id]=A4807\n```\n### Keyword\n\nThe keyword search will look for matching words in every column. This example will check for \"Alex\" in the Order and Referring dataset. Notice that it finds matches on both the first and last name fields.\n\n```r\n/data?\n   keyword=Alex\n```\n\n### Multiple Conditions at Once\n\nThis search returns results from the Medicare Fee-For-Service Public Provider Enrollment dataset where the provider specialty is \"PRACTITIONER - OPTOMETRY\" and the location is Virginia.\n\n```r\n/data?&\n   filter[ROOT][group][conjunction]=AND&\n   filter[GID-1][group][conjunction]=AND&\n   filter[GID-1][group][memberOf]=ROOT&\n   filter[FID-1][condition][path]=PROVIDER_TYPE_DESC&\n   filter[FID-1][condition][operator]=%3D&\n   filter[FID-1][condition][value]=PRACTITIONER - OPTOMETRY&\n   filter[FID-1][condition][memberOf]=GID-1&\n   filter[FID-2][condition][path]=STATE_CD&\n   filter[FID-2][condition][operator]=%3D&\n   filter[FID-2][condition][value]=VA&\n   filter[FID-2][condition][memberOf]=GID-1\n```\n\n### IN\n\nThis search returns results from the Opioid Treatment Program Providers dataset where the provider is located from MD, MI, or VA with the results sorted by NPI.\n\n```r\n/data?\n   filter[condition][path]=STATE&\n   filter[condition][operator]=IN&\n   filter[condition][value][]=MI&\n   filter[condition][value][]=VA&\n   filter[condition][value][]=MD&\n   sort=NPI\n```\n\n**Note About Empty Brackets:**\n\nWhen utilizing square brackets for multiple values filters, *do not just use empty square brackets for a new value.*\nWhile these work when typed into the URL, Guzzle and other HTTP clients will only create one value, as the array key will be seen to be the same and override the previous value. **It is better to use an index to create unique array elements.**\n\nNote the two square brackets added behind the value to make it into an array:\n\n```r\n/data?\n   filter[FID-1][condition][path]=STATE&\n   filter[FID-1][condition][operator]=IN&\n   filter[FID-1][condition][value][1]=MI&\n   filter[FID-1][condition][value][2]=VA&\n   filter[FID-1][condition][value][3]=MA\n```\n\n\n### Sort Results\n\nUse the `sort` query parameter to specify which column the results should be sorted by:\n\n```r\nLowest first:\n\n/data?\n   sort=NPI\n   \nHighest first:\n\n/data?\n   sort=-NPI\n```\n\n### Subset Columns\n\nAdd a comma-separated string of column names to the `column` query parameter to limit the columns returned:\n\n```r\n/data?\n   column=NPI,FIRST_NAME,LAST_NAME\n```\n\n## Building Queries\n\n   1. Select Dataset/Method\n   1. Build JSON Query\n   1. Retrieve Number of Results\n   1. Build Offset Sequence\n   1. Build Request\n\n```r\ncatalog:        main_catalog\n  format:       API\n  description:  latest\n  title:        Medicare Fee-For-Service Public Provider Enrollment\n  accessURL:    \"\"\n```\n\n```r\nscheme:   https://\nhostname: data.cms.gov/\npath:\n          head:       data-api/v1/dataset/\n          identifier: 9887a515-7552-4693-bf58-735c77af46d7/\n          tail:       data?\n          nobs:       data/stats?\nquery:\n          filter:     1\n          path:       PROVIDER_TYPE_DESC\n          operator:   =\n          value:      PRACTITIONER - GENERAL PRACTICE\n          call:       filter[PROVIDER_TYPE_DESC]=PRACTITIONER - GENERAL PRACTICE\n```\n",
    "supporting": [
      "api_syntax_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}