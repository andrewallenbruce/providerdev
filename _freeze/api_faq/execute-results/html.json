{
  "hash": "777bbee70eddc0f5e6053c3eab80ccf0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"API FAQ\"\neditor_options: \n   chunk_output_type: console\n---\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<a href=\"https://data.cms.gov/api-docs\" class=\"btn btn-outline-secondary\" role=\"button\" target=\"_blank\">\n<i class=\"bi bi-box-arrow-up-right\"></i>\nCMS API Docs\n</a>\n<a href=\"https://data.cms.gov/sites/default/files/2024-10/7ef65521-65a4-41ed-b600-3a0011f8ec4b/API%20Guide%20Formatted%201_6.pdf\" class=\"btn btn-outline-secondary\" role=\"button\" target=\"_blank\">\n<i class=\"bi bi-box-arrow-up-right\"></i>\nAPI FAQ\n</a>\n```\n\n:::\n:::\n\n<style>\n.codeblock-label {\n  color: #000;\n  display: inline-block;\n  border-top-left-radius: .5rem;\n  border-top-right-radius: .5rem;\n  padding: 0.25rem 0.75rem;\n  background-color: #cccccc;\n  margin-bottom: 0;\n  font-size: 0.875em;\n  font-family: var(--bs-font-monospace);\n}\n  \n.codeblock-label + div.sourceCode {\n  margin-top: 0;\n}\n</style>\n\nThe **data.CMS.gov/data.json** API:\n\n   * offers access to CMS public data\n   * is REST-ful\n   * has predictable resource-oriented URLs\n   * accepts form-encoded requests\n   * returns JSON & JSON:API responses\n   * uses standard HTTP response codes.\n\n## API Integration\n\nTo integrate endpoint requests with the **data.cms.gov Public API**, follow these steps:\n\n   1. Dataset & Identifier: \n      * [Search for dataset](https://data.cms.gov/search) and visit its **Overview** page\n      * Click **Access API** then **API Docs for the Dataset**\n   2. Endpoint structure:\n      * `data.cms.gov/data-api/v1/dataset/{{dataset_id}}/data` \n   3. System uses **JSON:API** query syntax:\n      * Key-values: `?filter[field_name]=value&filter[field_other]=value`\n      * Responses are paged and support a max page size of 5000 rows\n      * Use `size` & `offset` query parameters to page through the data\n\n--------------------------------------------------------------------------------\n\n# Data Catalog file\n\nThe [`data.json`](https://data.cms.gov/data.json) file is an [**Open Data**](https://resources.data.gov/resources/dcat-us/) catalog containing all available datasets. As new data is added, `data.json` is automatically updated.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata_json <- read_json_arrow(\n  file = \"https://data.cms.gov/data.json\",\n  col_select = c(\"dataset\"),\n    as_data_frame = TRUE) |> \n  to_duckdb()\n\ndata_json |> glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: ??\nColumns: 1\nDatabase: DuckDB v1.1.3 [Andrew@Windows 10 x64:R 4.4.2/:memory:]\n$ dataset <list> [<data.frame[139 x 22]>]\n```\n\n\n:::\n:::\n\n\n> **Note:** Removing `col_select = c(\"dataset\")` from the above call returns the following metadata:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n@context    <chr> https://project-open-data.cio.gov/v1.1/schema/catalog.jsonld\n@id         <chr> https://data.cms.gov/data.json\n@type       <chr> dcat:Catalog\nconformsTo  <chr> https://project-open-data.cio.gov/v1.1/schema\ndescribedBy <chr> https://project-open-data.cio.gov/v1.1/schema/catalog.json\ndataset     <list> [<data.frame[138 x 22]>]\n```\n\n\n:::\n:::\n\n\nWithin `data.json`, there is an array called `dataset`. One can search through this array using the dataset's `title`, such as `\"Payroll Based Journal Daily Nurse Staffing\"`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata_json |> \n  pull(dataset) |> \n  pluck(1) |> \n  filter(\n    grepl(\n      \"Payroll Based Journal Daily Nurse Staffing\", \n      title)) |> \n  mutate(\n    bureauCode = delist(bureauCode),\n    keyword = flatten_column(keyword),\n    language = delist(language),\n    programCode = delist(programCode),\n    references = delist(references),\n    theme = delist(theme)) |> \n  unnest_wider(contactPoint, names_sep = \"_\") |>\n  unnest_wider(publisher, names_sep = \"_\") |>\n  purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- $@type                 c1 dcat:Dataset                                    ...\n- $accessLevel           c1 public                                          ...\n- $accrualPeriodicity    c1 R/P3M                                           ...\n- $bureauCode            c1 009:38                                          ...\n- $contactPoint_@type    c1 vcard:Contact                                   ...\n- $contactPoint_fn       c1 Nursing Home Staffing - CCSQ (PBJ Reports)      ...\n- $contactPoint_hasEmail c1 mailto:nhstaffing@cms.hhs.gov                   ...\n- $describedBy           c1 https://data.cms.gov/resources/payroll-based-jo ...\n- $dataQuality           l1 T                                               ...\n- $description           c1 The Payroll Based Journal (PBJ) Nurse Staffing  ...\n- $distribution          L1 list(structure(list(\"@type\" = c(\"dcat:Distribut ...\n- $identifier            c1 https://data.cms.gov/data-api/v1/dataset/7e0d53 ...\n- $keyword               c1 Medicare, Original Medicare, Hospitals & Facili ...\n- $landingPage           c1 https://data.cms.gov/quality-of-care/payroll-ba ...\n- $language              c1 en-US                                           ...\n- $license               c1 https://www.usa.gov/government-works            ...\n- $modified              p1 2024-10-31                                      ...\n- $programCode           c1 009:000                                         ...\n- $publisher_@type       c1 org:Organization                                ...\n- $publisher_name        c1 Centers for Medicare & Medicaid Services        ...\n- $references            c1 https://data.cms.gov/resources/payroll-based-jo ...\n- $temporal              c1 2017-01-01/2024-06-30                           ...\n- $theme                 c1 Medicare                                        ...\n- $title                 c1 Payroll Based Journal Daily Nurse Staffing      ...\n- $describedByType       c1 NA                                              ...\n```\n\n\n:::\n:::\n\n\nWithin `dataset`, there is an array called `distribution` which contains all dataset versions, in all available formats:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndistribution <- data_json |> \n  pull(dataset) |> \n  pluck(1) |> \n  select(distribution) |> \n  unnest(distribution)\n\ndistribution |> \n  purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- $@type        c3909 dcat:Distribution                                     ...\n- $format       c3909 API                                                   ...\n- $accessURL    c3909 https://data.cms.gov/data-api/v1/dataset/9767cb68-8ea ...\n- $resourcesAPI c3909 https://data.cms.gov/data-api/v1/dataset-resources/97 ...\n- $description  c3909 latest                                                ...\n- $title        c3909 Accountable Care Organization Participants : 2024-01- ...\n- $modified     p3909 2024-01-29                                            ...\n- $temporal     c3909 2024-01-01/2024-12-31                                 ...\n- $downloadURL  c3909 NA                                                    ...\n- $mediaType    c3909 NA                                                    ...\n```\n\n\n:::\n:::\n\n## Formats\n\n   * __description__ `\"latest\"` is a URL that always point to the latest data\n   * __mediaType__ `\"text/csv\"` is a downloadable CSV file\n   * __mediaType__ `\"application/zip\"` is a downloadable ZIP file\n   * __format__ `\"API\"` is an API endpoint\n   * Remaining entries provide references to data at fixed points in time\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndistribution |> \n  count(description, \n        format, \n        mediaType) |> \n  emphatic::as_emphatic() |> \n  emphatic::hl(ggplot2::scale_colour_viridis_c(), cols = \"n\") |>\n  emphatic::hl_adjust(text_contrast = 0.5, na = \"-\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<pre style=''>\n<span style='text-decoration:underline;'>    description format                mediaType    n</span><br/>1  <span style='color:#808080;'><span>      latest</span></span><span style='color:#808080;'><span>    API</span></span><span style='color:#808080;'><span>                        -</span></span><span style='color:#a38db1;'><span style='background-color:#461a62;'>  112</span></span><br/>2  <span style='color:#808080;'><span>           -</span></span><span style='color:#808080;'><span>    API</span></span><span style='color:#808080;'><span>                        -</span></span><span style='color:#7f7413;'><span style='background-color:#fde725;'> 1632</span></span><br/>3  <span style='color:#808080;'><span>           -</span></span><span style='color:#808080;'><span>      -</span></span><span style='color:#808080;'><span> application/vnd.ms-excel</span></span><span style='color:#a280aa;'><span style='background-color:#440154;'>   21</span></span><br/>4  <span style='color:#808080;'><span>           -</span></span><span style='color:#808080;'><span>      -</span></span><span style='color:#808080;'><span>          application/zip</span></span><span style='color:#9cb1c5;'><span style='background-color:#39638b;'>  534</span></span><br/>5  <span style='color:#808080;'><span>           -</span></span><span style='color:#808080;'><span>      -</span></span><span style='color:#808080;'><span>                 text/csv</span></span><span style='color:#7b7315;'><span style='background-color:#f5e62a;'> 1610</span></span><br/>\n</pre>\n`````\n:::\n:::\n\nFor instance, the following URL will *always* point to the **Q2 2021 Payroll Based Journal Daily Nurse Staffing** data:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# \"https://data.cms.gov/data-api/v1/dataset/d10d792e-ea6e-4145-8512-34efbc1be04b/data\"\n\nstaffing <- distribution |> \n  filter(\n    grepl(\"Payroll Based Journal Daily Nurse Staffing\", title),\n    format == \"API\",\n    grepl(\"^2021-04\", temporal)) |> \n  pull(accessURL) |> \n  request() |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nhead(staffing, 1) |> \n  purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- $PROVNUM          c1 015010                        \n- $PROVNAME         c1 COOSA VALLEY HEALTHCARE CENTER\n- $CITY             c1 SYLACAUGA                     \n- $STATE            c1 AL                            \n- $COUNTY_NAME      c1 Talladega                     \n- $COUNTY_FIPS      c1 121                           \n- $CY_Qtr           c1 2021Q2                        \n- $WorkDate         c1 20210401                      \n- $MDScensus        c1 70                            \n- $Hrs_RNDON        c1 8                             \n- $Hrs_RNDON_emp    c1 8                             \n- $Hrs_RNDON_ctr    c1 0                             \n- $Hrs_RNadmin      c1 48.25                         \n- $Hrs_RNadmin_emp  c1 48.25                         \n- $Hrs_RNadmin_ctr  c1 0                             \n- $Hrs_RN           c1 32                            \n- $Hrs_RN_emp       c1 32                            \n- $Hrs_RN_ctr       c1 0                             \n- $Hrs_LPNadmin     c1 0                             \n- $Hrs_LPNadmin_emp c1 0                             \n- $Hrs_LPNadmin_ctr c1 0                             \n- $Hrs_LPN          c1 63.25                         \n- $Hrs_LPN_emp      c1 63.25                         \n- $Hrs_LPN_ctr      c1 0                             \n- $Hrs_CNA          c1 189.5                         \n- $Hrs_CNA_emp      c1 189.5                         \n- $Hrs_CNA_ctr      c1 0                             \n- $Hrs_NAtrn        c1 0                             \n- $Hrs_NAtrn_emp    c1 0                             \n- $Hrs_NAtrn_ctr    c1 0                             \n- $Hrs_MedAide      c1 0                             \n- $Hrs_MedAide_emp  c1 0                             \n- $Hrs_MedAide_ctr  c1 0                             \n```\n\n\n:::\n:::\n\n## Temporal Data\n\nDatasets with multiple historical versions available will have a `temporal` field in the `distribution` array of the `data.json`.\n\n> **Format**: `YYYY-mm-dd/YYYY-mm-dd`\n\nThe following example returns the [2017 Medicare Inpatient Hospitals - by Provider and Service Data](https://data.cms.gov/provider-summary-by-type-of-service/medicare-inpatienthospitals/medicare-inpatient-hospitals-by-provider-and-service):\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndistribution |> \n  filter(\n    grepl(\"Medicare Inpatient Hospitals - by Provider and Service\", title), \n    format == \"API\",\n    temporal == \"2017-01-01/2017-12-31\") |> \n  purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- $@type        c1 dcat:Distribution                                        ...\n- $format       c1 API                                                      ...\n- $accessURL    c1 https://data.cms.gov/data-api/v1/dataset/b61ba5eb-021b-4 ...\n- $resourcesAPI c1 https://data.cms.gov/data-api/v1/dataset-resources/b61ba ...\n- $description  c1 NA                                                       ...\n- $title        c1 Medicare Inpatient Hospitals - by Provider and Service : ...\n- $modified     p1 2023-05-10                                               ...\n- $temporal     c1 2017-01-01/2017-12-31                                    ...\n- $downloadURL  c1 NA                                                       ...\n- $mediaType    c1 NA                                                       ...\n```\n\n\n:::\n:::\n\n## Different JSON Methods\n\nThere are two methods of accessing the latest data. \n\nBoth result in a URL pointing to the most recent version of the dataset. This URL is canonical, i.e., will not change as new versions are added. \n\n> For this reason, it is _recommended to **always** start with the **`data.json` object** as opposed to hardcoding any URL_.\n\n### Standard JSON\n\nUse the __`distribution`__ with the `\"latest\"` __`description`__:\n\n```r\n<data_json>\n    => <dataset> \n    => <distribution> \n    -> ($description == \"latest\")\n    -> ($accessURL)\n```\n\n> For example, this URL for Opt Out Affidavits is:\n\n```r\nhttps://data.cms.gov/\n   data-api/v1/dataset/\n   9887a515-7552-4693-bf58-735c77af46d7/\n   data\n   ^^^^\n```\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndistribution |> \n  filter(\n    grepl(\"Order and Referring\", title),\n    description == \"latest\") |> \n  purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- $@type        c1 dcat:Distribution                                        ...\n- $format       c1 API                                                      ...\n- $accessURL    c1 https://data.cms.gov/data-api/v1/dataset/c99b5865-1119-4 ...\n- $resourcesAPI c1 https://data.cms.gov/data-api/v1/dataset-resources/c99b5 ...\n- $description  c1 latest                                                   ...\n- $title        c1 Order and Referring : 2024-12-23                         ...\n- $modified     p1 2024-12-23                                               ...\n- $temporal     c1 2024-12-15/2024-12-21                                    ...\n- $downloadURL  c1 NA                                                       ...\n- $mediaType    c1 NA                                                       ...\n```\n\n\n:::\n:::\n\n### JSON:API\n\nThe **JSON:API** form has a slightly different structure that includes metadata about the dataset. Otherwise it is identical to the **Standard JSON** method. \n\nUse the URL in the `identifier` field. \n\n\n```r\n<data_json>\n    => <dataset> \n    -> ($title == \"Order and Referring\")\n    -> ($identifier)\n```\n\n> For example, this URL for Opt Out Affidavits is:\n\n```r\nhttps://data.cms.gov/\n   data-api/v1/dataset/\n   9887a515-7552-4693-bf58-735c77af46d7/\n   data-viewer\n   ^^^^^^^^^^^\n```\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\njson_api <- data_json |> \n  pull(dataset) |> \n  pluck(1) |> \n  tibble() |> \n  filter(\n    grepl(\n      \"Order and Referring\", \n      title))\n\njson_api |> \n  mutate(\n    bureauCode = delist(bureauCode),\n    keyword = flatten_column(keyword),\n    language = delist(language),\n    programCode = delist(programCode),\n    references = delist(references),\n    theme = delist(theme)) |> \n  unnest_wider(contactPoint, names_sep = \"_\") |>\n  unnest_wider(publisher, names_sep = \"_\") |> \n  purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- $@type                 c1 dcat:Dataset                                    ...\n- $accessLevel           c1 public                                          ...\n- $accrualPeriodicity    c1 R/P3.5D                                         ...\n- $bureauCode            c1 009:38                                          ...\n- $contactPoint_@type    c1 vcard:Contact                                   ...\n- $contactPoint_fn       c1 Provider Enrollment Data Requests - CPI         ...\n- $contactPoint_hasEmail c1 mailto:ProviderEnrollmentDataRequests@cms.hhs.g ...\n- $describedBy           c1 https://data.cms.gov/resources/order-and-referr ...\n- $dataQuality           l1 T                                               ...\n- $description           c1 The Order and Referring dataset provides inform ...\n- $distribution          L1 list(structure(list(\"@type\" = c(\"dcat:Distribut ...\n- $identifier            c1 https://data.cms.gov/data-api/v1/dataset/c99b58 ...\n- $keyword               c1 Medicare, Original Medicare, Provider Enrollmen ...\n- $landingPage           c1 https://data.cms.gov/provider-characteristics/m ...\n- $language              c1 en-US                                           ...\n- $license               c1 https://www.usa.gov/government-works            ...\n- $modified              p1 2024-12-23                                      ...\n- $programCode           c1 009:000                                         ...\n- $publisher_@type       c1 org:Organization                                ...\n- $publisher_name        c1 Centers for Medicare & Medicaid Services        ...\n- $references            c1 https://data.cms.gov/resources/order-and-referr ...\n- $temporal              c1 2023-05-21/2024-12-21                           ...\n- $theme                 c1 Medicare                                        ...\n- $title                 c1 Order and Referring                             ...\n- $describedByType       c1 NA                                              ...\n```\n\n\n:::\n:::\n\n--------------------------------------------------------------------------------\n\n# Pagination\n\nThe default is to provide the first 1,000 rows per request. However, there is an ability to increase the limit to 5,000 rows per request. You can use pagination to retrieve the entire dataset. \n\nFor example, with the Opt Out Affidavits dataset:\n\n   1. Start with the following request to get the number of rows:\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nstats <- request(\"https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data/stats\") |>\n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE)\n\nstats |> purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- $found_rows i1 47984\n- $total_rows i1 47984\n```\n\n\n:::\n:::\n      \n   2. Make a request for the *first* 5,000 rows:\n      \n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrequest(\"https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=0\") |>\n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE) |> \n  tibble() |> \n  purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- $First Name                  c5000 Jonathan     Kevin               David ...\n- $Last Name                   c5000 Raines       Carlson             Altch ...\n- $NPI                         c5000 1720444581   1811981905          11149 ...\n- $Specialty                   c5000 Psychiatry   Internal Medicine   Ortho ...\n- $Optout Effective Date       c5000 01/30/1998   07/01/2010          07/01 ...\n- $Optout End Date             c5000 01/30/2026   07/01/2026          07/01 ...\n- $First Line Street Address   c5000 1629 MONK RD 10700 CHARTER DRIVE 535 E ...\n- $Second Line Street Address  c5000 P O BOX 470                            ...\n- $City Name                   c5000 GLADWYNE     COLUMBIA            NEW Y ...\n- $State Code                  c5000 PA           MD                  NY    ...\n- $Zip code                    c5000 190351349    21044               10021 ...\n- $Eligible to Order and Refer c5000 N            Y                   Y     ...\n- $Last updated                c5000 02/15/2024   08/15/2024          08/15 ...\n```\n\n\n:::\n:::\n      \n   3. Make a request for the *next* 5,000 rows:\n   \n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrequest(\"https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=5000\") |>\n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE) |> \n  tibble() |> \n  purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- $First Name                  c5000 Katherine             Bret             ...\n- $Last Name                   c5000 Whipple               Jacobson         ...\n- $NPI                         c5000 1184839557            1790893956       ...\n- $Specialty                   c5000 Clinical Psychologist Oral Surgery     ...\n- $Optout Effective Date       c5000 08/29/2013            06/28/2014       ...\n- $Optout End Date             c5000 08/29/2025            06/28/2026       ...\n- $First Line Street Address   c5000 10529 SAINT PAUL ST   1718 S 288TH ST  ...\n- $Second Line Street Address  c5000                                        ...\n- $City Name                   c5000 KENSINGTON            FEDERAL WAY      ...\n- $State Code                  c5000 MD                    WA               ...\n- $Zip code                    c5000 208952614             98003            ...\n- $Eligible to Order and Refer c5000 N                     Y                ...\n- $Last updated                c5000 09/15/2023            07/15/2024       ...\n```\n\n\n:::\n:::\n\n   4. Continue increasing the offset until you reach the count from step 1\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrequest(\"https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=10000\") |>\n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE) |> \n  tibble() |> \n  purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- $First Name                  c5000 Steven               David             ...\n- $Last Name                   c5000 Glickman             Christensen       ...\n- $NPI                         c5000 1942372362           1255403606        ...\n- $Specialty                   c5000 Dentist              Dentist           ...\n- $Optout Effective Date       c5000 11/30/2015           11/30/2015        ...\n- $Optout End Date             c5000 11/30/2025           11/30/2025        ...\n- $First Line Street Address   c5000 71 FRANKLIN TURNPIKE 71 FRANKLIN TURNP ...\n- $Second Line Street Address  c5000 #1-1                 #1-1              ...\n- $City Name                   c5000 WALDWICK             WALDWICK          ...\n- $State Code                  c5000 NJ                   NJ                ...\n- $Zip code                    c5000 07463                07463             ...\n- $Eligible to Order and Refer c5000 Y                    Y                 ...\n- $Last updated                c5000 12/15/2023           12/15/2023        ...\n```\n\n\n:::\n:::\n\n## Pagination Example\n\nPaginates through the [Opt Out Affidavits](https://data.cms.gov/provider-characteristics/medicare-provider-supplier-enrollment/opt-out-affidavits) data:\n\n::: callout\n\n## Find the Number of Rows\n\nUse the `stats` endpoints i.e., \n\n   * `/data-viewer/stats`\n   * `/data/stats`\n\n::: \n\n\n```r\ndata/stats?\n   filter[f1][path]=State Code&\n   filter[f1][value]=GA\n\ndata?\n   size=5&\n   filter[f1][path]=State Code&\n   filter[f1][value]=GA\n```\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\noffset_sequence <- \\(found = 47500, limit = 5000) {\n  \n  if (found <= limit) return(found)\n  \n  if ((found %% 10) == 0) found else (found + (limit - found))\n  \n  seq.int(\n    from = 0, \n    to = if ((found %% 5) == 0) found else (limit + found), \n    by = limit)\n}\n\n# Not working\noffset_sequence(found = 47025)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1]     0  5000 10000 15000 20000 25000 30000 35000 40000 45000\n```\n\n\n:::\n\n```{.r .cell-code}\nquery <- glue::glue(\n  'list(\n  \"filter[id-{FID}][path]\" = \"{PATH}\",\n  \"filter[id-{FID}][value]\" = \"{VALUE}\"\n  )', \n  FID = 1, \n  PATH = \"State Code\", \n  VALUE = \"GA\") |> \n  rlang::parse_expr() |> \n  rlang::eval_bare()\n\naccessURL <- distribution |> \n  filter(\n    grepl(\"Opt Out Affidavits : \", title), \n    format == \"API\",\n    description == \"latest\") |> \n  pull(accessURL) |> \n  request() |> \n  req_url_query(size = 5000, !!!query)\n\nresp_found <- accessURL |> \n  req_url_path_append(\"stats\") |> \n  req_perform() |> \n  resp_body_json() |> \n  fuimus::gelm(\"found\")\n\naccessURL |> \n  req_perform() |> \n  resp_body_json(simplifyVector = TRUE) |> \n  tibble() |> \n  purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- $First Name                  c1101 Ana                    Joan            ...\n- $Last Name                   c1101 Adelstein              Miller          ...\n- $NPI                         c1101 1881778967             1982776308      ...\n- $Specialty                   c1101 Clinical Psychologist  Clinical Psycho ...\n- $Optout Effective Date       c1101 07/01/2012             07/01/2014      ...\n- $Optout End Date             c1101 07/01/2026             07/01/2026      ...\n- $First Line Street Address   c1101 675 SEMINOLE AVENUE NE 2520 WINDY HILL ...\n- $Second Line Street Address  c1101 SUITE 307              SUITE 106       ...\n- $City Name                   c1101 ATLANTA                MARIETTA        ...\n- $State Code                  c1101 GA                     GA              ...\n- $Zip code                    c1101 30307                  300678633       ...\n- $Eligible to Order and Refer c1101 N                      N               ...\n- $Last updated                c1101 08/15/2024             08/15/2024      ...\n```\n\n\n:::\n:::\n\n\n# CSVs\n\n   1. Start with a request to the `data.json`. \n   2. Match the dataset `title` with its name.\n   3. The most recent release will be at the top of the `distribution` array. \n   4. There is also a `temporal` field which can be used to find earlier releases.\n   5. Datasets available as either CSV or ZIP files will be designated as such in the `mediaType` field.\n   6. The `downloadURL` field will provide a direct download link for the data.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\norderrefer_url <- distribution |> \n  filter(\n    grepl(\"Order and Referring\", title), \n    mediaType == \"text/csv\",\n    modified == max(modified)) |> \n  pull(downloadURL)\n  \norderrefer_csv <- read_csv_arrow(\n  file = orderrefer_url, \n  as_data_frame = TRUE) |> \n  to_duckdb()\n\n# approx 2 million rows\norderrefer_csv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Source:   table<arrow_002> [?? x 8]\n# Database: DuckDB v1.1.3 [Andrew@Windows 10 x64:R 4.4.2/:memory:]\n          NPI LAST_NAME     FIRST_NAME PARTB DME   HHA   PMD   HOSPICE\n        <int> <chr>         <chr>      <chr> <chr> <chr> <chr> <chr>  \n 1 1558467555 .MCINDOE      THOMAS     N     Y     N     Y     N      \n 2 1770667479 A             SCOTT      N     Y     N     Y     N      \n 3 1417051921 A BELLE       N          Y     Y     Y     Y     N      \n 4 1356025894 A FOLEY       MEGAN      Y     Y     Y     Y     N      \n 5 1972040137 A NOVOTNY     ELIZABETH  Y     Y     Y     Y     N      \n 6 1760465553 A SATTAR      MUHAMMAD   Y     Y     Y     Y     Y      \n 7 1295400745 A'NEAL        BROGAN     Y     Y     N     N     N      \n 8 1265446264 A'VANT FOWLER CATHERINE  Y     Y     N     N     N      \n 9 1700562584 AAB           BAILEY     Y     Y     Y     N     Y      \n10 1205257284 AAB           KATIE      Y     Y     N     N     N      \n# ℹ more rows\n```\n\n\n:::\n:::\n\n::: callout\n\n## ZIP Example\n\n_CMS Summary Statistics/COVID data -> Likely not relevant to package scope_\n\n::: \n\n# _New:_ **Resources**\n\nResources (supplemental documents to the main dataset) are now available for download through the public API. Included are sub-files, tables, supplementary data, reports, and documentation. The new endpoints appear in the `resourcesAPI` field, a secondary endpoint from `data.json`. \n\n> **Note**: Limit by the `name` of the resource you want to download. This name may change between versions.\n\n## Example: Reassignment SubFile (`csv`)\n\nSite: [Public Provider Enrollment Reassignment SubFile](https://data.cms.gov/provider-characteristics/medicare-provider-supplier-enrollment/medicare-fee-for-service-public-provider-enrollment)\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nresp_resources <- distribution |> \n  filter(\n  grepl(\"Medicare Fee-For-Service\", title),\n  description == \"latest\") |> \n  pull(resourcesAPI) |> \n  request() |> \n  req_perform() |> \n  resp_body_json(simplifyVector = FALSE) |> \n  list_flatten() |> \n  list_flatten()\n\nreassign_url <- tibble(\n  name = gelm(resp_resources, \"name$\") |> delist(),\n  size = gelm(resp_resources, \"fileSize$\") |> delist(),\n  url =  gelm(resp_resources, \"downloadURL$\") |> delist()) |> \n  filter(grepl(\"Reassignment\", name))\n\nreassign_url |> \n  purse()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n- $name c1 Reassignment Sub-File 2024 Q3                                    ...\n- $size i1 108956340                                                        ...\n- $url  c1 https://data.cms.gov/sites/default/files/2024-10/9dc1f6a0-4339-4 ...\n```\n\n\n:::\n\n```{.r .cell-code}\nreassign_csv <- read_csv_arrow(\n  file = reassign_url$url, \n  as_data_frame = TRUE) |> \n  to_duckdb()\n\nreassign_csv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# Source:   table<arrow_003> [?? x 2]\n# Database: DuckDB v1.1.3 [Andrew@Windows 10 x64:R 4.4.2/:memory:]\n   REASGN_BNFT_ENRLMT_ID RCV_BNFT_ENRLMT_ID\n   <chr>                 <chr>             \n 1 I20031103000001       O20031216000213   \n 2 I20031103000001       O20111004000177   \n 3 I20031103000007       O20040308000883   \n 4 I20031103000007       O20051206000046   \n 5 I20031103000014       O20070303000050   \n 6 I20031103000014       O20221026001638   \n 7 I20031103000020       O20190812002967   \n 8 I20031103000033       O20181107003537   \n 9 I20031103000033       O20181204002777   \n10 I20031103000037       O20051216000183   \n# ℹ more rows\n```\n\n\n:::\n:::\n\n-------------------------------------------------------------------------------\n\n## Schema\n\n```r\n[data.json]\n |--@context\n |--@id\n |--@type\n |--conformsTo\n |--describedBy\n |--[dataset]\n     |--@type\n     |--accessLevel\n     |--accrualPeriodicity\n     |--bureauCode\n     |--[contactPoint]\n          |--@type\n          |--fn\n          |--hasEmail\n     |--describedBy\n     |--dataQuality\n     |--description\n     |--identifier\n     |--[keyword]\n     |--landingPage\n     |--language\n     |--license\n     |--modified\n     |--programCode\n     |--[publisher]\n          |--@type\n          |--name\n     |--references\n     |--temporal\n     |--theme\n     |--title\n     |--describedByType\n     |--[distribution]\n         |--@type\n         |--format\n         |--accessURL\n         |--resourcesAPI\n         |--description\n         |--title\n         |--modified\n         |--temporal\n         |--downloadURL\n         |--mediaType\n```\n",
    "supporting": [
      "api_faq_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}