{
  "hash": "93e5626da5f4deeda247761e4111c4fe",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"NDF\"\neditor_options: \n   chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n## National Downloadable File\n\n>   **Previous Work**\n>\n>   * [provider #60 - version 1](https://github.com/andrewallenbruce/provider/issues/60#issue-2000723817)\n>   * [provider #60 - version 2](https://github.com/andrewallenbruce/provider/issues/60#issuecomment-1820270391)\n\n\n   * [Centers for Medicare & Medicaid Services Data API](https://data.cms.gov/api-docs)\n   * [API FAQ for data.CMS.gov | OCTOBER 2024 - VERSION 1.6](https://data.cms.gov/sites/default/files/2024-10/7ef65521-65a4-41ed-b600-3a0011f8ec4b/API%20Guide%20Formatted%201_6.pdf)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhttr2::url_parse(\"https://data.cms.gov/provider-data/api/1/datastore/query/\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n<httr2_url> https://data.cms.gov/provider-data/api/1/datastore/query/\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• scheme: https\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• hostname: data.cms.gov\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• path: /provider-data/api/1/datastore/query/\n```\n\n\n:::\n\n```{.r .cell-code}\n# distro \n\nunclass(httr2::url_parse(\"?limit=1&offset=100&count=true&results=true&schema=true&keys=true&format=json&rowIds=true\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$scheme\nNULL\n\n$hostname\nNULL\n\n$username\nNULL\n\n$password\nNULL\n\n$port\nNULL\n\n$path\nNULL\n\n$query\n$query$limit\n[1] \"1\"\n\n$query$offset\n[1] \"100\"\n\n$query$count\n[1] \"true\"\n\n$query$results\n[1] \"true\"\n\n$query$schema\n[1] \"true\"\n\n$query$keys\n[1] \"true\"\n\n$query$format\n[1] \"json\"\n\n$query$rowIds\n[1] \"true\"\n\n\n$fragment\nNULL\n```\n\n\n:::\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfname = \"affiliations\"\n\nndf_identifier <- \\(x) {\n  kit::nswitch(\n    x,\n    \"affiliations\", \"27ea-46a8\",\n    \"clinicians\", \"mj5m-pzi6\",\n    default = NA_character_,\n    nThread = 4L\n  )\n}\n\nurl_ndf <- httr2::url_parse(\"https://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items/\")\n\nurl_tmp <- url_ndf |> \n  httr2::url_build() |> \n  httr2::request()\n\nhttr2::req_template(url_tmp, \"/{fname}?show-reference-ids=true\", fname = ndf_identifier(fname))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n<httr2_request>\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nGET\nhttps://data.cms.gov/provider-data/api/1/metastore/schemas/dataset/items/27ea-46a8?show-reference-ids=true\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nBody: empty\n```\n\n\n:::\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nurl_ndf |> \n  httr2::url_build() |> \n  httr2::request() |> \n  httr2::req_url_path_append(\n    ndf_identifier(fname)\n    ) |> \n  httr2::req_url_path_append(\"?show-reference-ids=true\") |>\n  httr2::req_perform() |>\n  httr2::resp_body_json(check_type = FALSE, simplifyVector = TRUE)\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmeta_ndf <- \\(fname) {\n  \n  stopifnot(curl::has_internet())\n  \n  x <- request(\n    paste0(\n      \"https://data.cms.gov/\",\n      \"provider-data/api/1/\",\n      \"metastore/schemas/\",\n      \"dataset/items/\",\n      switch(fname, \n             affiliations = \"27ea-46a8\", \n             clinicians   = \"mj5m-pzi6\", \n             stop(\"Invalid argument\")),\n    \"?show-reference-ids=true\")) |>\n       req_perform() |>\n       resp_body_json(\n         check_type     = FALSE,\n         simplifyVector = TRUE)\n  \n  distro <- gelm(gelm(x, \"distribution\"), \"identifier\")\n  \n  y <- request(\n    paste0(\n    \"https://data.cms.gov/\", \n    \"provider-data/api/1/\",\n    \"datastore/query/\", \n    distro, \n    \"?limit=1&offset=100&\",\n    \"count=true&results=true&\", \n    \"schema=true&keys=true&\",\n    \"format=json&rowIds=true\")) |>\n       req_perform() |>\n       resp_body_json(\n         check_type = FALSE,\n         simplifyVector = TRUE)\n  \n  z <- gelm(gelm(gelm(y, \"schema\"), distro), \"fields\")\n  \n  list(\n    title        = gelm(x, \"title\"),\n    description  = gelm(x, \"description\"),\n    identifier   = gelm(gelm(x, \"identifier\"), \"identifier\"),\n    distribution = distro,\n    issued       = gelm(x, \"issued\"), \n    modified     = gelm(x, \"modified\")[[1]], \n    released     = gelm(x, \"released\"),\n    dimensions   = paste0(gelm(gelm(y, \"count\"), is.numeric), \" x \", gelm(gelm(z, \"record_number\"), \"length\")), \n    fields       = names(z),\n    site         = gelm(x, \"landingPage\"),\n    csv          = gelm(gelm(gelm(x, \"distribution\"), \"data\"), \"downloadURL\", m = \"df\"),\n    dictionary   = paste0(\"https://data.cms.gov/provider-data/sites/default/files/data_dictionaries/physician/DOC_Data_Dictionary.pdf\"))\n}\n```\n:::\n\n### Field Comparison\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\naff <- provider::affiliations(npi = 1558595660, na.rm = FALSE, tidy = FALSE)\ncat(utils::formatOL(meta_ndf(\"affiliations\")$fields, offset = 0), sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n 1. record_number\n 2. npi\n 3. ind_pac_id\n 4. provider_last_name\n 5. provider_first_name\n 6. provider_middle_name\n 7. suff\n 8. facility_type\n 9. facility_affiliations_certification_number\n10. facility_type_certification_number\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(utils::formatOL(names(aff), offset = 0), sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n 1. record_number\n 2. npi\n 3. ind_pac_id\n 4. provider_last_name\n 5. provider_first_name\n 6. provider_middle_name\n 7. suff\n 8. facility_type\n 9. facility_affiliations_certification_number\n10. facility_type_certification_number\n```\n\n\n:::\n:::\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\ncln <- provider::clinicians(npi = 1558595660, na.rm = FALSE, tidy = FALSE)\ncat(utils::formatOL(meta_ndf(\"clinicians\")$fields), sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n 1. record_number\n 2. npi\n 3. ind_pac_id\n 4. ind_enrl_id\n 5. provider_last_name\n 6. provider_first_name\n 7. provider_middle_name\n 8. suff\n 9. gndr\n10. cred\n11. med_sch\n12. grd_yr\n13. pri_spec\n14. sec_spec_1\n15. sec_spec_2\n16. sec_spec_3\n17. sec_spec_4\n18. sec_spec_all\n19. telehlth\n20. facility_name\n21. org_pac_id\n22. num_org_mem\n23. adr_ln_1\n24. adr_ln_2\n25. ln_2_sprs\n26. citytown\n27. state\n28. zip_code\n29. telephone_number\n30. ind_assgn\n31. grp_assgn\n32. adrs_id\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(utils::formatOL(names(cln), offset = 1), sep = \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  1. record_number\n  2. npi\n  3. ind_pac_id\n  4. ind_enrl_id\n  5. provider_last_name\n  6. provider_first_name\n  7. provider_middle_name\n  8. suff\n  9. gndr\n 10. cred\n 11. med_sch\n 12. grd_yr\n 13. pri_spec\n 14. sec_spec_1\n 15. sec_spec_2\n 16. sec_spec_3\n 17. sec_spec_4\n 18. sec_spec_all\n 19. telehlth\n 20. facility_name\n 21. org_pac_id\n 22. num_org_mem\n 23. adr_ln_1\n 24. adr_ln_2\n 25. ln_2_sprs\n 26. citytown\n 27. state\n 28. zip_code\n 29. telephone_number\n 30. ind_assgn\n 31. grp_assgn\n 32. adrs_id\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}