---
title: "Open Payments API"
editor_options: 
   chunk_output_type: console
---
```{r}
#| label: setup-common-01
#| include: false
source("includes/_common.R")

# "[^\\x00-\\x7F]"
```

## Dataset

   * `publisher`: `"openpaymentsdata.cms.gov"`
   * `bureauCode`: `"009:38"`
   * `programCode`: `"009:000"`
   * `accessLevel`: `"public"`
   * limit = `500`

## Load Catalog

```{r}
#| label: open_downloadurl
open_downloadurl <- function(x) {
  
  add_vars(x, downloadURL = delist(get_elem(
    get_elem(x$distribution, "data", DF.as.list = TRUE),
    "downloadURL"
  )))
}
```

```{r}
#| label: open_identifier_url
open_identifier_url <- function(x) {
  
  paste0(
    "https://openpaymentsdata.cms.gov/",
    "api/1/datastore/query/", 
    x, 
    "/0")
}
```

```{r}
#| label: catalog_open_payments
catalog_open_payments <- \() {
  
  dataset <- as_tbl(
  mtt(
    fload("https://openpaymentsdata.cms.gov/api/1/metastore/schemas/dataset/items?show-reference-ids"), 
    modified    = as_date(modified), 
    description = replace_fixed(description, c("\n", "\r. \r.", '"'), c(". ", "", "")),
    theme       = delist(map(theme, function(x) get_elem(as.list(x), "data"))), 
    year        = delist(map(keyword, function(x) get_elem(as.list(x), "data"))), 
    year        = replace_fixed(year, c("all years"), c("All")),
    year        = cheapr_if_else(title == "Provider profile ID mapping table", "All", year)))
  
  x <- slt(
    open_downloadurl(dataset),
    year,
    theme,
    title,
    description,
    modified,
    temporal,
    identifier,
    downloadURL
  ) |>
    rsplit( ~ theme)
  
  list(
    summary_all  = sbt(x$Summary, year == "All", -year) |>
      mtt(title = tools::toTitleCase(title)) |>
      roworder(title),
    summary_year = sbt(x$Summary, year != "All") |>
      mtt(
        year = as_int(year),
        title = stri_replace_all_regex(title, "^[0-9]{4} ", ""),
        title = tools::toTitleCase(title)
      ) |>
      roworder(title, -year),
    general = mtt(
      x$`General Payments`, 
      year = as_int(year), 
      title = "General Payment Data",
      description = "All general (non-research, non-ownership related) payments from the program year"),
    research = mtt(
      x$`Research Payments`,
      year = as_int(year),
      title = "Research Payment Data",
      description = "All research-related payments from the program year"
    ),
    ownership = mtt(
      x$`Ownership Payments`,
      year = as_int(year),
      title = "Ownership Payment Data",
      description = "All ownership and investment payments from the program year"
    )
  )
}

openpay <- catalog_open_payments()

openpay
```

### Summary Group

```{r}
openpay$summary_all |> 
  print(n = Inf)
```

```{r}
openpay$summary_year |> 
  rsplit(~ title)
```

## Dictionaries

```{r}
#| label: open_dictionary
open_dictionary <- function() {
  
  x <- map(
    get_elem(
      get_elem(
        as_tbl(
          fload(
            paste0(
              "https://openpaymentsdata.cms.gov/",
              "api/1/metastore/schemas/dataset/",
              "items?show-reference-ids"
              ))), 
        "data", 
        DF.as.list = TRUE),
      "title|describedBy",
      regex = TRUE), 
    function(x) x[not_null(names(x))]
    )
  
  x <- new_df(
    name = delist(get_elem(x, "title")),
    dictionary = delist(get_elem(x, "describedBy"))) |>
    mtt(
      year = as_int(stri_extract_all_regex(name, "[0-9]{4}")),
      name = cheapr_if_else(
        na(year),
        name,
        stri_extract_all_regex(
          name, 
          "^.*(?=\\s.\\sDetailed Dataset [0-9]{4} Reporting Year)"
          )),
      year = cheapr_if_else(
        na(year), 
        fmax(year), 
        year
        )) |>
    sbt(year == fmax(year), -year)
  
  x <- x[["dictionary"]] |> 
    map(request) |> 
    req_perform_parallel(on_error = "continue") |> 
    resps_successes() |> 
    resps_data(\(resp) resp_body_string(resp)) |> 
    fparse(query = "/data")
  
  funique(
    new_tbl(
      field = delist(
        map(
          get_elem(x, "fields"), 
          function(x) 
            get_elem(x, "name")
          )),
      description = delist(
        map(
          get_elem(x, "fields"), 
          function(x) 
            get_elem(x, "description"))
        ) |> replace_fixed(c("\n", '"'), c(" ", ""))), 
    cols = "field", 
    sort = TRUE)
}

open_dictionary() |> 
  print(n = Inf)
```
