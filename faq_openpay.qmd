---
title: "Open Payments API"
editor_options: 
   chunk_output_type: console
---
```{r}
#| label: setup-common-01
#| include: false
source("includes/_common.R")
```

## Dataset

   * `publisher`: `"openpaymentsdata.cms.gov"`
   * `bureauCode`: `"009:38"`
   * `programCode`: `"009:000"`
   * `accessLevel`: `"public"`
   * limit = `500`

```{r}
#| label: open_dataset
open_dataset <-  fastplyr::as_tbl(
  fload("https://openpaymentsdata.cms.gov/api/1/metastore/schemas/dataset/items?show-reference-ids") |>
    mtt(issued          = as_date(issued),
        modified        = as_date(modified),
        description     = sf_remove(description, "\n"),
        theme           = delist(map(theme, \(x) gelm(as.list(x), "data"))),
        year            = delist(map(keyword, \(x) gelm(as.list(x), "data"))),
        identifier_year = delist(map(keyword, \(x) gelm(as.list(x), "identifier"))),
        identifier_dist = delist(map(distribution, \(x) gelm(as.list(x), "identifier"))),
        # distribution = delist(map(distribution, \(x) gelm(as.list(x), "data"))),
        modified_dttm   = as_datetime(`%modified`))) |> 
  fastplyr::f_select(
    theme,
    year,
    title,
    contactPoint,
    description,
    distribution,
    temporal,
    identifier,
    identifier_year,
    issued,
    modified,
    modified_dttm,
    publisher)

tmp <- open_dataset$distribution[[1]][["data"]]

tmp[[1]] |> dplyr::glimpse()

tmp[[1]][["%Ref:downloadURL"]]

# set_names(open_dataset$distribution[[1]], names(open_dataset$distribution[[1]]))
# 
# unlist(open_dataset$distribution, use.names = FALSE)
```

```{r}
#| eval: false
c(
  "title",
  "mediaType",
  "format",
  "downloadURL",
  "describedBy",
  "describedByType",
  "Ref_identifier",
  "Ref_data"
)
```



```{r}
#| eval: false
map(open_dataset$distribution, function(x) delist(x[[seq_along(x)]][["data"]])) |> 
  collapse::rowbind()

fastplyr::as_tbl(open_dataset$distribution[[1]][[1]])

fastplyr::as_tbl(purrr::list_flatten(open_dataset$distribution))

purrr::list_transpose(open_dataset$distribution) |> purrr::list_flatten()

pluck(open_dataset$distribution, 1, 1)
lmap(open_dataset$distribution, 1)
```


```{r}
distro_data <- open_dataset |> 
  unnest(distribution, names_sep = "_") |> 
  unnest_wider(distribution_data, names_sep = "_") |> 
  unnest_wider(`distribution_data_%Ref:downloadURL`, names_sep = "_") |>
  unnest_wider(`distribution_data_%Ref:downloadURL_data`, names_sep = "_") |>
  unnest_wider(`distribution_data_%Ref:downloadURL_data_1`, names_sep = "_") |>
  select(contains("distribution"))

distro_data
```

```{r}
#| label: open_data
#| eval: false
open_data <- request(
  "https://openpaymentsdata.cms.gov/api/1/metastore/schemas/dataset/items?show-reference-ids"
  ) |>
  req_perform() |>
  resp_body_json(simplifyVector = TRUE) |> 
  tibble()

open_data |> 
  unnest_wider(keyword, names_sep = "_") |>
  unnest_wider(theme, names_sep = "_") |>
  unnest_wider(contactPoint, names_sep = "_") |>
  unnest_wider(publisher, names_sep = "_") |> 
  unnest_wider(publisher_data, names_sep = "_") |> 
  unnest_wider(distribution, names_sep = "_") |> 
  unnest_wider(distribution_data, names_sep = "_") |> 
  unnest_wider(`distribution_data_%Ref:downloadURL`, names_sep = "_") |> 
  unnest_wider(`distribution_data_%Ref:downloadURL_1`, names_sep = "_") |> 
  unnest_wider(`distribution_data_%Ref:downloadURL_1_data`, names_sep = "_") |> 
  mutate(
    description        = replace_open_desc(description),
    bureauCode         = delist(bureauCode),
    programCode        = delist(programCode)) |>
  rename_with(remove_at_symbol) |> 
  rename(modified_dttm = `%modified`) |> 
  remove_all_na()

open_data |> 
  purse()
```


```{r}
#| eval: false
open_ids <- function(search) {

  url <- paste0('https://openpaymentsdata.cms.gov/',
                'api/1/metastore/schemas/dataset/',
                'items?show-reference-ids')

  response <- httr2::request(url) |>
    httr2::req_perform()

  results <- dplyr::tibble(
    httr2::resp_body_json(response,
                          check_type = FALSE, simplifyVector = TRUE)) |>
    dplyr::select(title, modified, distribution) |>
    tidyr::unnest(cols = distribution) |>
    tidyr::unnest(cols = data, names_sep = ".") |>
    dplyr::filter(stringr::str_detect(title, {{ search }})) |>
    dplyr::arrange(dplyr::desc(title)) |>
    dplyr::mutate(year = strex::str_before_first(title, " "),
                  set  = strex::str_after_first(title, " "), .before = 1,
                  year = as.integer(year)) |>
    dplyr::select(year, set, identifier)

  return(results)
}
```

## New Function

```{r}
fields <- c(
  "year",
  "covered_recipient_npi",                                         
  "covered_recipient_type",                                        
  "covered_recipient_first_name",                                  
  "covered_recipient_last_name",                                   
  "recipient_city",                                                
  "recipient_state",                                               
  "recipient_zip_code",                                            
  "teaching_hospital_name",                                        
  "form_of_payment_or_transfer_of_value",                          
  "nature_of_payment_or_transfer_of_value",                        
  "applicable_manufacturer_or_applicable_gpo_making_payment_name",
  "applicable_manufacturer_or_applicable_gpo_making_payment_id")

process_params <- \(arg_names, field_names) {
  
  nms <- set_names(arg_names, field_names)
  
  parse_expr(
    paste0(
      "list2(", 
      glue_collapse(
        glue('{names(nms)} = {unname(nms)}'), 
        sep = ", "), ")"))
}

has_operator <- \(args) {
  map_lgl(args, function(x) inherits(x, "query_operator"))
}

name_path <- \(args) {
  map(args, \(x) x[[names(x)]][["path"]] <- names(x))
}
```


```{r}
open_pay <- function(year,
                     npi               = NULL,
                     covered_type      = NULL,
                     first             = NULL,
                     last              = NULL,
                     city              = NULL,
                     state             = NULL,
                     zip               = NULL,
                     teaching_hospital = NULL,
                     payment_form      = NULL,
                     payment_nature    = NULL,
                     payer             = NULL,
                     payer_id          = NULL) {
  
  fn_args <- process_params(fn_fmls_names(), fields) |> 
    eval_bare() |> 
    compact()
  
  # if (any(has_operator(fn_args))) fn_args[has_operator(fn_args)] <- name_path(fn_args[has_operator(fn_args)])
  
  fn_args
}
```

```{r}
open_pay(year = 2021, npi = "1043218118")
open_pay(year = 2021, payment_nature = "Royalty or License")
open_pay(year = 2021, payment_form = "Stock option")
open_pay(year = 2021, payer = "Adaptive Biotechnologies Corporation")
open_pay(year = 2021, teaching_hospital = "Nyu Langone Hospitals")
open_pay(year = 2017:2023, npi = "1043477615")
```

```{r}
starts_with <- \(x) {
  structure(
    c(path      = NA_character_,
      operator  = "STARTS_WITH",
      value     = x),
    class = "query_operator")
}

starts_with("Royalty or License")

x <- open_pay(
  year = 2021, 
  payment_nature = starts_with("Royalty or License"), 
  teaching_hospital = starts_with("NYU"))

x

names(x[has_operator(x)])

x[has_operator(x)][[1]][["path"]] <- names(x[has_operator(x)])[[1]]

x

# map(args, \(x) x[[names(x)]][["path"]] <- names(x))
# 
# x[has_operator(x)] <- providertwo:::map2(
#   x[has_operator(x)], 
#   names(x[has_operator(x)]), 
#   function(x, y) x[["path"]] <- y)
# 
# x
```


## Query Format

```{r}
url_parse(
  base_url = "https://openpaymentsdata.cms.gov/api/1/datastore/", 
  url      = "query/fdc3c773-018a-412c-8a81-d7b8a13a037b/0") |> 
  url_modify_query(
    `conditions[0][property]` = "covered_recipient_first_name",
    `conditions[0][value]`    = "PATRICK",
    `conditions[0][operator]` = "=",
    `conditions[1][property]` = "covered_recipient_last_name",
    `conditions[1][value]`    = "WARD",
    `conditions[1][operator]` = "=",
    schema                    = "false",
    keys                      = "false",
    results                   = "false",
    offset                    = 0) |>
  url_build() |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)
```

