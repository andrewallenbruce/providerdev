---
title: "Open Payments API"
editor_options: 
   chunk_output_type: console
---
```{r}
#| label: setup-common-01
#| include: false
source("includes/_common.R")
```

## Dataset

   * `publisher`: `"openpaymentsdata.cms.gov"`
   * `bureauCode`: `"009:38"`
   * `programCode`: `"009:000"`
   * `accessLevel`: `"public"`

```{r}
#| label: open_dataset
open_dataset <- qTBL(
  fload("https://openpaymentsdata.cms.gov/api/1/metastore/schemas/dataset/items?show-reference-ids"), 
  keep.attr = TRUE) |>
    mtt(issued             = as_date(issued),
        modified           = as_date(modified),
        accrualPeriodicity = recode_iso8601(accrualPeriodicity),
        description        = sf_remove(description, "\n"),
        bureauCode         = delist(bureauCode),
        programCode        = delist(programCode),
        theme              = delist(map(theme, \(x) gelm(as.list(x), "data"))),
        year               = delist(map(keyword, \(x) gelm(as.list(x), "data"))),
        # `%modified`        = as_date(`%modified`, fmt = "%Y-%m-%dT%H:%M:%Ez")
        `%modified`        = clock::date_time_parse_RFC_3339(`%modified`, offset = "%Ez")
        ) |> 
  slt(year,
      title,
      description,
      theme,
      issued,
      modified,
      modified_dttm = `%modified`,
      temporal,
      accrualPeriodicity,
      distribution)

open_dataset
```


```{r}
# identifiers <- uniq(qTBL(rowbind(gelm(open_dataset, "keyword"))))
```


```{r}
identifier <- qTBL(rowbind(gelm(open_dataset, "distribution"), fill = TRUE), keep.attr = TRUE)

identifier
```


```{r}
distribution <- qTBL(rowbind(gelm(identifier, "data"), fill = TRUE), keep.attr = TRUE) |> 
  slt(-`@type`)

distribution |> 
  select(`%Ref:downloadURL`) |> 
  unnest_wider(`%Ref:downloadURL`, names_sep = "_") |> 
  head()
```

```{r}
# qTBL(distribution[["%Ref:downloadURL"]])
# qTBL(rowbind(, fill = TRUE), keep.attr = TRUE)
```

```{r}
#| label: open_data
open_data <- request(
  "https://openpaymentsdata.cms.gov/api/1/metastore/schemas/dataset/items?show-reference-ids"
  ) |>
  req_perform() |>
  resp_body_json(simplifyVector = TRUE) |> 
  tibble()

open_data |> 
  unnest_wider(keyword, names_sep = "_") |>
  unnest_wider(theme, names_sep = "_") |>
  unnest_wider(contactPoint, names_sep = "_") |>
  unnest_wider(publisher, names_sep = "_") |> 
  unnest_wider(publisher_data, names_sep = "_") |> 
  unnest_wider(distribution, names_sep = "_") |> 
  unnest_wider(distribution_data, names_sep = "_") |> 
  unnest_wider(`distribution_data_%Ref:downloadURL`, names_sep = "_") |> 
  unnest_wider(`distribution_data_%Ref:downloadURL_1`, names_sep = "_") |> 
  unnest_wider(`distribution_data_%Ref:downloadURL_1_data`, names_sep = "_") |> 
  mutate(
    description        = replace_open_desc(description),
    bureauCode         = delist(bureauCode),
    programCode        = delist(programCode)) |>
  rename_with(remove_at_symbol) |> 
  rename(modified_dttm = `%modified`) |> 
  remove_all_na()

open_data |> 
  purse()
```


```{r}
#| eval: false
open_ids <- function(search) {

  url <- paste0('https://openpaymentsdata.cms.gov/',
                'api/1/metastore/schemas/dataset/',
                'items?show-reference-ids')

  response <- httr2::request(url) |>
    httr2::req_perform()

  results <- dplyr::tibble(
    httr2::resp_body_json(response,
                          check_type = FALSE, simplifyVector = TRUE)) |>
    dplyr::select(title, modified, distribution) |>
    tidyr::unnest(cols = distribution) |>
    tidyr::unnest(cols = data, names_sep = ".") |>
    dplyr::filter(stringr::str_detect(title, {{ search }})) |>
    dplyr::arrange(dplyr::desc(title)) |>
    dplyr::mutate(year = strex::str_before_first(title, " "),
                  set  = strex::str_after_first(title, " "), .before = 1,
                  year = as.integer(year)) |>
    dplyr::select(year, set, identifier)

  return(results)
}
```

## New Function

```{r}
open_pay <- function(year,
                     npi               = NULL,
                     covered_type      = NULL,
                     first             = NULL,
                     last              = NULL,
                     city              = NULL,
                     state             = NULL,
                     zip               = NULL,
                     teaching_hospital = NULL,
                     payer             = NULL,
                     payer_id          = NULL,
                     pay_form          = NULL,
                     pay_nature        = NULL) {

  arg_names <- set_names(
    fn_fmls_names(),
      c("year",
        "covered_recipient_npi",                                         
        "covered_recipient_type",                                        
        "covered_recipient_first_name",                                  
        "covered_recipient_last_name",                                   
        "recipient_city",                                                
        "recipient_state",                                               
        "recipient_zip_code",                                            
        "teaching_hospital_name",                                        
        "form_of_payment_or_transfer_of_value",                          
        "nature_of_payment_or_transfer_of_value",                        
        "applicable_manufacturer_or_applicable_gpo_making_payment_name",
        "applicable_manufacturer_or_applicable_gpo_making_payment_id")
      )
  
  paste0(
    "list2(", 
    glue_collapse(
      glue('{names(arg_names)} = {unname(arg_names)}'), sep = ", "), ")") |> 
  parse_expr() |> 
  eval_bare() |> 
    compact()
  
  # list2(
  #   "year"                                                          = year,
  #   "covered_recipient_npi"                                         = npi,
  #   "covered_recipient_type"                                        = covered_type,
  #   "covered_recipient_first_name"                                  = first,
  #   "covered_recipient_last_name"                                   = last,
  #   "recipient_city"                                                = city,
  #   "recipient_state"                                               = state,
  #   "recipient_zip_code"                                            = zip,
  #   "teaching_hospital_name"                                        = teaching_hospital,
  #   "form_of_payment_or_transfer_of_value"                          = pay_form,
  #   "nature_of_payment_or_transfer_of_value"                        = pay_nature,
  #   "applicable_manufacturer_or_applicable_gpo_making_payment_name" = payer,
  #   "applicable_manufacturer_or_applicable_gpo_making_payment_id"   = payer_id) |> 
  #   compact()
  
}
```


```{r}
open_pay(year = 2021, npi = "1043218118")
open_pay(year = 2021, pay_nature = "Royalty or License")
open_pay(year = 2021, pay_form = "Stock option")
open_pay(year = 2021, payer = "Adaptive Biotechnologies Corporation")
open_pay(year = 2021, teaching_hospital = "Nyu Langone Hospitals")
open_pay(year = 2017:2023, npi = "1043477615")
```

