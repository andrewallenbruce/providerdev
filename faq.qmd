---
title: "API FAQ"
editor_options: 
   chunk_output_type: console
---

```{r setup}
#| echo: false
#| message: false
#| warning: false
knitr::opts_chunk$set(
  dev        = "ragg_png",
  dpi        = 320,
  out.width  = "100%",
  fig.width  = 8,
  fig.asp    = 0.818,
  fig.retina = 2,
  fig.align  = "center",
  fig.show   = "hold"
)
options(scipen = 999, digits = 3)

source("_common.R")

htmltools::tagList(
  btn_link("https://data.cms.gov/api-docs", "CMS API Docs"),
  btn_link("https://data.cms.gov/sites/default/files/2024-10/7ef65521-65a4-41ed-b600-3a0011f8ec4b/API%20Guide%20Formatted%201_6.pdf", 
           "API FAQ")
  )

library(tidyverse)
library(provider)
library(fuimus)
library(httr2)
library(arrow)
# library(gt)
```


Working through the updated [API FAQ](https://data.cms.gov/sites/default/files/2024-10/7ef65521-65a4-41ed-b600-3a0011f8ec4b/API%20Guide%20Formatted%201_6.pdf) *(Oct 2024 - v1.6)*  for [data.CMS.gov](https://data.cms.gov/api-docs), extracting the relevant information

## What's new

Resources, which are supplemental documents to the main dataset, are now available for programmatic download in the API. Through our Public API Open Data Catalog, you can find direct download links for resources such as sub-files, tables, supplementary data, reports, and documentation.  The new endpoints can be accessed using the 'resourcesAPI' field. For more details on the data catalog and code examples, download our API FAQ document.

## API integrations

Our API responses are in a JSON format. To integrate your endpoint requests with the data.cms.gov Public API, follow these steps:

   1. Find your Dataset & its Unique Identifier: [Search for your dataset](https://data.cms.gov/search) and visit its 'overview' page. Click on ‘Access API’ and then on the ‘API Docs for the Dataset’ link.
   2. Integrate your Dataset Endpoint Paths
      * Dataset API endpoints have this structure: `data.cms.gov/data-api/v1/dataset/{{dataset_id}}/data` 
      * Use this URL with your dataset ID obtained from Step 1.
      * Example: `https://data.cms.gov/data-api/v1/dataset/2457ea29-fc82-48b0-86ec-3b0755de7515/data`
   3. Integrate your API Endpoint Requests
      * The system uses the JSONAPI query syntax.
      * The simplest, most common filter is a key-value filter: `?filter[field_name]=value&filter[field_other]=value`
      * Examples
         * Exact match search on 1 column: 
            * To filter Medicare Fee-For-Service Public Provider Enrollment Dataset, by column PROVIDER_TYPE_DESC, use the following request: `data.cms.gov/data-api/v1/dataset/2457ea29-fc82-48b0-86ec-3b0755de7515/data?filter[PROVIDER_TYPE_DESC]=PRACTITIONER%20-%20GENERAL%20PRACTICE`
         * Contains search on 1 column:
            * To filter the ‘Medicare Fee-For-Service Public Provider Enrollment’ Dataset and find all rows that contain ‘SUPPLIER’ in the ‘PROVIDER_TYPE_DESC’ column, the request is: `data.cms.gov/data-api/v1/dataset/2457ea29-fc82-48b0-86ec-3b0755de7515/data?filter[example][condition][path]=PROVIDER_TYPE_DESC&filter[example][condition][operator]=CONTAINS&filter[example][condition][value]=SUPPLIER`
          * Combination search on 2 columns:
             * To filter the ‘Medicare Fee-For-Service Public Provider Enrollment’ Dataset and find all rows that contain ‘PRACTITIONER’ in the ‘PROVIDER_TYPE_DESC’ column where the 'STATE_CD' is 'MD', the request is: `data.cms.gov/data-api/v1/dataset/2457ea29-fc82-48b0-86ec-3b0755de7515/data?filter[filter-1][condition][path]=PROVIDER_TYPE_DESC&filter[filter-1][condition][operator]=CONTAINS&filter[filter-1][condition][value]=PRACTITIONER&filter[filter-2][condition][path]=STATE_CD&filter[filter-2][condition][operator]==&filter[filter-2][condition][value]=MD`
    4. Integrate your API Endpoint Requests to support paging
       * API Responses are paged and support a max page size of 5000 rows. Use the size & offset query parameters to page through the data, as shown below:
          * 1st example: this request returns the first 50 rows of a dataset: `data.cms.gov/data-api/v1/dataset/2457ea29-fc82-48b0-86ec-3b0755de7515/data?size=50&offset=0`
          * 2nd example: this request returns the next 50 rows (51 - 100): data.cms.gov/data-api/v1/dataset/2457ea29-fc82-48b0-86ec-3b0755de7515/data?size=50&offset=50                                       


[Refer to the Drupal documentation](https://www.drupal.org/docs/core-modules-and-themes/core-modules/jsonapi-module/filtering) for more information on filtering API requests.
 
## Additional information

The Application Programming Interface (API) offers access to the Centers for Medicare & Medicaid Services public data allowing you to interactively analyze our datasets in real-time. Our APIs are organized around REST and have predictable resource-oriented URLs, accept form-encoded requests and returns JSON & JSON:API encoded responses and uses standard HTTP response codes.



--------------------------------------------------------------------------------

# Accessing the Data Catalog

The [`data.json`](https://data.cms.gov/data.json) file is an [**Open Data**](https://resources.data.gov/resources/dcat-us/) catalog containing all available datasets. As new data is added, `data.json` is automatically updated.


```{r}
#| label: data_json
data_json <- read_json_arrow(
  file = "https://data.cms.gov/data.json",
  col_select = c("dataset"),
    as_data_frame = TRUE) |> 
  to_duckdb()

data_json |> glimpse()
```


> **Note:** Removing `col_select = c("dataset")` from the above call returns the following metadata:


```{r}
#| label: col_select_remove
#| echo: false
c("@context    <chr> https://project-open-data.cio.gov/v1.1/schema/catalog.jsonld", 
  "@id         <chr> https://data.cms.gov/data.json", 
  "@type       <chr> dcat:Catalog", 
  "conformsTo  <chr> https://project-open-data.cio.gov/v1.1/schema", 
  "describedBy <chr> https://project-open-data.cio.gov/v1.1/schema/catalog.json", 
  "dataset     <list> [<data.frame[138 x 22]>]") |> 
  cat(sep = "\n")
```


Within `data.json`, there is an array called `dataset`. One can search through this array using the dataset's `title`, such as `"Payroll Based Journal Daily Nurse Staffing"`:


```{r}
#| label: dataset_title
data_json |> 
  pull(dataset) |> 
  pluck(1) |> 
  filter(
    grepl(
      "Payroll Based Journal Daily Nurse Staffing", 
      title)) |> 
  glimpse()
```


Within `dataset`, there is an array called `distribution` which contains all dataset versions, in all available formats:


```{r}
#| label: distribution
distribution <- data_json |> 
  pull(dataset) |> 
  pluck(1) |> 
  select(distribution) |> 
  unnest(distribution)

distribution

fuimus::describe2(distribution[c(-7)])
```

## Formats

   * __description__ `"latest"` is a URL that always point to the latest data
   * __mediaType__ `"text/csv"` is a downloadable CSV file
   * __mediaType__ `"application/zip"` is a downloadable ZIP file
   * __format__ `"API"` is an API endpoint
   * Remaining entries provide references to the data at fixed points in time, listed in descending order by date.

```{r}
distribution |> 
  count(description, 
        format, 
        mediaType)
```


For example, the URL in the following example will *always* point to the **Payroll Based Journal Daily Nurse Staffing** data from **Q2 2021**:

```{r}
#| label: staffing
# "https://data.cms.gov/data-api/v1/dataset/d10d792e-ea6e-4145-8512-34efbc1be04b/data"
staffing <- distribution |> 
  filter(
    grepl("Payroll Based Journal Daily Nurse Staffing", title),
    format == "API",
    grepl("^2021-04", temporal)) |> 
  pull(accessURL) |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)

glimpse(head(staffing, 1))
```

## Temporal Data

Datasets with multiple historical versions available will have a `temporal` field in the `distribution` array of the `data.json` file which will indicate the time period.

**Format**: `yyyy-mm-dd/yyyy-mm-dd`

The following example finds the API link for the [2017 Medicare Inpatient Hospitals - by Provider and Service Data](https://data.cms.gov/provider-summary-by-type-of-service/medicare-inpatienthospitals/medicare-inpatient-hospitals-by-provider-and-service):


```{r}
#| label: temporal_data
distribution |> 
  filter(
    grepl("Medicare Inpatient Hospitals - by Provider and Service", title), 
    format == "API",
    temporal == "2017-01-01/2017-12-31") |> 
  glimpse()
```

## Methods: Same Data, Different Output

There are two methods of accessing the latest data. 

Both result in a URL pointing to the most recent version of the dataset. This URL is canonical, i.e., will not change as new versions are added. 

For this reason, it is _recommended to **always** start with the **`data.json` object** as opposed to hardcoding any URL_.

### Method 1: Standard JSON

```r
<data_json>
    => <dataset> 
    => <distribution> 
    -> $(description == "latest")
    -> $(accessURL)
```
Use the `distribution` with the "latest" `description`. This URL returns **standard JSON**.

> For example, this URL for Opt Out Affidavits is 
> `"https://data.cms.gov/dataapi/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data"` 


```{r}
#| label: json_standard
json_standard <- distribution |> 
  filter(
    grepl("Order and Referring", title),
    description == "latest")


json_standard |> 
  glimpse()

json_standard[["accessURL"]]

json_standard[["resourcesAPI"]]
```

### Method 2: JSON:API

```r
<data_json>
    => <dataset> 
    -> $(title == "Order and Referring")
    -> $(identifier)
```

Use the URL in the `identifier` field. 

This URL returns JSON in the **JSON:API** form. It has a different response structure that includes metadata about the dataset. Otherwise it is identical to Method 1. 

> For example, this URL for Opt Out Affidavits: 
> `"https://data.cms.gov/dataapi/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data-viewer"`

The following example finds the API link for the latest [Order and Referring](https://data.cms.gov/provider-characteristics/medicare-provider-supplierenrollment/order-and-referring) Data:

```{r}
#| label: json_api
json_api <- data_json |> 
  pull(dataset) |> 
  pluck(1) |> 
  dplyr::tibble() |> 
  filter(grepl("Order and Referring", title))

json_api |> glimpse()

json_api$identifier
```

--------------------------------------------------------------------------------

# Pagination

The default is to provide the first 1,000 rows per request. However, there is an ability to increase the limit to 5,000 rows per request. You can use pagination to retrieve the entire dataset. 

For example, with our [Opt Out Affidavits]() dataset:

   1. Start with the following request to get the number of rows:

```{r}
#| label: pagination_1
request("https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data/stats") |>
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE)
```
      
   2. Make a request for the *first* 5,000 rows:
      
```{r}
#| label: pagination_2
request("https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=0") |>
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE) |> 
  dplyr::tibble()
```
      
   3. Make a request for the *next* 5,000 rows:
   
```{r}
#| label: pagination_3
request("https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=5000") |>
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE) |> 
  dplyr::tibble()
```

   4. Continue increasing the offset until you reach the count from step 1

```{r}
#| label: pagination_4
request("https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data?size=5000&offset=10000") |>
  req_perform() |> 
  resp_body_json(simplifyVector = TRUE) |> 
  dplyr::tibble()
```

## Pagination Example

Paginates through the [Opt Out Affidavits](https://data.cms.gov/provider-characteristics/medicare-provider-supplier-enrollment/opt-out-affidavits) data:

```{r}
#| label: pagination_optout
optout_n <- distribution |> 
  filter(
    grepl("Opt Out Affidavits : ", title), 
    format == "API",
    description == "latest") |> 
  str_glue_data("{accessURL}/stats") |> 
  request() |> 
  req_perform() |> 
  resp_body_json()

optout_n$total_rows / 5000

# req_perform_iterative()
```

## Find the Number of Rows

You can use the `data-viewer/stats` or `data/stats` endpoints i.e., `https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data-viewer/stats` or `https://data.cms.gov/data-api/v1/dataset/9887a515-7552-4693-bf58-735c77af46d7/data/stats`.


# Download CSV/ZIP versions

   1. Start with a request to the `data.json`. 
   2. Find the dataset within the catalog by matching the `title` with the name of the dataset.
   3. Within each dataset, there is an array called distribution which will contain all the versions of the data in all available formats for each version.
   4. The most recent release will be at the top of the distribution list, there is also a temporal field which can be used to find earlier releases.
   5. Datasets are available as either CSV or ZIP files; this will be designated in the `mediaType` field. Please review the distribution list to determine what formats are available for the dataset.
   6. The `downloadURL` will provide a direct download link for the data.

## CSV Example

```{r}
#| label: csv_download
orderrefer_url <- distribution |> 
  filter(
    grepl("Order and Referring", title), 
    mediaType == "text/csv",
    modified == max(modified)) |> 
  pull(downloadURL)
  
orderrefer_csv <- read_csv_arrow(
  file = orderrefer_url, 
  as_data_frame = TRUE) |> 
  to_duckdb()

# approx 2 million rows
orderrefer_csv
```

## ZIP Example

_CMS Summary Statistics/COVID data -> Likely not relevant to package scope_

```{r}
#| label: zip_download
# providers_url <- distribution |> 
#   filter(mediaType == "application/zip", modified == max(modified), .by = resourcesAPI) |> 
#   count(title)
```

# Additional Resources

The data.json has been updated to include a resources API that allows you to easily find the download URL for resources, which are supplemental documents to the main dataset.
1. Start with a request to the data.json. Always start with the catalog, do not hard code or try to predict the download URL. The catalog will update automatically when new data is available.
2. Find the dataset within the catalog by matching the “title” with the name of the dataset.
3. Within each dataset, there is an array called distribution which will contain all the versions of the data in all available formats for each version.
4. The most recent release will be at the top of the distribution list, there is also a “temporal” field which can be used to find earlier releases.
5. The “resourcesAPI” is a secondary API endpoint from data.json that will provide a link for the resources connected to the dataset and the download URL for the supporting documents.
6. Using the link stored in the “resourcesAPI”, limit by the “name” of the resource you want to download. The name of the resource may change between versions.
7. The “downloadURL” will provide a direct download link for the resource.

## Resource Example

Resource File Download URL Link for Latest Dataset Code Example

Finds the download link for the latest [Medicare Fee-For-Service Public Provider Enrollment Reassignment Sub-File](https://data.cms.gov/provider-characteristics/medicare-provider-supplier-enrollment/medicare-fee-for-service-public-provider-enrollment)

```{r}
#| label: add_resources
resp_resources <- distribution |> 
  filter(
  grepl("Medicare Fee-For-Service", title),
  description == "latest") |> 
  pull(resourcesAPI) |> 
  request() |> 
  req_perform() |> 
  resp_body_json(simplifyVector = FALSE) |> 
  list_flatten() |> 
  list_flatten()

reassign_url <- dplyr::tibble(
  name = fuimus::gelm(resp_resources, "name$") |> fuimus::delist(),
  size = fuimus::gelm(resp_resources, "fileSize$") |> fuimus::delist(),
  url = fuimus::gelm(resp_resources, "downloadURL$") |> fuimus::delist()) |> 
  filter(grepl("Reassignment", name)) |> 
  pull(url)

reassign_csv <- read_csv_arrow(
  file = reassign_url, 
  as_data_frame = TRUE) |> 
  to_duckdb()

reassign_csv
```

# Filtering and Manipulating Data

-------------------------------------------------------------------------------

## Schema

```r
<data.json>
  |--@context
  |--@id
  |--@type
  |--conformsTo
  |--describedBy
  |==<dataset>
  |    |--@type
  |    |--accessLevel
  |    |--accrualPeriodicity
  |    |--bureauCode
  |    |--contactPoint
  |    |--describedBy
  |    |--dataQuality
  |    |--description
  |    |==<distribution>
  |    |    |--@type
  |    |    |--format
  |    |    |--accessURL
  |    |    |--resourcesAPI
  |    |    |--description
  |    |    |--title
  |    |    |--modified
  |    |    |--temporal
  |    |    |--downloadURL
  |    |    |--mediaType
  |    |--identifier
  |    |--keyword
  |    |--landingPage
  |    |--language
  |    |--license
  |    |--modified
  |    |--programCode
  |    |--publisher
  |    |--references
  |    |--temporal
  |    |--theme
  |    |--title
  |____|--describedByType
```
